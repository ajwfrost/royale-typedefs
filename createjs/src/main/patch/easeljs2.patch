diff -ur ../target/downloads/EaselJS-0.8.0/src/createjs/events/Event.js EaselJS-0.8.0/src/createjs/events/Event.js
--- ../target/downloads/EaselJS-0.8.0/src/createjs/events/Event.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/createjs/events/Event.js	2016-05-31 11:03:07.000000000 +0200
@@ -39,10 +39,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 // constructor:
 	/**
@@ -57,7 +53,7 @@
 	 * @param {Boolean} cancelable Indicates whether the default behaviour of this event can be cancelled.
 	 * @constructor
 	 **/
-	function Event(type, bubbles, cancelable) {
+	createjs.Event = function(type, bubbles, cancelable) {
 		
 	
 	// public properties:
@@ -169,7 +165,7 @@
 		*/
 		this.removed = false;
 	}
-	var p = Event.prototype;
+	
 
 	/**
 	 * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.
@@ -182,7 +178,7 @@
 	 * @protected
 	 * @deprecated
 	 */
-	// p.initialize = function() {}; // searchable for devs wondering where it is.
+	// createjs.Event.prototype.initialize = function() {}; // searchable for devs wondering where it is.
 
 // public methods:
 	/**
@@ -190,7 +186,7 @@
 	 * Mirrors the DOM event standard.
 	 * @method preventDefault
 	 **/
-	p.preventDefault = function() {
+ createjs.Event.prototype.preventDefault = function() {
 		this.defaultPrevented = this.cancelable&&true;
 	};
 
@@ -199,7 +195,7 @@
 	 * Mirrors the DOM event standard.
 	 * @method stopPropagation
 	 **/
-	p.stopPropagation = function() {
+ createjs.Event.prototype.stopPropagation = function() {
 		this.propagationStopped = true;
 	};
 
@@ -209,7 +205,7 @@
 	 * Mirrors the DOM event standard.
 	 * @method stopImmediatePropagation
 	 **/
-	p.stopImmediatePropagation = function() {
+ createjs.Event.prototype.stopImmediatePropagation = function() {
 		this.immediatePropagationStopped = this.propagationStopped = true;
 	};
 	
@@ -223,7 +219,7 @@
 	 * 
 	 * @method remove
 	 **/
-	p.remove = function() {
+ createjs.Event.prototype.remove = function() {
 		this.removed = true;
 	};
 	
@@ -232,7 +228,7 @@
 	 * @method clone
 	 * @return {Event} a clone of the Event instance.
 	 **/
-	p.clone = function() {
+ createjs.Event.prototype.clone = function() {
 		return new Event(this.type, this.bubbles, this.cancelable);
 	};
 	
@@ -244,7 +240,7 @@
 	 * @return {Event} Returns the instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	*/
-	p.set = function(props) {
+ createjs.Event.prototype.set = function(props) {
 		for (var n in props) { this[n] = props[n]; }
 		return this;
 	};
@@ -254,9 +250,9 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.Event.prototype.toString = function() {
 		return "[Event (type="+this.type+")]";
 	};
 
-	createjs.Event = Event;
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/createjs/events/EventDispatcher.js EaselJS-0.8.0/src/createjs/events/EventDispatcher.js
--- ../target/downloads/EaselJS-0.8.0/src/createjs/events/EventDispatcher.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/createjs/events/EventDispatcher.js	2016-05-31 11:03:07.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -60,7 +56,7 @@
 	 * <h4>Example</h4>
 	 * Add EventDispatcher capabilities to the "MyClass" class.
 	 *
-	 *      EventDispatcher.initialize(MyClass.prototype);
+	 *      createjs.EventDispatcher.initialize(MyClass.prototype);
 	 *
 	 * Add an event (see {{#crossLink "EventDispatcher/addEventListener"}}{{/crossLink}}).
 	 *
@@ -87,7 +83,7 @@
 	 * @class EventDispatcher
 	 * @constructor
 	 **/
-	function EventDispatcher() {
+	createjs.EventDispatcher = function() {
 	
 	
 	// private properties:
@@ -105,7 +101,7 @@
 		 **/
 		this._captureListeners = null;
 	}
-	var p = EventDispatcher.prototype;
+	
 
 	/**
 	 * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.
@@ -118,30 +114,30 @@
 	 * @protected
 	 * @deprecated
 	 */
-	// p.initialize = function() {}; // searchable for devs wondering where it is.
+	// createjs.EventDispatcher.prototype.initialize = function() {}; // searchable for devs wondering where it is.
 
 
 // static public methods:
 	/**
 	 * Static initializer to mix EventDispatcher methods into a target object or prototype.
 	 * 
-	 * 		EventDispatcher.initialize(MyClass.prototype); // add to the prototype of the class
-	 * 		EventDispatcher.initialize(myObject); // add to a specific instance
+	 * 		createjs.EventDispatcher.initialize(MyClass.prototype); // add to the prototype of the class
+	 * 		createjs.EventDispatcher.initialize(myObject); // add to a specific instance
 	 * 
 	 * @method initialize
 	 * @static
 	 * @param {Object} target The target object to inject EventDispatcher methods into. This can be an instance or a
 	 * prototype.
 	 **/
-	EventDispatcher.initialize = function(target) {
-		target.addEventListener = p.addEventListener;
-		target.on = p.on;
-		target.removeEventListener = target.off =  p.removeEventListener;
-		target.removeAllEventListeners = p.removeAllEventListeners;
-		target.hasEventListener = p.hasEventListener;
-		target.dispatchEvent = p.dispatchEvent;
-		target._dispatchEvent = p._dispatchEvent;
-		target.willTrigger = p.willTrigger;
+	createjs.EventDispatcher.initialize = function(target) {
+		target.addEventListener = createjs.EventDispatcher.prototype.addEventListener;
+		target.on = createjs.EventDispatcher.prototype.on;
+		target.removeEventListener = target.off =  createjs.EventDispatcher.prototype.removeEventListener;
+		target.removeAllEventListeners = createjs.EventDispatcher.prototype.removeAllEventListeners;
+		target.hasEventListener = createjs.EventDispatcher.prototype.hasEventListener;
+		target.dispatchEvent = createjs.EventDispatcher.prototype.dispatchEvent;
+		target._dispatchEvent = createjs.EventDispatcher.prototype._dispatchEvent;
+		target.willTrigger = createjs.EventDispatcher.prototype.willTrigger;
 	};
 	
 
@@ -164,7 +160,7 @@
 	 * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.
 	 * @return {Function | Object} Returns the listener for chaining or assignment.
 	 **/
-	p.addEventListener = function(type, listener, useCapture) {
+ createjs.EventDispatcher.prototype.addEventListener = function(type, listener, useCapture) {
 		var listeners;
 		if (useCapture) {
 			listeners = this._captureListeners = this._captureListeners||{};
@@ -209,7 +205,7 @@
 	 * @param {Boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.
 	 * @return {Function} Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.
 	 **/
-	p.on = function(type, listener, scope, once, data, useCapture) {
+ createjs.EventDispatcher.prototype.on = function(type, listener, scope, once, data, useCapture) {
 		if (listener.handleEvent) {
 			scope = scope||listener;
 			listener = listener.handleEvent;
@@ -237,7 +233,7 @@
 	 * @param {Function | Object} listener The listener function or object.
 	 * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.
 	 **/
-	p.removeEventListener = function(type, listener, useCapture) {
+ createjs.EventDispatcher.prototype.removeEventListener = function(type, listener, useCapture) {
 		var listeners = useCapture ? this._captureListeners : this._listeners;
 		if (!listeners) { return; }
 		var arr = listeners[type];
@@ -260,7 +256,7 @@
 	 * @param {Function | Object} listener The listener function or object.
 	 * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.
 	 **/
-	p.off = p.removeEventListener;
+ createjs.EventDispatcher.prototype.off = createjs.EventDispatcher.prototype.removeEventListener;
 
 	/**
 	 * Removes all listeners for the specified type, or all listeners of all types.
@@ -276,7 +272,7 @@
 	 * @method removeAllEventListeners
 	 * @param {String} [type] The string type of the event. If omitted, all listeners for all types will be removed.
 	 **/
-	p.removeAllEventListeners = function(type) {
+ createjs.EventDispatcher.prototype.removeAllEventListeners = function(type) {
 		if (!type) { this._listeners = this._captureListeners = null; }
 		else {
 			if (this._listeners) { delete(this._listeners[type]); }
@@ -302,7 +298,7 @@
 	 * dispatchEvent will construct an Event instance with the specified type.
 	 * @return {Boolean} Returns the value of eventObj.defaultPrevented.
 	 **/
-	p.dispatchEvent = function(eventObj) {
+ createjs.EventDispatcher.prototype.dispatchEvent = function(eventObj) {
 		if (typeof eventObj == "string") {
 			// won't bubble, so skip everything if there's no listeners:
 			var listeners = this._listeners;
@@ -339,7 +335,7 @@
 	 * @param {String} type The string type of the event.
 	 * @return {Boolean} Returns true if there is at least one listener for the specified event.
 	 **/
-	p.hasEventListener = function(type) {
+ createjs.EventDispatcher.prototype.hasEventListener = function(type) {
 		var listeners = this._listeners, captureListeners = this._captureListeners;
 		return !!((listeners && listeners[type]) || (captureListeners && captureListeners[type]));
 	};
@@ -355,7 +351,7 @@
 	 * @param {String} type The string type of the event.
 	 * @return {Boolean} Returns `true` if there is at least one listener for the specified event.
 	 **/
-	p.willTrigger = function(type) {
+ createjs.EventDispatcher.prototype.willTrigger = function(type) {
 		var o = this;
 		while (o) {
 			if (o.hasEventListener(type)) { return true; }
@@ -368,7 +364,7 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.EventDispatcher.prototype.toString = function() {
 		return "[EventDispatcher]";
 	};
 
@@ -380,7 +376,7 @@
 	 * @param {Object} eventPhase
 	 * @protected
 	 **/
-	p._dispatchEvent = function(eventObj, eventPhase) {
+ createjs.EventDispatcher.prototype._dispatchEvent = function(eventObj, eventPhase) {
 		var l, listeners = (eventPhase==1) ? this._captureListeners : this._listeners;
 		if (eventObj && listeners) {
 			var arr = listeners[eventObj.type];
@@ -403,5 +399,5 @@
 	};
 
 
-	createjs.EventDispatcher = EventDispatcher;
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/createjs/utils/Ticker.js EaselJS-0.8.0/src/createjs/utils/Ticker.js
--- ../target/downloads/EaselJS-0.8.0/src/createjs/utils/Ticker.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/createjs/utils/Ticker.js	2016-05-31 11:03:08.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -43,7 +39,7 @@
 	 * event to be notified when a set time interval has elapsed.
 	 *
 	 * Note that the interval that the tick event is called is a target interval, and may be broadcast at a slower interval
-	 * when under high CPU load. The Ticker class uses a static interface (ex. `Ticker.framerate = 30;`) and
+	 * when under high CPU load. The Ticker class uses a static interface (ex. `createjs.Ticker.framerate = 30;`) and
 	 * can not be instantiated.
 	 *
 	 * <h4>Example</h4>
@@ -60,7 +56,7 @@
 	 * @uses EventDispatcher
 	 * @static
 	 **/
-	function Ticker() {
+	createjs.Ticker = function() {
 		throw "Ticker cannot be instantiated.";
 	}
 
@@ -84,7 +80,7 @@
 	 * @default "synched"
 	 * @readonly
 	 **/
-	Ticker.RAF_SYNCHED = "synched";
+	createjs.Ticker.RAF_SYNCHED = "synched";
 
 	/**
 	 * In this mode, Ticker passes through the requestAnimationFrame heartbeat, ignoring the target framerate completely.
@@ -99,7 +95,7 @@
 	 * @default "raf"
 	 * @readonly
 	 **/
-	Ticker.RAF = "raf";
+	createjs.Ticker.RAF = "raf";
 
 	/**
 	 * In this mode, Ticker uses the setTimeout API. This provides predictable, adaptive frame timing, but does not
@@ -110,7 +106,7 @@
 	 * @default "timer"
 	 * @readonly
 	 **/
-	Ticker.TIMEOUT = "timeout";
+	createjs.Ticker.TIMEOUT = "timeout";
 
 
 // static events:
@@ -147,7 +143,7 @@
 	 * @type {Boolean}
 	 * @default false
 	 **/
-	Ticker.useRAF = false;
+	createjs.Ticker.useRAF = false;
 
 	/**
 	 * Specifies the timing api (setTimeout or requestAnimationFrame) and mode to use. See
@@ -156,9 +152,9 @@
 	 * @property timingMode
 	 * @static
 	 * @type {String}
-	 * @default Ticker.TIMEOUT
+	 * @default createjs.Ticker.TIMEOUT
 	 **/
-	Ticker.timingMode = null;
+	createjs.Ticker.timingMode = null;
 
 	/**
 	 * Specifies a maximum value for the delta property in the tick event object. This is useful when building time
@@ -175,7 +171,7 @@
 	 * @type {number}
 	 * @default 0
 	 */
-	Ticker.maxDelta = 0;
+	createjs.Ticker.maxDelta = 0;
 	
 	/**
 	 * When the ticker is paused, all listeners will still receive a tick event, but the <code>paused</code> property of the event will be false.
@@ -197,21 +193,21 @@
 	 * @type {Boolean}
 	 * @default false
 	 **/
-	Ticker.paused = false;
+	createjs.Ticker.paused = false;
 
 
 // mix-ins:
 	// EventDispatcher methods:
-	Ticker.removeEventListener = null;
-	Ticker.removeAllEventListeners = null;
-	Ticker.dispatchEvent = null;
-	Ticker.hasEventListener = null;
-	Ticker._listeners = null;
+	createjs.Ticker.removeEventListener = null;
+	createjs.Ticker.removeAllEventListeners = null;
+	createjs.Ticker.dispatchEvent = null;
+	createjs.Ticker.hasEventListener = null;
+	createjs.Ticker._listeners = null;
 	createjs.EventDispatcher.initialize(Ticker); // inject EventDispatcher methods.
-	Ticker._addEventListener = Ticker.addEventListener;
-	Ticker.addEventListener = function() {
-		!Ticker._inited&&Ticker.init();
-		return Ticker._addEventListener.apply(Ticker, arguments);
+	createjs.Ticker._addEventListener = createjs.Ticker.addEventListener;
+	createjs.Ticker.addEventListener = function() {
+		!createjs.Ticker._inited&&createjs.Ticker.init();
+		return createjs.Ticker._addEventListener.apply(Ticker, arguments);
 	};
 
 
@@ -222,7 +218,7 @@
 	 * @type {Boolean}
 	 * @protected
 	 **/
-	Ticker._inited = false;
+	createjs.Ticker._inited = false;
 
 	/**
 	 * @property _startTime
@@ -230,7 +226,7 @@
 	 * @type {Number}
 	 * @protected
 	 **/
-	Ticker._startTime = 0;
+	createjs.Ticker._startTime = 0;
 
 	/**
 	 * @property _pausedTime
@@ -238,7 +234,7 @@
 	 * @type {Number}
 	 * @protected
 	 **/
-	Ticker._pausedTime=0;
+	createjs.Ticker._pausedTime=0;
 
 	/**
 	 * The number of ticks that have passed
@@ -247,7 +243,7 @@
 	 * @type {Number}
 	 * @protected
 	 **/
-	Ticker._ticks = 0;
+	createjs.Ticker._ticks = 0;
 
 	/**
 	 * The number of ticks that have passed while Ticker has been paused
@@ -256,7 +252,7 @@
 	 * @type {Number}
 	 * @protected
 	 **/
-	Ticker._pausedTicks = 0;
+	createjs.Ticker._pausedTicks = 0;
 
 	/**
 	 * @property _interval
@@ -264,7 +260,7 @@
 	 * @type {Number}
 	 * @protected
 	 **/
-	Ticker._interval = 50;
+	createjs.Ticker._interval = 50;
 
 	/**
 	 * @property _lastTime
@@ -272,7 +268,7 @@
 	 * @type {Number}
 	 * @protected
 	 **/
-	Ticker._lastTime = 0;
+	createjs.Ticker._lastTime = 0;
 
 	/**
 	 * @property _times
@@ -280,7 +276,7 @@
 	 * @type {Array}
 	 * @protected
 	 **/
-	Ticker._times = null;
+	createjs.Ticker._times = null;
 
 	/**
 	 * @property _tickTimes
@@ -288,7 +284,7 @@
 	 * @type {Array}
 	 * @protected
 	 **/
-	Ticker._tickTimes = null;
+	createjs.Ticker._tickTimes = null;
 
 	/**
 	 * Stores the timeout or requestAnimationFrame id.
@@ -297,7 +293,7 @@
 	 * @type {Number}
 	 * @protected
 	 **/
-	Ticker._timerId = null;
+	createjs.Ticker._timerId = null;
 	
 	/**
 	 * True if currently using requestAnimationFrame, false if using setTimeout. This may be different than timingMode
@@ -307,7 +303,7 @@
 	 * @type {Boolean}
 	 * @protected
 	 **/
-	Ticker._raf = true;
+	createjs.Ticker._raf = true;
 	
 
 // static getter / setters:
@@ -318,10 +314,10 @@
 	 * @param {Number} interval
 	 * @deprecated
 	 **/
-	Ticker.setInterval = function(interval) {
-		Ticker._interval = interval;
-		if (!Ticker._inited) { return; }
-		Ticker._setupTick();
+	createjs.Ticker.setInterval = function(interval) {
+		createjs.Ticker._interval = interval;
+		if (!createjs.Ticker._inited) { return; }
+		createjs.Ticker._setupTick();
 	};
 
 	/**
@@ -331,8 +327,8 @@
 	 * @return {Number}
 	 * @deprecated
 	 **/
-	Ticker.getInterval = function() {
-		return Ticker._interval;
+	createjs.Ticker.getInterval = function() {
+		return createjs.Ticker._interval;
 	};
 
 	/**
@@ -342,8 +338,8 @@
 	 * @param {Number} value
 	 * @deprecated
 	 **/
-	Ticker.setFPS = function(value) {
-		Ticker.setInterval(1000/value);
+	createjs.Ticker.setFPS = function(value) {
+		createjs.Ticker.setInterval(1000/value);
 	};
 
 	/**
@@ -353,66 +349,42 @@
 	 * @return {Number}
 	 * @deprecated
 	 **/
-	Ticker.getFPS = function() {
-		return 1000/Ticker._interval;
+	createjs.Ticker.getFPS = function() {
+		return 1000/createjs.Ticker._interval;
 	};
 
-	/**
-	 * Indicates the target time (in milliseconds) between ticks. Default is 50 (20 FPS).
-	 * Note that actual time between ticks may be more than specified depending on CPU load.
-	 * This property is ignored if the ticker is using the `RAF` timing mode.
-	 * @property interval
-	 * @static
-	 * @type {Number}
-	 **/
-	 
-	/**
-	 * Indicates the target frame rate in frames per second (FPS). Effectively just a shortcut to `interval`, where
-	 * `framerate == 1000/interval`.
-	 * @property framerate
-	 * @static
-	 * @type {Number}
-	 **/
-	try {
-		Object.defineProperties(Ticker, {
-			interval: { get: Ticker.getInterval, set: Ticker.setInterval },
-			framerate: { get: Ticker.getFPS, set: Ticker.setFPS }
-		});
-	} catch (e) { console.log(e); }
-
-
 // public static methods:
 	/**
 	 * Starts the tick. This is called automatically when the first listener is added.
 	 * @method init
 	 * @static
 	 **/
-	Ticker.init = function() {
-		if (Ticker._inited) { return; }
-		Ticker._inited = true;
-		Ticker._times = [];
-		Ticker._tickTimes = [];
-		Ticker._startTime = Ticker._getTime();
-		Ticker._times.push(Ticker._lastTime = 0);
-		Ticker.interval = Ticker._interval;
+	createjs.Ticker.init = function() {
+		if (createjs.Ticker._inited) { return; }
+		createjs.Ticker._inited = true;
+		createjs.Ticker._times = [];
+		createjs.Ticker._tickTimes = [];
+		createjs.Ticker._startTime = createjs.Ticker._getTime();
+		createjs.Ticker._times.push(createjs.Ticker._lastTime = 0);
+		createjs.Ticker.interval = createjs.Ticker._interval;
 	};
 	
 	/**
-	 * Stops the Ticker and removes all listeners. Use init() to restart the Ticker.
+	 * Stops the Ticker and removes all listeners. Use init() to restart the createjs.Ticker.
 	 * @method reset
 	 * @static
 	 **/
-	Ticker.reset = function() {
-		if (Ticker._raf) {
+	createjs.Ticker.reset = function() {
+		if (createjs.Ticker._raf) {
 			var f = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame;
-			f&&f(Ticker._timerId);
+			f&&f(createjs.Ticker._timerId);
 		} else {
-			clearTimeout(Ticker._timerId);
+			clearTimeout(createjs.Ticker._timerId);
 		}
-		Ticker.removeAllEventListeners("tick");
-		Ticker._timerId = Ticker._times = Ticker._tickTimes = null;
-		Ticker._startTime = Ticker._lastTime = Ticker._ticks = 0;
-		Ticker._inited = false;
+		createjs.Ticker.removeAllEventListeners("tick");
+		createjs.Ticker._timerId = createjs.Ticker._times = createjs.Ticker._tickTimes = null;
+		createjs.Ticker._startTime = createjs.Ticker._lastTime = createjs.Ticker._ticks = 0;
+		createjs.Ticker._inited = false;
 	};
 
 	/**
@@ -432,12 +404,12 @@
 	 * Defaults to the number of ticks per second. To get only the last tick's time, pass in 1.
 	 * @return {Number} The average time spent in a tick in milliseconds.
 	 **/
-	Ticker.getMeasuredTickTime = function(ticks) {
-		var ttl=0, times=Ticker._tickTimes;
+	createjs.Ticker.getMeasuredTickTime = function(ticks) {
+		var ttl=0, times=createjs.Ticker._tickTimes;
 		if (!times || times.length < 1) { return -1; }
 
 		// by default, calculate average for the past ~1 second:
-		ticks = Math.min(times.length, ticks||(Ticker.getFPS()|0));
+		ticks = Math.min(times.length, ticks||(createjs.Ticker.getFPS()|0));
 		for (var i=0; i<ticks; i++) { ttl += times[i]; }
 		return ttl/ticks;
 	};
@@ -451,12 +423,12 @@
 	 * @return {Number} The actual frames / ticks per second. Depending on performance, this may differ
 	 * from the target frames per second.
 	 **/
-	Ticker.getMeasuredFPS = function(ticks) {
-		var times = Ticker._times;
+	createjs.Ticker.getMeasuredFPS = function(ticks) {
+		var times = createjs.Ticker._times;
 		if (!times || times.length < 2) { return -1; }
 
 		// by default, calculate fps for the past ~1 second:
-		ticks = Math.min(times.length-1, ticks||(Ticker.getFPS()|0));
+		ticks = Math.min(times.length-1, ticks||(createjs.Ticker.getFPS()|0));
 		return 1000/((times[0]-times[ticks])/ticks);
 	};
 
@@ -467,9 +439,9 @@
 	 * @param {Boolean} value
 	 * @deprecated
 	 **/
-	Ticker.setPaused = function(value) {
+	createjs.Ticker.setPaused = function(value) {
 		// TODO: deprecated.
-		Ticker.paused = value;
+		createjs.Ticker.paused = value;
 	};
 
 	/**
@@ -479,9 +451,9 @@
 	 * @return {Boolean}
 	 * @deprecated
 	 **/
-	Ticker.getPaused = function() {
+	createjs.Ticker.getPaused = function() {
 		// TODO: deprecated.
-		return Ticker.paused;
+		return createjs.Ticker.paused;
 	};
 
 	/**
@@ -494,8 +466,8 @@
 	 * If false, the value returned will be total time elapsed since the first tick event listener was added.
 	 * @return {Number} Number of milliseconds that have elapsed since Ticker was initialized or -1.
 	 **/
-	Ticker.getTime = function(runTime) {
-		return Ticker._startTime ? Ticker._getTime() - (runTime ? Ticker._pausedTime : 0) : -1;
+	createjs.Ticker.getTime = function(runTime) {
+		return createjs.Ticker._startTime ? createjs.Ticker._getTime() - (runTime ? createjs.Ticker._pausedTime : 0) : -1;
 	};
 
 	/**
@@ -505,12 +477,12 @@
 	 * @param runTime {Boolean} [runTime=false] If true, the runTime property will be returned instead of time.
 	 * @returns {number} The time or runTime property from the most recent tick event or -1.
 	 */
-	Ticker.getEventTime = function(runTime) {
-		return Ticker._startTime ? (Ticker._lastTime || Ticker._startTime) - (runTime ? Ticker._pausedTime : 0) : -1;
+	createjs.Ticker.getEventTime = function(runTime) {
+		return createjs.Ticker._startTime ? (createjs.Ticker._lastTime || createjs.Ticker._startTime) - (runTime ? createjs.Ticker._pausedTime : 0) : -1;
 	};
 	
 	/**
-	 * Returns the number of ticks that have been broadcast by Ticker.
+	 * Returns the number of ticks that have been broadcast by createjs.Ticker.
 	 * @method getTicks
 	 * @static
 	 * @param {Boolean} pauseable Indicates whether to include ticks that would have been broadcast
@@ -519,8 +491,8 @@
 	 * value. The default value is false.
 	 * @return {Number} of ticks that have been broadcast.
 	 **/
-	Ticker.getTicks = function(pauseable) {
-		return  Ticker._ticks - (pauseable ? Ticker._pausedTicks : 0);
+	createjs.Ticker.getTicks = function(pauseable) {
+		return  createjs.Ticker._ticks - (pauseable ? createjs.Ticker._pausedTicks : 0);
 	};
 
 
@@ -530,13 +502,13 @@
 	 * @static
 	 * @protected
 	 **/
-	Ticker._handleSynch = function() {
-		Ticker._timerId = null;
-		Ticker._setupTick();
+	createjs.Ticker._handleSynch = function() {
+		createjs.Ticker._timerId = null;
+		createjs.Ticker._setupTick();
 
 		// run if enough time has elapsed, with a little bit of flexibility to be early:
-		if (Ticker._getTime() - Ticker._lastTime >= (Ticker._interval-1)*0.97) {
-			Ticker._tick();
+		if (createjs.Ticker._getTime() - createjs.Ticker._lastTime >= (createjs.Ticker._interval-1)*0.97) {
+			createjs.Ticker._tick();
 		}
 	};
 
@@ -545,10 +517,10 @@
 	 * @static
 	 * @protected
 	 **/
-	Ticker._handleRAF = function() {
-		Ticker._timerId = null;
-		Ticker._setupTick();
-		Ticker._tick();
+	createjs.Ticker._handleRAF = function() {
+		createjs.Ticker._timerId = null;
+		createjs.Ticker._setupTick();
+		createjs.Ticker._tick();
 	};
 
 	/**
@@ -556,10 +528,10 @@
 	 * @static
 	 * @protected
 	 **/
-	Ticker._handleTimeout = function() {
-		Ticker._timerId = null;
-		Ticker._setupTick();
-		Ticker._tick();
+	createjs.Ticker._handleTimeout = function() {
+		createjs.Ticker._timerId = null;
+		createjs.Ticker._setupTick();
+		createjs.Ticker._tick();
 	};
 
 	/**
@@ -567,20 +539,20 @@
 	 * @static
 	 * @protected
 	 **/
-	Ticker._setupTick = function() {
-		if (Ticker._timerId != null) { return; } // avoid duplicates
+	createjs.Ticker._setupTick = function() {
+		if (createjs.Ticker._timerId != null) { return; } // avoid duplicates
 
-		var mode = Ticker.timingMode||(Ticker.useRAF&&Ticker.RAF_SYNCHED);
-		if (mode == Ticker.RAF_SYNCHED || mode == Ticker.RAF) {
+		var mode = createjs.Ticker.timingMode||(createjs.Ticker.useRAF&&createjs.Ticker.RAF_SYNCHED);
+		if (mode == createjs.Ticker.RAF_SYNCHED || mode == createjs.Ticker.RAF) {
 			var f = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
 			if (f) {
-				Ticker._timerId = f(mode == Ticker.RAF ? Ticker._handleRAF : Ticker._handleSynch);
-				Ticker._raf = true;
+				createjs.Ticker._timerId = f(mode == createjs.Ticker.RAF ? createjs.Ticker._handleRAF : createjs.Ticker._handleSynch);
+				createjs.Ticker._raf = true;
 				return;
 			}
 		}
-		Ticker._raf = false;
-		Ticker._timerId = setTimeout(Ticker._handleTimeout, Ticker._interval);
+		createjs.Ticker._raf = false;
+		createjs.Ticker._timerId = setTimeout(createjs.Ticker._handleTimeout, createjs.Ticker._interval);
 	};
 
 	/**
@@ -588,33 +560,33 @@
 	 * @static
 	 * @protected
 	 **/
-	Ticker._tick = function() {
-		var paused = Ticker.paused;
-		var time = Ticker._getTime();
-		var elapsedTime = time-Ticker._lastTime;
-		Ticker._lastTime = time;
-		Ticker._ticks++;
+	createjs.Ticker._tick = function() {
+		var paused = createjs.Ticker.paused;
+		var time = createjs.Ticker._getTime();
+		var elapsedTime = time-createjs.Ticker._lastTime;
+		createjs.Ticker._lastTime = time;
+		createjs.Ticker._ticks++;
 		
 		if (paused) {
-			Ticker._pausedTicks++;
-			Ticker._pausedTime += elapsedTime;
+			createjs.Ticker._pausedTicks++;
+			createjs.Ticker._pausedTime += elapsedTime;
 		}
 		
-		if (Ticker.hasEventListener("tick")) {
+		if (createjs.Ticker.hasEventListener("tick")) {
 			var event = new createjs.Event("tick");
-			var maxDelta = Ticker.maxDelta;
+			var maxDelta = createjs.Ticker.maxDelta;
 			event.delta = (maxDelta && elapsedTime > maxDelta) ? maxDelta : elapsedTime;
 			event.paused = paused;
 			event.time = time;
-			event.runTime = time-Ticker._pausedTime;
-			Ticker.dispatchEvent(event);
+			event.runTime = time-createjs.Ticker._pausedTime;
+			createjs.Ticker.dispatchEvent(event);
 		}
 		
-		Ticker._tickTimes.unshift(Ticker._getTime()-time);
-		while (Ticker._tickTimes.length > 100) { Ticker._tickTimes.pop(); }
+		createjs.Ticker._tickTimes.unshift(createjs.Ticker._getTime()-time);
+		while (createjs.Ticker._tickTimes.length > 100) { createjs.Ticker._tickTimes.pop(); }
 
-		Ticker._times.unshift(time);
-		while (Ticker._times.length > 100) { Ticker._times.pop(); }
+		createjs.Ticker._times.unshift(time);
+		while (createjs.Ticker._times.length > 100) { createjs.Ticker._times.pop(); }
 	};
 
 	/**
@@ -623,10 +595,10 @@
 	 * @protected
 	 **/
 	var now = window.performance && (performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow);
-	Ticker._getTime = function() {
-		return ((now&&now.call(performance))||(new Date().getTime())) - Ticker._startTime;
+	createjs.Ticker._getTime = function() {
+		return ((now&&now.call(performance))||(new Date().getTime())) - createjs.Ticker._startTime;
 	};
 
 
-	createjs.Ticker = Ticker;
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/createjs/utils/extend.js EaselJS-0.8.0/src/createjs/utils/extend.js
--- ../target/downloads/EaselJS-0.8.0/src/createjs/utils/extend.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/createjs/utils/extend.js	2016-05-31 11:03:07.000000000 +0200
@@ -31,7 +31,7 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
+
 
 /**
  * @class Utility Methods
@@ -52,11 +52,10 @@
  *
  * @method extend
  * @param {Function} subclass The subclass.
- * @param {Function} superclass The superclass to extend.
+ * @param {Function} superclass The superclass to createjs.extend.
  * @return {Function} Returns the subclass's new prototype.
  */
 createjs.extend = function(subclass, superclass) {
-	"use strict";
 
 	function o() { this.constructor = subclass; }
 	o.prototype = superclass.prototype;
diff -ur ../target/downloads/EaselJS-0.8.0/src/createjs/utils/indexOf.js EaselJS-0.8.0/src/createjs/utils/indexOf.js
--- ../target/downloads/EaselJS-0.8.0/src/createjs/utils/indexOf.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/createjs/utils/indexOf.js	2016-05-31 11:03:07.000000000 +0200
@@ -31,7 +31,7 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
+
 
 /**
  * @class Utility Methods
@@ -49,7 +49,6 @@
  * @return {Number} The first index of searchElement in array.
  */
 createjs.indexOf = function (array, searchElement){
-	"use strict";
 
 	for (var i = 0,l=array.length; i < l; i++) {
 		if (searchElement === array[i]) {
diff -ur ../target/downloads/EaselJS-0.8.0/src/createjs/utils/promote.js EaselJS-0.8.0/src/createjs/utils/promote.js
--- ../target/downloads/EaselJS-0.8.0/src/createjs/utils/promote.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/createjs/utils/promote.js	2016-05-31 11:03:08.000000000 +0200
@@ -31,7 +31,7 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
+
 
 /**
  * @class Utility Methods
@@ -75,7 +75,6 @@
  * @return {Function} Returns the subclass.
  */
 createjs.promote = function(subclass, prefix) {
-	"use strict";
 
 	var subP = subclass.prototype, supP = (Object.getPrototypeOf&&Object.getPrototypeOf(subP))||subP.__proto__;
 	if (supP) {
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/display/Bitmap.js EaselJS-0.8.0/src/easeljs/display/Bitmap.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/display/Bitmap.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/display/Bitmap.js	2016-05-31 11:03:08.000000000 +0200
@@ -31,11 +31,7 @@
 */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	
-	/**
+/**
 	 * A Bitmap represents an Image, Canvas, or Video in the display list. A Bitmap can be instantiated using an existing
 	 * HTML element, or a string.
 	 *
@@ -57,13 +53,13 @@
 	 * </ol>
 	 *
 	 * @class Bitmap
-	 * @extends DisplayObject
+	 * @extends createjs.DisplayObject
 	 * @constructor
 	 * @param {Image | HTMLCanvasElement | HTMLVideoElement | String} imageOrUri The source object or URI to an image to
 	 * display. This can be either an Image, Canvas, or Video object, or a string URI to an image file to load and use.
 	 * If it is a URI, a new Image object will be constructed and assigned to the .image property.
 	 **/
-	function Bitmap(imageOrUri) {
+	createjs.Bitmap = function(imageOrUri) {
 		this.DisplayObject_constructor();
 		
 		
@@ -90,7 +86,7 @@
 		 */
 		this.sourceRect = null;
 	}
-	var p = createjs.extend(Bitmap, createjs.DisplayObject);
+	
 	
 	
 // public methods:
@@ -100,7 +96,7 @@
 	 * @method initialize
 	 * @deprecated in favour of `createjs.promote()`
 	 **/
-	p.initialize = Bitmap; // TODO: deprecated.
+ createjs.Bitmap.prototype.initialize = Bitmap; // TODO: deprecated.
 
 	/**
 	 * Returns true or false indicating whether the display object would be visible if drawn to a canvas.
@@ -110,7 +106,7 @@
 	 * @method isVisible
 	 * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas
 	 **/
-	p.isVisible = function() {
+ createjs.Bitmap.prototype.isVisible = function() {
 		var hasContent = this.cacheCanvas || (this.image && (this.image.complete || this.image.getContext || this.image.readyState >= 2));
 		return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);
 	};
@@ -127,7 +123,7 @@
 	 * into itself).
 	 * @return {Boolean}
 	 **/
-	p.draw = function(ctx, ignoreCache) {
+ createjs.Bitmap.prototype.draw = function(ctx, ignoreCache) {
 		if (this.DisplayObject_draw(ctx, ignoreCache) || !this.image) { return true; }
 		var img = this.image, rect = this.sourceRect;
 		if (rect) {
@@ -145,7 +141,7 @@
 	};
 	
 	//Note, the doc sections below document using the specified APIs (from DisplayObject)  from
-	//Bitmap. This is why they have no method implementations.
+	//createjs.Bitmap. This is why they have no method implementations.
 	
 	/**
 	 * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.
@@ -180,7 +176,7 @@
 	/**
 	 * Docced in superclass.
 	 */
-	p.getBounds = function() {
+ createjs.Bitmap.prototype.getBounds = function() {
 		var rect = this.DisplayObject_getBounds();
 		if (rect) { return rect; }
 		var o = this.sourceRect || this.image;
@@ -193,7 +189,7 @@
 	 * @method clone
 	 * @return {Bitmap} a clone of the Bitmap instance.
 	 **/
-	p.clone = function() {
+ createjs.Bitmap.prototype.clone = function() {
 		var o = new Bitmap(this.image);
 		if (this.sourceRect) { o.sourceRect = this.sourceRect.clone(); }
 		this._cloneProps(o);
@@ -205,10 +201,10 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.Bitmap.prototype.toString = function() {
 		return "[Bitmap (name="+  this.name +")]";
 	};
 
 	
-	createjs.Bitmap = createjs.promote(Bitmap, "DisplayObject");
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/display/BitmapText.js EaselJS-0.8.0/src/easeljs/display/BitmapText.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/display/BitmapText.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/display/BitmapText.js	2016-05-31 11:03:07.000000000 +0200
@@ -26,11 +26,6 @@
 * OTHER DEALINGS IN THE SOFTWARE.
 */
 
-this.createjs = this.createjs || {};
-
-(function () {
-	"use strict";
-
 
 // constructor:
 	/**
@@ -42,12 +37,12 @@
 	 * <strong>Important:</strong> BitmapText extends Container, but is not designed to be used as one.
 	 * As such, methods like addChild and removeChild are disabled.
 	 * @class BitmapText
-	 * @extends DisplayObject
+	 * @extends createjs.DisplayObject
 	 * @param {String} [text=""] The text to display.
-	 * @param {SpriteSheet} [spriteSheet=null] The spritesheet that defines the character glyphs.
+	 * @param {createjs.SpriteSheet} [spriteSheet=null] The spritesheet that defines the character glyphs.
 	 * @constructor
 	 **/
-	function BitmapText(text, spriteSheet) {
+	createjs.BitmapText = function(text, spriteSheet) {
 		this.Container_constructor();
 		
 		
@@ -122,7 +117,7 @@
 		 **/
 		this._oldProps = {text:0,spriteSheet:0,lineHeight:0,letterSpacing:0,spaceWidth:0};
 	}
-	var p = createjs.extend(BitmapText, createjs.Container);
+	
 
 	/**
 	 * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.
@@ -135,7 +130,7 @@
 	 * @protected
 	 * @deprecated
 	 */
-	// p.initialize = function() {}; // searchable for devs wondering where it is.
+	// createjs.BitmapText.prototype.initialize = function() {}; // searchable for devs wondering where it is.
 
 // static properties:
 	/**
@@ -147,7 +142,7 @@
 	 * @static
 	 * @default 100
 	 **/
-	BitmapText.maxPoolSize = 100;
+	createjs.BitmapText.maxPoolSize = 100;
 	
 	/**
 	 * Sprite object pool.
@@ -155,14 +150,14 @@
 	 * @static
 	 * @private
 	 */
-	BitmapText._spritePool = [];
+	createjs.BitmapText._spritePool = [];
 
 	
 // public methods:
 	/**
 	 * Docced in superclass.
 	 **/
-	p.draw = function(ctx, ignoreCache) {
+ createjs.BitmapText.prototype.draw = function(ctx, ignoreCache) {
 		if (this.DisplayObject_draw(ctx, ignoreCache)) { return; }
 		this._updateText();
 		this.Container_draw(ctx, ignoreCache);
@@ -171,7 +166,7 @@
 	/**
 	 * Docced in superclass.
 	 **/
-	p.getBounds = function() {
+ createjs.BitmapText.prototype.getBounds = function() {
 		this._updateText();
 		return this.Container_getBounds();
 	};
@@ -183,36 +178,36 @@
 	 * @method isVisible
 	 * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas
 	 **/
-	p.isVisible = function() {
+ createjs.BitmapText.prototype.isVisible = function() {
 		var hasContent = this.cacheCanvas || (this.spriteSheet && this.spriteSheet.complete && this.text);
 		return !!(this.visible && this.alpha > 0 && this.scaleX !== 0 && this.scaleY !== 0 && hasContent);
 	};
 	
-	p.clone = function() {
+ createjs.BitmapText.prototype.clone = function() {
 		return this._cloneProps(new BitmapText(this.text, this.spriteSheet));
 	};
 	
 	/**
-	 * <strong>Disabled in BitmapText.</strong>
+	 * <strong>Disabled in createjs.BitmapText.</strong>
 	 * @method addChild
 	 **/
 	/**
-	 * <strong>Disabled in BitmapText.</strong>
+	 * <strong>Disabled in createjs.BitmapText.</strong>
 	 * @method addChildAt
 	 **/
 	/**
-	 * <strong>Disabled in BitmapText.</strong>
+	 * <strong>Disabled in createjs.BitmapText.</strong>
 	 * @method removeChild
 	 **/
 	/**
-	 * <strong>Disabled in BitmapText.</strong>
+	 * <strong>Disabled in createjs.BitmapText.</strong>
 	 * @method removeChildAt
 	 **/
 	/**
-	 * <strong>Disabled in BitmapText.</strong>
+	 * <strong>Disabled in createjs.BitmapText.</strong>
 	 * @method removeAllChildren
 	 **/
-	p.addChild = p.addChildAt = p.removeChild = p.removeChildAt = p.removeAllChildren = function() {};
+ createjs.BitmapText.prototype.addChild = createjs.BitmapText.prototype.addChildAt = createjs.BitmapText.prototype.removeChild = createjs.BitmapText.prototype.removeChildAt = createjs.BitmapText.prototype.removeAllChildren = function() {};
 
 
 // private methods:
@@ -222,7 +217,7 @@
 	 * @return {BitmapText} o
 	 * @protected
 	 **/
-	p._cloneProps = function(o) {
+ createjs.BitmapText.prototype._cloneProps = function(o) {
 		this.DisplayObject__cloneProps(o);
 		o.lineHeight = this.lineHeight;
 		o.letterSpacing = this.letterSpacing;
@@ -233,11 +228,11 @@
 	/**
 	 * @method _getFrameIndex
 	 * @param {String} character
-	 * @param {SpriteSheet} spriteSheet
+	 * @param {createjs.SpriteSheet} spriteSheet
 	 * @return {Number}
 	 * @protected
 	 **/
-	p._getFrameIndex = function(character, spriteSheet) {
+ createjs.BitmapText.prototype._getFrameIndex = function(character, spriteSheet) {
 		var c, o = spriteSheet.getAnimation(character);
 		if (!o) {
 			(character != (c = character.toUpperCase())) || (character != (c = character.toLowerCase())) || (c=null);
@@ -249,32 +244,32 @@
 	/**
 	 * @method _getFrame
 	 * @param {String} character
-	 * @param {SpriteSheet} spriteSheet
+	 * @param {createjs.SpriteSheet} spriteSheet
 	 * @return {Object}
 	 * @protected
 	 **/
-	p._getFrame = function(character, spriteSheet) {
+ createjs.BitmapText.prototype._getFrame = function(character, spriteSheet) {
 		var index = this._getFrameIndex(character, spriteSheet);
 		return index == null ? index : spriteSheet.getFrame(index);
 	};
 	
 	/**
 	 * @method _getLineHeight
-	 * @param {SpriteSheet} ss
+	 * @param {createjs.SpriteSheet} ss
 	 * @return {Number}
 	 * @protected
 	 **/
-	p._getLineHeight = function(ss) {
+ createjs.BitmapText.prototype._getLineHeight = function(ss) {
 		var frame = this._getFrame("1",ss) || this._getFrame("T",ss) || this._getFrame("L",ss) || ss.getFrame(0);
 		return frame ? frame.rect.height : 1;
 	};
 	/**
 	 * @method _getSpaceWidth
-	 * @param {SpriteSheet} ss
+	 * @param {createjs.SpriteSheet} ss
 	 * @return {Number}
 	 * @protected
 	 **/
-	p._getSpaceWidth = function(ss) {
+ createjs.BitmapText.prototype._getSpaceWidth = function(ss) {
 		var frame = this._getFrame("1",ss) || this._getFrame("l",ss) || this._getFrame("e",ss) || this._getFrame("a",ss) || ss.getFrame(0);
 		return frame ? frame.rect.width : 1;
 	};
@@ -283,9 +278,9 @@
 	 * @method _drawText
 	 * @protected
 	 **/
-	p._updateText = function() {
+ createjs.BitmapText.prototype._updateText = function() {
 		var x=0, y=0, o=this._oldProps, change=false, spaceW=this.spaceWidth, lineH=this.lineHeight, ss=this.spriteSheet;
-		var pool=BitmapText._spritePool, kids=this.children, childIndex=0, numKids=kids.length, sprite;
+		var pool=createjs.BitmapText._spritePool, kids=this.children, childIndex=0, numKids=kids.length, sprite;
 		
 		for (var n in o) {
 			if (o[n] != this[n]) {
@@ -335,9 +330,8 @@
 			sprite.parent = null;
 			numKids--;
 		}
-		if (pool.length > BitmapText.maxPoolSize) { pool.length = BitmapText.maxPoolSize; }
+		if (pool.length > createjs.BitmapText.maxPoolSize) { pool.length = createjs.BitmapText.maxPoolSize; }
 	};
 
 
-	createjs.BitmapText = createjs.promote(BitmapText, "Container");
-}());
\ No newline at end of file
+	
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/display/Container.js EaselJS-0.8.0/src/easeljs/display/Container.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/display/Container.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/display/Container.js	2016-05-31 11:03:08.000000000 +0200
@@ -27,10 +27,6 @@
 */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 	
 
 // constructor:
@@ -39,7 +35,7 @@
  * group arm, leg, torso and head {{#crossLink "Bitmap"}}{{/crossLink}} instances together into a Person Container, and
  * transform them as a group, while still being able to move the individual parts relative to each other. Children of
  * containers have their <code>transform</code> and <code>alpha</code> properties concatenated with their parent
- * Container.
+ * createjs.Container.
  *
  * For example, a {{#crossLink "Shape"}}{{/crossLink}} with x=100 and alpha=0.5, placed in a Container with <code>x=50</code>
  * and <code>alpha=0.7</code> will be rendered to the canvas at <code>x=150</code> and <code>alpha=0.35</code>.
@@ -52,10 +48,10 @@
  *      container.x = 100;
  *
  * @class Container
- * @extends DisplayObject
+ * @extends createjs.DisplayObject
  * @constructor
  **/
-	function Container() {
+	createjs.Container = function() {
 		this.DisplayObject_constructor();
 		
 	// public properties:
@@ -81,7 +77,7 @@
 		this.mouseChildren = true;
 		
 		/**
-		 * If false, the tick will not be propagated to children of this Container. This can provide some performance benefits.
+		 * If false, the tick will not be propagated to children of this createjs.Container. This can provide some performance benefits.
 		 * In addition to preventing the "tick" event from being dispatched, it will also prevent tick related updates
 		 * on some display objects (ex. Sprite & MovieClip frame advancing, DOMElement visibility handling).
 		 * @property tickChildren
@@ -90,7 +86,7 @@
 		 **/
 		this.tickChildren = true;
 	}
-	var p = createjs.extend(Container, createjs.DisplayObject);
+	
 	
 	
 // getter / setters:
@@ -100,7 +96,7 @@
 	 * @return {Number}
 	 * @deprecated
 	 **/
-	p.getNumChildren = function() {
+ createjs.Container.prototype.getNumChildren = function() {
 		return this.children.length;
 	};
 
@@ -110,11 +106,7 @@
 	 * @type {Number}
 	 * @readonly
 	 **/
-	try {
-		Object.defineProperties(p, {
-			numChildren: { get: p.getNumChildren }
-		});
-	} catch (e) {}
+createjs.Container.prototype.numChildren;
 	
 
 // public methods:
@@ -124,7 +116,7 @@
 	 * @method initialize
 	 * @deprecated in favour of `createjs.promote()`
 	 **/
-	p.initialize = Container; // TODO: deprecated.
+ createjs.Container.prototype.initialize = Container; // TODO: deprecated.
 	
 	/**
 	 * Returns true or false indicating whether the display object would be visible if drawn to a canvas.
@@ -134,7 +126,7 @@
 	 * @method isVisible
 	 * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas
 	 **/
-	p.isVisible = function() {
+ createjs.Container.prototype.isVisible = function() {
 		var hasContent = this.cacheCanvas || this.children.length;
 		return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);
 	};
@@ -150,7 +142,7 @@
 	 * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back
 	 * into itself).
 	 **/
-	p.draw = function(ctx, ignoreCache) {
+ createjs.Container.prototype.draw = function(ctx, ignoreCache) {
 		if (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }
 		
 		// this ensures we don't have issues with display list changes that occur during a draw:
@@ -180,10 +172,10 @@
 	 * 		container.addChild(bitmapInstance, shapeInstance, textInstance);
 	 *
 	 * @method addChild
-	 * @param {DisplayObject} child The display object to add.
-	 * @return {DisplayObject} The child that was added, or the last child if multiple children were added.
+	 * @param {createjs.DisplayObject} child The display object to add.
+	 * @return {createjs.DisplayObject} The child that was added, or the last child if multiple children were added.
 	 **/
-	p.addChild = function(child) {
+ createjs.Container.prototype.addChild = function(child) {
 		if (child == null) { return child; }
 		var l = arguments.length;
 		if (l > 1) {
@@ -199,7 +191,7 @@
 
 	/**
 	 * Adds a child to the display list at the specified index, bumping children at equal or greater indexes up one, and
-	 * setting its parent to this Container.
+	 * setting its parent to this createjs.Container.
 	 *
 	 * <h4>Example</h4>
 	 *
@@ -217,11 +209,11 @@
 	 * This would also bump otherShape's index up by one. Fails silently if the index is out of range.
 	 *
 	 * @method addChildAt
-	 * @param {DisplayObject} child The display object to add.
+	 * @param {createjs.DisplayObject} child The display object to add.
 	 * @param {Number} index The index to add the child at.
-	 * @return {DisplayObject} Returns the last child that was added, or the last child if multiple children were added.
+	 * @return {createjs.DisplayObject} Returns the last child that was added, or the last child if multiple children were added.
 	 **/
-	p.addChildAt = function(child, index) {
+ createjs.Container.prototype.addChildAt = function(child, index) {
 		var l = arguments.length;
 		var indx = arguments[l-1]; // can't use the same name as the index param or it replaces arguments[1]
 		if (indx < 0 || indx > this.children.length) { return arguments[l-2]; }
@@ -250,10 +242,10 @@
 	 *
 	 * Returns true if the child (or children) was removed, or false if it was not in the display list.
 	 * @method removeChild
-	 * @param {DisplayObject} child The child to remove.
+	 * @param {createjs.DisplayObject} child The child to remove.
 	 * @return {Boolean} true if the child (or children) was removed, or false if it was not in the display list.
 	 **/
-	p.removeChild = function(child) {
+ createjs.Container.prototype.removeChild = function(child) {
 		var l = arguments.length;
 		if (l > 1) {
 			var good = true;
@@ -279,7 +271,7 @@
 	 * @param {Number} index The index of the child to remove.
 	 * @return {Boolean} true if the child (or children) was removed, or false if any index was out of range.
 	 **/
-	p.removeChildAt = function(index) {
+ createjs.Container.prototype.removeChildAt = function(index) {
 		var l = arguments.length;
 		if (l > 1) {
 			var a = [];
@@ -306,7 +298,7 @@
 	 *
 	 * @method removeAllChildren
 	 **/
-	p.removeAllChildren = function() {
+ createjs.Container.prototype.removeAllChildren = function() {
 		var kids = this.children;
 		while (kids.length) { this.removeChildAt(0); }
 	};
@@ -320,9 +312,9 @@
 	 *
 	 * @method getChildAt
 	 * @param {Number} index The index of the child to return.
-	 * @return {DisplayObject} The child at the specified index. Returns null if there is no child at the index.
+	 * @return {createjs.DisplayObject} The child at the specified index. Returns null if there is no child at the index.
 	 **/
-	p.getChildAt = function(index) {
+ createjs.Container.prototype.getChildAt = function(index) {
 		return this.children[index];
 	};
 	
@@ -330,9 +322,9 @@
 	 * Returns the child with the specified name.
 	 * @method getChildByName
 	 * @param {String} name The name of the child to return.
-	 * @return {DisplayObject} The child with the specified name.
+	 * @return {createjs.DisplayObject} The child with the specified name.
 	 **/
-	p.getChildByName = function(name) {
+ createjs.Container.prototype.getChildByName = function(name) {
 		var kids = this.children;
 		for (var i=0,l=kids.length;i<l;i++) {
 			if(kids[i].name == name) { return kids[i]; }
@@ -356,7 +348,7 @@
 	 * @param {Function} sortFunction the function to use to sort the child list. See JavaScript's <code>Array.sort</code>
 	 * documentation for details.
 	 **/
-	p.sortChildren = function(sortFunction) {
+ createjs.Container.prototype.sortChildren = function(sortFunction) {
 		this.children.sort(sortFunction);
 	};
 
@@ -368,10 +360,10 @@
 	 *      var index = container.getChildIndex(child);
 	 *
 	 * @method getChildIndex
-	 * @param {DisplayObject} child The child to return the index of.
+	 * @param {createjs.DisplayObject} child The child to return the index of.
 	 * @return {Number} The index of the specified child. -1 if the child is not found.
 	 **/
-	p.getChildIndex = function(child) {
+ createjs.Container.prototype.getChildIndex = function(child) {
 		return createjs.indexOf(this.children, child);
 	};
 	
@@ -381,7 +373,7 @@
 	 * @param {Number} index1
 	 * @param {Number} index2
 	 **/
-	p.swapChildrenAt = function(index1, index2) {
+ createjs.Container.prototype.swapChildrenAt = function(index1, index2) {
 		var kids = this.children;
 		var o1 = kids[index1];
 		var o2 = kids[index2];
@@ -392,12 +384,12 @@
 	
 	/**
 	 * Swaps the specified children's depth in the display list. Fails silently if either child is not a child of this
-	 * Container.
+	 * createjs.Container.
 	 * @method swapChildren
-	 * @param {DisplayObject} child1
-	 * @param {DisplayObject} child2
+	 * @param {createjs.DisplayObject} child1
+	 * @param {createjs.DisplayObject} child2
 	 **/
-	p.swapChildren = function(child1, child2) {
+ createjs.Container.prototype.swapChildren = function(child1, child2) {
 		var kids = this.children;
 		var index1,index2;
 		for (var i=0,l=kids.length;i<l;i++) {
@@ -412,11 +404,11 @@
 	
 	/**
 	 * Changes the depth of the specified child. Fails silently if the child is not a child of this container, or the index is out of range.
-	 * @param {DisplayObject} child
+	 * @param {createjs.DisplayObject} child
 	 * @param {Number} index  
 	 * @method setChildIndex
 	 **/
-	p.setChildIndex = function(child, index) {
+ createjs.Container.prototype.setChildIndex = function(child, index) {
 		var kids = this.children, l=kids.length;
 		if (child.parent != this || index < 0 || index >= l) { return; }
 		for (var i=0;i<l;i++) {
@@ -431,10 +423,10 @@
 	 * Returns true if the specified display object either is this container or is a descendent (child, grandchild, etc)
 	 * of this container.
 	 * @method contains
-	 * @param {DisplayObject} child The DisplayObject to be checked.
+	 * @param {createjs.DisplayObject} child The DisplayObject to be checked.
 	 * @return {Boolean} true if the specified display object either is this container or is a descendent.
 	 **/
-	p.contains = function(child) {
+ createjs.Container.prototype.contains = function(child) {
 		while (child) {
 			if (child == this) { return true; }
 			child = child.parent;
@@ -452,7 +444,7 @@
 	 * @return {Boolean} A Boolean indicating whether there is a visible section of a DisplayObject that overlaps the specified
 	 * coordinates.
 	 **/
-	p.hitTest = function(x, y) {
+ createjs.Container.prototype.hitTest = function(x, y) {
 		// TODO: optimize to use the fast cache check where possible.
 		return (this.getObjectUnderPoint(x, y) != null);
 	};
@@ -482,7 +474,7 @@
 	 * @param {Number} [mode=0] The mode to use to determine which display objects to include. 0-all, 1-respect mouseEnabled/mouseChildren, 2-only mouse opaque objects.
 	 * @return {Array} An Array of DisplayObjects under the specified coordinates.
 	 **/
-	p.getObjectsUnderPoint = function(x, y, mode) {
+ createjs.Container.prototype.getObjectsUnderPoint = function(x, y, mode) {
 		var arr = [];
 		var pt = this.localToGlobal(x, y);
 		this._getObjectsUnderPoint(pt.x, pt.y, arr, mode>0, mode==1);
@@ -497,9 +489,9 @@
 	 * @param {Number} x The x position in the container to test.
 	 * @param {Number} y The y position in the container to test.
 	 * @param {Number} mode The mode to use to determine which display objects to include.  0-all, 1-respect mouseEnabled/mouseChildren, 2-only mouse opaque objects.
-	 * @return {DisplayObject} The top-most display object under the specified coordinates.
+	 * @return {createjs.DisplayObject} The top-most display object under the specified coordinates.
 	 **/
-	p.getObjectUnderPoint = function(x, y, mode) {
+ createjs.Container.prototype.getObjectUnderPoint = function(x, y, mode) {
 		var pt = this.localToGlobal(x, y);
 		return this._getObjectsUnderPoint(pt.x, pt.y, null, mode>0, mode==1);
 	};
@@ -507,7 +499,7 @@
 	/**
 	 * Docced in superclass.
 	 */
-	p.getBounds = function() {
+ createjs.Container.prototype.getBounds = function() {
 		return this._getBounds(null, true);
 	};
 	
@@ -515,19 +507,19 @@
 	/**
 	 * Docced in superclass.
 	 */
-	p.getTransformedBounds = function() {
+ createjs.Container.prototype.getTransformedBounds = function() {
 		return this._getBounds();
 	};
 
 	/**
-	 * Returns a clone of this Container. Some properties that are specific to this instance's current context are
+	 * Returns a clone of this createjs.Container. Some properties that are specific to this instance's current context are
 	 * reverted to their defaults (for example .parent).
 	 * @method clone
 	 * @param {Boolean} recursive If true, all of the descendants of this container will be cloned recursively. If false, the
 	 * properties of the container will be cloned, but the new instance will not have any children.
-	 * @return {Container} A clone of the current Container instance.
+	 * @return {createjs.Container} A clone of the current Container instance.
 	 **/
-	p.clone = function(recursive) {
+ createjs.Container.prototype.clone = function(recursive) {
 		var o = this._cloneProps(new Container());
 		if (recursive) { this._cloneChildren(o); }
 		return o;
@@ -538,7 +530,7 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.Container.prototype.toString = function() {
 		return "[Container (name="+  this.name +")]";
 	};
 
@@ -549,7 +541,7 @@
 	 * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.
 	 * @protected
 	 **/
-	p._tick = function(evtObj) {
+ createjs.Container.prototype._tick = function(evtObj) {
 		if (this.tickChildren) {
 			for (var i=this.children.length-1; i>=0; i--) {
 				var child = this.children[i];
@@ -563,9 +555,9 @@
 	 * Recursively clones all children of this container, and adds them to the target container.
 	 * @method cloneChildren
 	 * @protected
-	 * @param {Container} o The target container.
+	 * @param {createjs.Container} o The target container.
 	 **/
-	p._cloneChildren = function(o) {
+ createjs.Container.prototype._cloneChildren = function(o) {
 		if (o.children.length) { o.removeAllChildren(); }
 		var arr = o.children;
 		for (var i=0, l=this.children.length; i<l; i++) {
@@ -583,10 +575,10 @@
 	 * @param {Boolean} mouse If true, it will respect mouse interaction properties like mouseEnabled, mouseChildren, and active listeners.
 	 * @param {Boolean} activeListener If true, there is an active mouse event listener on a parent object.
 	 * @param {Number} currentDepth Indicates the current depth of the search.
-	 * @return {DisplayObject}
+	 * @return {createjs.DisplayObject}
 	 * @protected
 	 **/
-	p._getObjectsUnderPoint = function(x, y, arr, mouse, activeListener, currentDepth) {
+ createjs.Container.prototype._getObjectsUnderPoint = function(x, y, arr, mouse, activeListener, currentDepth) {
 		currentDepth = currentDepth || 0;
 		if (!currentDepth && !this._testMask(this, x, y)) { return null; }
 		var mtx, ctx = createjs.DisplayObject._hitTestContext;
@@ -631,13 +623,13 @@
 	
 	/**
 	 * @method _testMask
-	 * @param {DisplayObject} target
+	 * @param {createjs.DisplayObject} target
 	 * @param {Number} x
 	 * @param {Number} y
 	 * @return {Boolean} Indicates whether the x/y is within the masked region.
 	 * @protected
 	 **/
-	p._testMask = function(target, x, y) {
+ createjs.Container.prototype._testMask = function(target, x, y) {
 		var mask = target.mask;
 		if (!mask || !mask.graphics || mask.graphics.isEmpty()) { return true; }
 		
@@ -662,12 +654,12 @@
 	
 	/**
 	 * @method _getBounds
-	 * @param {Matrix2D} matrix
+	 * @param {createjs.Matrix2D} matrix
 	 * @param {Boolean} ignoreTransform If true, does not apply this object's transform.
-	 * @return {Rectangle}
+	 * @return {createjs.Rectangle}
 	 * @protected
 	 **/
-	p._getBounds = function(matrix, ignoreTransform) {
+ createjs.Container.prototype._getBounds = function(matrix, ignoreTransform) {
 		var bounds = this.DisplayObject_getBounds();
 		if (bounds) { return this._transformBounds(bounds, matrix, ignoreTransform); }
 		
@@ -686,5 +678,4 @@
 	};
 
 
-	createjs.Container = createjs.promote(Container, "DisplayObject");
-}());
\ No newline at end of file
+	
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/display/DOMElement.js EaselJS-0.8.0/src/easeljs/display/DOMElement.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/display/DOMElement.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/display/DOMElement.js	2016-05-31 11:03:08.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -66,11 +62,11 @@
 	 *      }
 	 *
 	 * @class DOMElement
-	 * @extends DisplayObject
+	 * @extends createjs.DisplayObject
 	 * @constructor
 	 * @param {HTMLElement} htmlElement A reference or id for the DOM element to manage.
 	 */
-	function DOMElement(htmlElement) {
+	createjs.DOMElement = function(htmlElement) {
 		this.DisplayObject_constructor();
 		
 		if (typeof(htmlElement)=="string") { htmlElement = document.getElementById(htmlElement); }
@@ -98,10 +94,10 @@
 		 */
 		this._oldProps = null;
 	}
-	var p = createjs.extend(DOMElement, createjs.DisplayObject);
+	
 
 	// TODO: deprecated
-	// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
+	// createjs.DOMElement.prototype.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
 
 
 // public methods:
@@ -112,7 +108,7 @@
 	 * @method isVisible
 	 * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas
 	 */
-	p.isVisible = function() {
+ createjs.DOMElement.prototype.isVisible = function() {
 		return this.htmlElement != null;
 	};
 
@@ -127,59 +123,59 @@
 	 * into itself).
 	 * @return {Boolean}
 	 */
-	p.draw = function(ctx, ignoreCache) {
+ createjs.DOMElement.prototype.draw = function(ctx, ignoreCache) {
 		// this relies on the _tick method because draw isn't called if the parent is not visible.
 		// the actual update happens in _handleDrawEnd
 		return true;
 	};
 
 	/**
-	 * Not applicable to DOMElement.
+	 * Not applicable to createjs.DOMElement.
 	 * @method cache
 	 */
-	p.cache = function() {};
+ createjs.DOMElement.prototype.cache = function() {};
 
 	/**
-	 * Not applicable to DOMElement.
+	 * Not applicable to createjs.DOMElement.
 	 * @method uncache
 	 */
-	p.uncache = function() {};
+ createjs.DOMElement.prototype.uncache = function() {};
 
 	/**
-	 * Not applicable to DOMElement.
+	 * Not applicable to createjs.DOMElement.
 	 * @method updateCache
 	 */
-	p.updateCache = function() {};
+ createjs.DOMElement.prototype.updateCache = function() {};
 
 	/**
-	 * Not applicable to DOMElement.
+	 * Not applicable to createjs.DOMElement.
 	 * @method hitTest
 	 */
-	p.hitTest = function() {};
+ createjs.DOMElement.prototype.hitTest = function() {};
 
 	/**
-	 * Not applicable to DOMElement.
+	 * Not applicable to createjs.DOMElement.
 	 * @method localToGlobal
 	 */
-	p.localToGlobal = function() {};
+ createjs.DOMElement.prototype.localToGlobal = function() {};
 
 	/**
-	 * Not applicable to DOMElement.
+	 * Not applicable to createjs.DOMElement.
 	 * @method globalToLocal
 	 */
-	p.globalToLocal = function() {};
+ createjs.DOMElement.prototype.globalToLocal = function() {};
 
 	/**
-	 * Not applicable to DOMElement.
+	 * Not applicable to createjs.DOMElement.
 	 * @method localToLocal
 	 */
-	p.localToLocal = function() {};
+ createjs.DOMElement.prototype.localToLocal = function() {};
 
 	/**
 	 * DOMElement cannot be cloned. Throws an error.
 	 * @method clone
 	 */
-	p.clone = function() {
+ createjs.DOMElement.prototype.clone = function() {
 		throw("DOMElement cannot be cloned.")
 	};
 
@@ -188,7 +184,7 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 */
-	p.toString = function() {
+ createjs.DOMElement.prototype.toString = function() {
 		return "[DOMElement (name="+  this.name +")]";
 	};
 
@@ -217,7 +213,7 @@
 	  */
 
      /**
-      * Not applicable to DOMElement.
+      * Not applicable to createjs.DOMElement.
 	  * @event tick
 	  */
 
@@ -229,7 +225,7 @@
 	 * function.
 	 * @protected
 	 */
-	p._tick = function(evtObj) {
+ createjs.DOMElement.prototype._tick = function(evtObj) {
 		var stage = this.getStage();
 		stage&&stage.on("drawend", this._handleDrawEnd, this, true);
 		this.DisplayObject__tick(evtObj);
@@ -240,7 +236,7 @@
 	 * @param {Event} evt
 	 * @protected
 	 */
-	p._handleDrawEnd = function(evt) {
+ createjs.DOMElement.prototype._handleDrawEnd = function(evt) {
 		var o = this.htmlElement;
 		if (!o) { return; }
 		var style = o.style;
@@ -269,5 +265,5 @@
 	};
 
 
-	createjs.DOMElement = createjs.promote(DOMElement, "DisplayObject");
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/display/DisplayObject.js EaselJS-0.8.0/src/easeljs/display/DisplayObject.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/display/DisplayObject.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/display/DisplayObject.js	2016-05-31 11:03:08.000000000 +0200
@@ -56,7 +56,7 @@
  *
  *	    //Create a stage by getting a reference to the canvas
  *	    stage = new createjs.Stage("demoCanvas");
- *	    //Create a Shape DisplayObject.
+ *	    //Create a Shape createjs.DisplayObject.
  *	    circle = new createjs.Shape();
  *	    circle.graphics.beginFill("red").drawCircle(0, 0, 40);
  *	    //Set position of Shape instance.
@@ -119,10 +119,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -133,10 +129,10 @@
 	 * methods that are shared between all display objects, such as transformation properties (x, y, scaleX, scaleY, etc),
 	 * caching, and mouse handlers.
 	 * @class DisplayObject
-	 * @extends EventDispatcher
+	 * @extends createjs.EventDispatcher
 	 * @constructor
 	 **/
-	function DisplayObject() {
+	createjs.DisplayObject = function() {
 		this.EventDispatcher_constructor();
 		
 		
@@ -216,7 +212,7 @@
 		 * to one.
 		 * @property parent
 		 * @final
-		 * @type {Container}
+		 * @type {createjs.Container}
 		 * @default null
 		 * @readonly
 		 **/
@@ -286,7 +282,7 @@
 		 * A shadow object that defines the shadow to render on this display object. Set to `null` to remove a shadow. If
 		 * null, this property is inherited from the parent container.
 		 * @property shadow
-		 * @type {Shadow}
+		 * @type {createjs.Shadow}
 		 * @default null
 		 **/
 		this.shadow = null;
@@ -319,7 +315,7 @@
 		 * If set, defines the transformation for this display object, overriding all other transformation properties
 		 * (x, y, rotation, scale, skew).
 		 * @property transformMatrix
-		 * @type {Matrix2D}
+		 * @type {createjs.Matrix2D}
 		 * @default null
 		 **/
 		this.transformMatrix = null;
@@ -376,7 +372,7 @@
 		 *
 		 * Note that hitArea is NOT currently used by the `hitTest()` method, nor is it supported for {{#crossLink "Stage"}}{{/crossLink}}.
 		 * @property hitArea
-		 * @type {DisplayObject}
+		 * @type {createjs.DisplayObject}
 		 * @default null
 		 */
 		this.hitArea = null;
@@ -452,7 +448,7 @@
 		/**
 		 * @property _props
 		 * @protected
-		 * @type {DisplayObject}
+		 * @type {createjs.DisplayObject}
 		 * @default null
 		 **/
 		this._props = new createjs.DisplayProps();
@@ -460,7 +456,7 @@
 		/**
 		 * @property _rectangle
 		 * @protected
-		 * @type {Rectangle}
+		 * @type {createjs.Rectangle}
 		 * @default null
 		 **/
 		this._rectangle = new createjs.Rectangle();
@@ -468,15 +464,15 @@
 		/**
 		 * @property _bounds
 		 * @protected
-		 * @type {Rectangle}
+		 * @type {createjs.Rectangle}
 		 * @default null
 		 **/
 		this._bounds = null;
 	}
-	var p = createjs.extend(DisplayObject, createjs.EventDispatcher);
+	
 
 	// TODO: deprecated
-	// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
+	// createjs.DisplayObject.prototype.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
 	
 // static properties:
 	/**
@@ -486,7 +482,7 @@
 	 * @static
 	 * @type {Array}
 	 **/
-	DisplayObject._MOUSE_EVENTS = ["click","dblclick","mousedown","mouseout","mouseover","pressmove","pressup","rollout","rollover"];
+	createjs.DisplayObject._MOUSE_EVENTS = ["click","dblclick","mousedown","mouseout","mouseover","pressmove","pressup","rollout","rollover"];
 
 	/**
 	 * Suppresses errors generated when using features like hitTest, mouse events, and {{#crossLink "getObjectsUnderPoint"}}{{/crossLink}}
@@ -496,7 +492,7 @@
 	 * @type {Boolean}
 	 * @default false
 	 **/
-	DisplayObject.suppressCrossDomainErrors = false;
+	createjs.DisplayObject.suppressCrossDomainErrors = false;
 	
 	/**
 	 * @property _snapToPixelEnabled
@@ -505,7 +501,7 @@
 	 * @type {Boolean}
 	 * @default false
 	 **/
-	DisplayObject._snapToPixelEnabled = false; // stage.snapToPixelEnabled is temporarily copied here during a draw to provide global access.
+	createjs.DisplayObject._snapToPixelEnabled = false; // stage.snapToPixelEnabled is temporarily copied here during a draw to provide global access.
 
 	/**
 	 * @property _hitTestCanvas
@@ -521,8 +517,8 @@
 	 **/
 	var canvas = createjs.createCanvas?createjs.createCanvas():document.createElement("canvas"); // prevent errors on load in browsers without canvas.
 	if (canvas.getContext) {
-		DisplayObject._hitTestCanvas = canvas;
-		DisplayObject._hitTestContext = canvas.getContext("2d");
+		createjs.DisplayObject._hitTestCanvas = canvas;
+		createjs.DisplayObject._hitTestContext = canvas.getContext("2d");
 		canvas.width = canvas.height = 1;
 	}
 
@@ -532,7 +528,7 @@
 	 * @static
 	 * @protected
 	 **/
-	DisplayObject._nextCacheID = 1;
+	createjs.DisplayObject._nextCacheID = 1;
 
 
 // events:
@@ -658,10 +654,10 @@
 	/**
 	 * Use the {{#crossLink "DisplayObject/stage:property"}}{{/crossLink}} property instead.
 	 * @method getStage
-	 * @return {Stage}
+	 * @return {createjs.Stage}
 	 * @deprecated
 	 **/
-	p.getStage = function() {
+ createjs.DisplayObject.prototype.getStage = function() {
 		// uses dynamic access to avoid circular dependencies;
 		var o = this, _Stage = createjs["Stage"];
 		while (o.parent) { o = o.parent; }
@@ -672,14 +668,10 @@
 	/**
 	 * Returns the Stage instance that this display object will be rendered on, or null if it has not been added to one.
 	 * @property stage
-	 * @type {Stage}
+	 * @type {createjs.Stage}
 	 * @readonly
 	 **/
-	try {
-		Object.defineProperties(p, {
-			stage: { get: p.getStage }
-		});
-	} catch (e) {}
+createjs.DisplayObject.prototype.stage;
 
 
 // public methods:
@@ -691,7 +683,7 @@
 	 * @method isVisible
 	 * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas
 	 **/
-	p.isVisible = function() {
+ createjs.DisplayObject.prototype.isVisible = function() {
 		return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0);
 	};
 
@@ -706,7 +698,7 @@
 	 * used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).
 	 * @return {Boolean}
 	 **/
-	p.draw = function(ctx, ignoreCache) {
+ createjs.DisplayObject.prototype.draw = function(ctx, ignoreCache) {
 		var cacheCanvas = this.cacheCanvas;
 		if (ignoreCache || !cacheCanvas) { return false; }
 		var scale = this._cacheScale;
@@ -720,7 +712,7 @@
 	 * @method updateContext
 	 * @param {CanvasRenderingContext2D} ctx The canvas 2D to update.
 	 **/
-	p.updateContext = function(ctx) {
+ createjs.DisplayObject.prototype.updateContext = function(ctx) {
 		var o=this, mask=o.mask, mtx= o._props.matrix;
 		
 		if (mask && mask.graphics && !mask.graphics.isEmpty()) {
@@ -736,7 +728,7 @@
 		
 		this.getMatrix(mtx);
 		var tx = mtx.tx, ty = mtx.ty;
-		if (DisplayObject._snapToPixelEnabled && o.snapToPixel) {
+		if (createjs.DisplayObject._snapToPixelEnabled && o.snapToPixel) {
 			tx = tx + (tx < 0 ? -0.5 : 0.5) | 0;
 			ty = ty + (ty < 0 ? -0.5 : 0.5) | 0;
 		}
@@ -777,7 +769,7 @@
 	 * 	myShape.cache(0,0,100,100,2) then the resulting cacheCanvas will be 200x200 px. This lets you scale and rotate
 	 * 	cached elements with greater fidelity. Default is 1.
 	 **/
-	p.cache = function(x, y, width, height, scale) {
+ createjs.DisplayObject.prototype.cache = function(x, y, width, height, scale) {
 		// draw to canvas.
 		scale = scale||1;
 		if (!this.cacheCanvas) { this.cacheCanvas = createjs.createCanvas?createjs.createCanvas():document.createElement("canvas"); }
@@ -808,7 +800,7 @@
 	 * <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing">
 	 * whatwg spec on compositing</a>.
 	 **/
-	p.updateCache = function(compositeOperation) {
+ createjs.DisplayObject.prototype.updateCache = function(compositeOperation) {
 		var cacheCanvas = this.cacheCanvas;
 		if (!cacheCanvas) { throw "cache() must be called before updateCache()"; }
 		var scale = this._cacheScale, offX = this._cacheOffsetX*scale, offY = this._cacheOffsetY*scale;
@@ -835,14 +827,14 @@
 		// TODO: filters and cache scale don't play well together at present.
 		this._applyFilters();
 		ctx.restore();
-		this.cacheID = DisplayObject._nextCacheID++;
+		this.cacheID = createjs.DisplayObject._nextCacheID++;
 	};
 
 	/**
 	 * Clears the current cache. See {{#crossLink "DisplayObject/cache"}}{{/crossLink}} for more information.
 	 * @method uncache
 	 **/
-	p.uncache = function() {
+ createjs.DisplayObject.prototype.uncache = function() {
 		this._cacheDataURL = this.cacheCanvas = null;
 		this.cacheID = this._cacheOffsetX = this._cacheOffsetY = this._filterOffsetX = this._filterOffsetY = 0;
 		this._cacheScale = 1;
@@ -854,7 +846,7 @@
 	 * @method getCacheDataURL
 	 * @return {String} The image data url for the cache.
 	 **/
-	p.getCacheDataURL = function() {
+ createjs.DisplayObject.prototype.getCacheDataURL = function() {
 		if (!this.cacheCanvas) { return null; }
 		if (this.cacheID != this._cacheDataURLID) { this._cacheDataURL = this.cacheCanvas.toDataURL(); }
 		return this._cacheDataURL;
@@ -871,17 +863,17 @@
 	 *      displayObject.x = 300;
 	 *      displayObject.y = 200;
 	 *      stage.addChild(displayObject);
-	 *      var point = myDisplayObject.localToGlobal(100, 100);
+	 *      var point = mycreatejs.DisplayObject.localToGlobal(100, 100);
 	 *      // Results in x=400, y=300
 	 *
 	 * @method localToGlobal
 	 * @param {Number} x The x position in the source display object to transform.
 	 * @param {Number} y The y position in the source display object to transform.
-	 * @param {Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned. 
-	 * @return {Point} A Point instance with x and y properties correlating to the transformed coordinates
+	 * @param {createjs.Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned. 
+	 * @return {createjs.Point} A Point instance with x and y properties correlating to the transformed coordinates
 	 * on the stage.
 	 **/
-	p.localToGlobal = function(x, y, pt) {
+ createjs.DisplayObject.prototype.localToGlobal = function(x, y, pt) {
 		return this.getConcatenatedMatrix(this._props.matrix).transformPoint(x,y, pt||new createjs.Point());
 	};
 
@@ -896,17 +888,17 @@
 	 *      displayObject.x = 300;
 	 *      displayObject.y = 200;
 	 *      stage.addChild(displayObject);
-	 *      var point = myDisplayObject.globalToLocal(100, 100);
+	 *      var point = mycreatejs.DisplayObject.globalToLocal(100, 100);
 	 *      // Results in x=-200, y=-100
 	 *
 	 * @method globalToLocal
 	 * @param {Number} x The x position on the stage to transform.
 	 * @param {Number} y The y position on the stage to transform.
-	 * @param {Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned. 
-	 * @return {Point} A Point instance with x and y properties correlating to the transformed position in the
+	 * @param {createjs.Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned. 
+	 * @return {createjs.Point} A Point instance with x and y properties correlating to the transformed position in the
 	 * display object's coordinate space.
 	 **/
-	p.globalToLocal = function(x, y, pt) {
+ createjs.DisplayObject.prototype.globalToLocal = function(x, y, pt) {
 		return this.getConcatenatedMatrix(this._props.matrix).invert().transformPoint(x,y, pt||new createjs.Point());
 	};
 
@@ -922,12 +914,12 @@
 	 * @method localToLocal
 	 * @param {Number} x The x position in the source display object to transform.
 	 * @param {Number} y The y position on the source display object to transform.
-	 * @param {DisplayObject} target The target display object to which the coordinates will be transformed.
-	 * @param {Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned. 
-	 * @return {Point} Returns a Point instance with x and y properties correlating to the transformed position
+	 * @param {createjs.DisplayObject} target The target display object to which the coordinates will be transformed.
+	 * @param {createjs.Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned. 
+	 * @return {createjs.Point} Returns a Point instance with x and y properties correlating to the transformed position
 	 * in the target's coordinate space.
 	 **/
-	p.localToLocal = function(x, y, target, pt) {
+ createjs.DisplayObject.prototype.localToLocal = function(x, y, target, pt) {
 		pt = this.localToGlobal(x, y, pt);
 		return target.globalToLocal(pt.x, pt.y, pt);
 	};
@@ -950,10 +942,10 @@
 	 * @param {Number} [skewY=0] The vertical skew factor
 	 * @param {Number} [regX=0] The horizontal registration point in pixels
 	 * @param {Number} [regY=0] The vertical registration point in pixels
-	 * @return {DisplayObject} Returns this instance. Useful for chaining commands.
+	 * @return {createjs.DisplayObject} Returns this instance. Useful for chaining commands.
 	 * @chainable
 	*/
-	p.setTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {
+ createjs.DisplayObject.prototype.setTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {
 		this.x = x || 0;
 		this.y = y || 0;
 		this.scaleX = scaleX == null ? 1 : scaleX;
@@ -969,11 +961,11 @@
 	/**
 	 * Returns a matrix based on this object's current transform.
 	 * @method getMatrix
-	 * @param {Matrix2D} matrix Optional. A Matrix2D object to populate with the calculated values. If null, a new
+	 * @param {createjs.Matrix2D} matrix Optional. A Matrix2D object to populate with the calculated values. If null, a new
 	 * Matrix object is returned.
-	 * @return {Matrix2D} A matrix representing this display object's transform.
+	 * @return {createjs.Matrix2D} A matrix representing this display object's transform.
 	 **/
-	p.getMatrix = function(matrix) {
+ createjs.DisplayObject.prototype.getMatrix = function(matrix) {
 		var o = this, mtx = matrix&&matrix.identity() || new createjs.Matrix2D();
 		return o.transformMatrix ?  mtx.copy(o.transformMatrix) : mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);
 	};
@@ -984,11 +976,11 @@
 	 * be used to transform positions between coordinate spaces, such as with {{#crossLink "DisplayObject/localToGlobal"}}{{/crossLink}}
 	 * and {{#crossLink "DisplayObject/globalToLocal"}}{{/crossLink}}.
 	 * @method getConcatenatedMatrix
-	 * @param {Matrix2D} [matrix] A {{#crossLink "Matrix2D"}}{{/crossLink}} object to populate with the calculated values.
+	 * @param {createjs.Matrix2D} [matrix] A {{#crossLink "Matrix2D"}}{{/crossLink}} object to populate with the calculated values.
 	 * If null, a new Matrix2D object is returned.
-	 * @return {Matrix2D} The combined matrix.
+	 * @return {createjs.Matrix2D} The combined matrix.
 	 **/
-	p.getConcatenatedMatrix = function(matrix) {
+ createjs.DisplayObject.prototype.getConcatenatedMatrix = function(matrix) {
 		var o = this, mtx = this.getMatrix(matrix);
 		while (o = o.parent) {
 			mtx.prependMatrix(o.getMatrix(o._props.matrix));
@@ -1000,11 +992,11 @@
 	 * Generates a DisplayProps object representing the combined display properties of the  object and all of its
 	 * parent Containers up to the highest level ancestor (usually the {{#crossLink "Stage"}}{{/crossLink}}).
 	 * @method getConcatenatedDisplayProps
-	 * @param {DisplayProps} [props] A {{#crossLink "DisplayProps"}}{{/crossLink}} object to populate with the calculated values.
+	 * @param {createjs.DisplayProps} [props] A {{#crossLink "DisplayProps"}}{{/crossLink}} object to populate with the calculated values.
 	 * If null, a new DisplayProps object is returned.
-	 * @return {DisplayProps} The combined display properties.
+	 * @return {createjs.DisplayProps} The combined display properties.
 	 **/
-	p.getConcatenatedDisplayProps = function(props) {
+ createjs.DisplayObject.prototype.getConcatenatedDisplayProps = function(props) {
 		props = props ? props.identity() : new createjs.DisplayProps();
 		var o = this, mtx = o.getMatrix(props.matrix); 
 		do {
@@ -1035,8 +1027,8 @@
 	 * @return {Boolean} A Boolean indicating whether a visible portion of the DisplayObject intersect the specified
 	 * local Point.
 	*/
-	p.hitTest = function(x, y) {
-		var ctx = DisplayObject._hitTestContext;
+ createjs.DisplayObject.prototype.hitTest = function(x, y) {
+		var ctx = createjs.DisplayObject._hitTestContext;
 		ctx.setTransform(1, 0, 0, 1, -x, -y);
 		this.draw(ctx);
 
@@ -1056,10 +1048,10 @@
 	 *
 	 * @method set
 	 * @param {Object} props A generic object containing properties to copy to the DisplayObject instance.
-	 * @return {DisplayObject} Returns the instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.DisplayObject} Returns the instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	*/
-	p.set = function(props) {
+ createjs.DisplayObject.prototype.set = function(props) {
 		for (var n in props) { this[n] = props[n]; }
 		return this;
 	};
@@ -1117,10 +1109,10 @@
 	 * 	myRect.copy(obj.getBounds());
 	 * 
 	 * @method getBounds
-	 * @return {Rectangle} A Rectangle instance representing the bounds, or null if bounds are not available for this
+	 * @return {createjs.Rectangle} A Rectangle instance representing the bounds, or null if bounds are not available for this
 	 * object.
 	 **/
-	p.getBounds = function() {
+ createjs.DisplayObject.prototype.getBounds = function() {
 		if (this._bounds) { return this._rectangle.copy(this._bounds); }
 		var cacheCanvas = this.cacheCanvas;
 		if (cacheCanvas) {
@@ -1143,9 +1135,9 @@
 	 * 
 	 * Container instances calculate aggregate bounds for all children that return bounds via getBounds.
 	 * @method getTransformedBounds
-	 * @return {Rectangle} A Rectangle instance representing the bounds, or null if bounds are not available for this object.
+	 * @return {createjs.Rectangle} A Rectangle instance representing the bounds, or null if bounds are not available for this object.
 	 **/
-	p.getTransformedBounds = function() {
+ createjs.DisplayObject.prototype.getTransformedBounds = function() {
 		return this._getBounds();
 	};
 	
@@ -1162,19 +1154,19 @@
 	 * @param {Number} width The width of the bounds.
 	 * @param {Number} height The height of the bounds.
 	 **/
-	p.setBounds = function(x, y, width, height) {
+ createjs.DisplayObject.prototype.setBounds = function(x, y, width, height) {
 		if (x == null) { this._bounds = x; }
 		this._bounds = (this._bounds || new createjs.Rectangle()).setValues(x, y, width, height);
 	};
 
 	/**
-	 * Returns a clone of this DisplayObject. Some properties that are specific to this instance's current context are
+	 * Returns a clone of this createjs.DisplayObject. Some properties that are specific to this instance's current context are
 	 * reverted to their defaults (for example .parent). Caches are not maintained across clones, and some elements
 	 * are copied by reference (masks, individual filter instances, hit area)
 	 * @method clone
-	 * @return {DisplayObject} A clone of the current DisplayObject instance.
+	 * @return {createjs.DisplayObject} A clone of the current DisplayObject instance.
 	 **/
-	p.clone = function() {
+ createjs.DisplayObject.prototype.clone = function() {
 		return this._cloneProps(new DisplayObject());
 	};
 
@@ -1183,7 +1175,7 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.DisplayObject.prototype.toString = function() {
 		return "[DisplayObject (name="+  this.name +")]";
 	};
 
@@ -1192,12 +1184,12 @@
 	// separated so it can be used more easily in subclasses:
 	/**
 	 * @method _cloneProps
-	 * @param {DisplayObject} o The DisplayObject instance which will have properties from the current DisplayObject
+	 * @param {createjs.DisplayObject} o The DisplayObject instance which will have properties from the current DisplayObject
 	 * instance copied into.
-	 * @return {DisplayObject} o
+	 * @return {createjs.DisplayObject} o
 	 * @protected
 	 **/
-	p._cloneProps = function(o) {
+ createjs.DisplayObject.prototype._cloneProps = function(o) {
 		o.alpha = this.alpha;
 		o.mouseEnabled = this.mouseEnabled;
 		o.tickEnabled = this.tickEnabled;
@@ -1227,9 +1219,9 @@
 	 * @method _applyShadow
 	 * @protected
 	 * @param {CanvasRenderingContext2D} ctx
-	 * @param {Shadow} shadow
+	 * @param {createjs.Shadow} shadow
 	 **/
-	p._applyShadow = function(ctx, shadow) {
+ createjs.DisplayObject.prototype._applyShadow = function(ctx, shadow) {
 		shadow = shadow || Shadow.identity;
 		ctx.shadowColor = shadow.color;
 		ctx.shadowOffsetX = shadow.offsetX;
@@ -1243,7 +1235,7 @@
 	 * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.
 	 * @protected
 	 **/
-	p._tick = function(evtObj) {
+ createjs.DisplayObject.prototype._tick = function(evtObj) {
 		// because tick can be really performance sensitive, check for listeners before calling dispatchEvent.
 		var ls = this._listeners;
 		if (ls && ls["tick"]) {
@@ -1260,11 +1252,11 @@
 	 * @param {CanvasRenderingContext2D} ctx
 	 * @return {Boolean}
 	 **/
-	p._testHit = function(ctx) {
+ createjs.DisplayObject.prototype._testHit = function(ctx) {
 		try {
 			var hit = ctx.getImageData(0, 0, 1, 1).data[3] > 1;
 		} catch (e) {
-			if (!DisplayObject.suppressCrossDomainErrors) {
+			if (!createjs.DisplayObject.suppressCrossDomainErrors) {
 				throw "An error has occurred. This is most likely due to security restrictions on reading canvas pixel data with local or cross-domain images.";
 			}
 		}
@@ -1275,7 +1267,7 @@
 	 * @method _applyFilters
 	 * @protected
 	 **/
-	p._applyFilters = function() {
+ createjs.DisplayObject.prototype._applyFilters = function() {
 		if (!this.filters || this.filters.length == 0 || !this.cacheCanvas) { return; }
 		var l = this.filters.length;
 		var ctx = this.cacheCanvas.getContext("2d");
@@ -1288,10 +1280,10 @@
 	
 	/**
 	 * @method _getFilterBounds
-	 * @return {Rectangle}
+	 * @return {createjs.Rectangle}
 	 * @protected
 	 **/
-	p._getFilterBounds = function(rect) {
+ createjs.DisplayObject.prototype._getFilterBounds = function(rect) {
 		var l, filters = this.filters, bounds = this._rectangle.setValues(0,0,0,0);
 		if (!filters || !(l=filters.length)) { return bounds; }
 		
@@ -1304,24 +1296,24 @@
 	
 	/**
 	 * @method _getBounds
-	 * @param {Matrix2D} matrix
+	 * @param {createjs.Matrix2D} matrix
 	 * @param {Boolean} ignoreTransform If true, does not apply this object's transform.
-	 * @return {Rectangle}
+	 * @return {createjs.Rectangle}
 	 * @protected
 	 **/
-	p._getBounds = function(matrix, ignoreTransform){
+ createjs.DisplayObject.prototype._getBounds = function(matrix, ignoreTransform){
 		return this._transformBounds(this.getBounds(), matrix, ignoreTransform);
 	};
 	
 	/**
 	 * @method _transformBounds
-	 * @param {Rectangle} bounds
-	 * @param {Matrix2D} matrix
+	 * @param {createjs.Rectangle} bounds
+	 * @param {createjs.Matrix2D} matrix
 	 * @param {Boolean} ignoreTransform
-	 * @return {Rectangle}
+	 * @return {createjs.Rectangle}
 	 * @protected
 	 **/
-	p._transformBounds = function(bounds, matrix, ignoreTransform) {
+ createjs.DisplayObject.prototype._transformBounds = function(bounds, matrix, ignoreTransform) {
 		if (!bounds) { return bounds; }
 		var x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height, mtx = this._props.matrix;
 		mtx = ignoreTransform ? mtx.identity() : this.getMatrix(mtx);
@@ -1352,13 +1344,13 @@
 	 * @return {Boolean}
 	 * @protected
 	 **/
-	p._hasMouseEventListener = function() {
-		var evts = DisplayObject._MOUSE_EVENTS;
+ createjs.DisplayObject.prototype._hasMouseEventListener = function() {
+		var evts = createjs.DisplayObject._MOUSE_EVENTS;
 		for (var i= 0, l=evts.length; i<l; i++) {
 			if (this.hasEventListener(evts[i])) { return true; }
 		}
 		return !!this.cursor;
 	};
 
-	createjs.DisplayObject = createjs.promote(DisplayObject, "EventDispatcher");
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/display/Graphics.js EaselJS-0.8.0/src/easeljs/display/Graphics.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/display/Graphics.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/display/Graphics.js	2016-05-31 11:03:08.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -57,12 +53,12 @@
 	 * All drawing methods in Graphics return the Graphics instance, so they can be chained together. For example,
 	 * the following line of code would generate the instructions to draw a rectangle with a red stroke and blue fill:
 	 *
-	 *      myGraphics.beginStroke("red").beginFill("blue").drawRect(20, 20, 100, 50);
+	 *      mycreatejs.Graphics.beginStroke("red").beginFill("blue").drawRect(20, 20, 100, 50);
 	 *
 	 * Each graphics API call generates a command object (see below). The last command to be created can be accessed via
 	 * {{#crossLink "Graphics/command:property"}}{{/crossLink}}:
 	 *
-	 *      var fillCommand = myGraphics.beginFill("red").command;
+	 *      var fillCommand = mycreatejs.Graphics.beginFill("red").command;
 	 *      // ... later, update the fill style/color:
 	 *      fillCommand.style = "blue";
 	 *      // or change it to a bitmap fill:
@@ -71,22 +67,22 @@
 	 * For more direct control of rendering, you can instantiate and append command objects to the graphics queue directly. In this case, you
 	 * need to manage path creation manually, and ensure that fill/stroke is applied to a defined path:
 	 *
-	 *      // start a new path. Graphics.beginCmd is a reusable BeginPath instance:
-	 *      myGraphics.append(createjs.Graphics.beginCmd);
+	 *      // start a new path. createjs.Graphics.beginCmd is a reusable BeginPath instance:
+	 *      mycreatejs.Graphics.append(createjs.Graphics.beginCmd);
 	 *      // we need to define the path before applying the fill:
 	 *      var circle = new createjs.Graphics.Circle(0,0,30);
-	 *      myGraphics.append(circle);
+	 *      mycreatejs.Graphics.append(circle);
 	 *      // fill the path we just defined:
 	 *      var fill = new createjs.Graphics.Fill("red");
-	 *      myGraphics.append(fill);
+	 *      mycreatejs.Graphics.append(fill);
 	 *
 	 * These approaches can be used together, for example to insert a custom command:
 	 *
-	 *      myGraphics.beginFill("red");
+	 *      mycreatejs.Graphics.beginFill("red");
 	 *      var customCommand = new CustomSpiralCommand(etc);
-	 *      myGraphics.append(customCommand);
-	 *      myGraphics.beginFill("blue");
-	 *      myGraphics.drawCircle(0, 0, 30);
+	 *      mycreatejs.Graphics.append(customCommand);
+	 *      mycreatejs.Graphics.beginFill("blue");
+	 *      mycreatejs.Graphics.drawCircle(0, 0, 30);
 	 *
 	 * See {{#crossLink "Graphics/append"}}{{/crossLink}} for more info on creating custom commands.
 	 *
@@ -128,19 +124,19 @@
 	 *
 	 * Here is the above example, using the tiny API instead.
 	 *
-	 *      myGraphics.s("red").f("blue").r(20, 20, 100, 50);
+	 *      mycreatejs.Graphics.s("red").f("blue").r(20, 20, 100, 50);
 	 *
 	 * @class Graphics
 	 * @constructor
 	 **/
-	function Graphics() {
+	createjs.Graphics = function() {
 
 
 	// public properties
 		/**
 		 * Holds a reference to the last command that was created or appended. For example, you could retain a reference
 		 * to a Fill command in order to dynamically update the color later by using:
-		 * 		myFill = myGraphics.beginFill("red").command;
+		 * 		myFill = mycreatejs.Graphics.beginFill("red").command;
 		 * 		// update color later:
 		 * 		myFill.style = "yellow";
 		 * @property command
@@ -222,7 +218,7 @@
 	// setup:
 		this.clear();
 	}
-	var p = Graphics.prototype;
+	
 	var G = Graphics; // shortcut
 
 	/**
@@ -236,7 +232,7 @@
 	 * @protected
 	 * @deprecated
 	 */
-	// p.initialize = function() {}; // searchable for devs wondering where it is.
+	// createjs.Graphics.prototype.initialize = function() {}; // searchable for devs wondering where it is.
 
 
 // static public methods:
@@ -262,7 +258,7 @@
 	 * @return {String} A CSS compatible color string based on the specified RGB numeric color values in the format
 	 * "rgba(255,255,255,1.0)", or if alpha is null then in the format "rgb(255,255,255)".
 	 **/
-	Graphics.getRGB = function(r, g, b, alpha) {
+	createjs.Graphics.getRGB = function(r, g, b, alpha) {
 		if (r != null && b == null) {
 			alpha = g;
 			b = r&0xFF;
@@ -292,7 +288,7 @@
 	 * @return {String} A CSS compatible color string based on the specified HSL numeric color values in the format
 	 * "hsla(360,100,100,1.0)", or if alpha is null then in the format "hsl(360,100,100)".
 	 **/
-	Graphics.getHSL = function(hue, saturation, lightness, alpha) {
+	createjs.Graphics.getHSL = function(hue, saturation, lightness, alpha) {
 		if (alpha == null) {
 			return "hsl("+(hue%360)+","+saturation+"%,"+lightness+"%)";
 		} else {
@@ -306,7 +302,7 @@
 	 * A reusable instance of {{#crossLink "Graphics/BeginPath"}}{{/crossLink}} to avoid
 	 * unnecessary instantiation.
 	 * @property beginCmd
-	 * @type {Graphics.BeginPath}
+	 * @type {createjs.Graphics.BeginPath}
 	 * @static
 	 **/
 	 // defined at the bottom of this file.
@@ -319,7 +315,7 @@
 	 * @readonly
 	 * @type {Object}
 	 **/
-	Graphics.BASE_64 = {"A":0,"B":1,"C":2,"D":3,"E":4,"F":5,"G":6,"H":7,"I":8,"J":9,"K":10,"L":11,"M":12,"N":13,"O":14,"P":15,"Q":16,"R":17,"S":18,"T":19,"U":20,"V":21,"W":22,"X":23,"Y":24,"Z":25,"a":26,"b":27,"c":28,"d":29,"e":30,"f":31,"g":32,"h":33,"i":34,"j":35,"k":36,"l":37,"m":38,"n":39,"o":40,"p":41,"q":42,"r":43,"s":44,"t":45,"u":46,"v":47,"w":48,"x":49,"y":50,"z":51,"0":52,"1":53,"2":54,"3":55,"4":56,"5":57,"6":58,"7":59,"8":60,"9":61,"+":62,"/":63};
+	createjs.Graphics.BASE_64 = {"A":0,"B":1,"C":2,"D":3,"E":4,"F":5,"G":6,"H":7,"I":8,"J":9,"K":10,"L":11,"M":12,"N":13,"O":14,"P":15,"Q":16,"R":17,"S":18,"T":19,"U":20,"V":21,"W":22,"X":23,"Y":24,"Z":25,"a":26,"b":27,"c":28,"d":29,"e":30,"f":31,"g":32,"h":33,"i":34,"j":35,"k":36,"l":37,"m":38,"n":39,"o":40,"p":41,"q":42,"r":43,"s":44,"t":45,"u":46,"v":47,"w":48,"x":49,"y":50,"z":51,"0":52,"1":53,"2":54,"3":55,"4":56,"5":57,"6":58,"7":59,"8":60,"9":61,"+":62,"/":63};
 
 
 	/**
@@ -328,7 +324,7 @@
 	 * "butt", 1 to "round", and 2 to "square".
 	 * For example, to set the line caps to "square":
 	 *
-	 *      myGraphics.ss(16, 2);
+	 *      mycreatejs.Graphics.ss(16, 2);
 	 *
 	 * @property STROKE_CAPS_MAP
 	 * @static
@@ -336,7 +332,7 @@
 	 * @readonly
 	 * @type {Array}
 	 **/
-	Graphics.STROKE_CAPS_MAP = ["butt", "round", "square"];
+	createjs.Graphics.STROKE_CAPS_MAP = ["butt", "round", "square"];
 
 	/**
 	 * Maps numeric values for the joints parameter of {{#crossLink "Graphics/setStrokeStyle"}}{{/crossLink}} to
@@ -344,7 +340,7 @@
 	 * "miter", 1 to "round", and 2 to "bevel".
 	 * For example, to set the line joints to "bevel":
 	 *
-	 *      myGraphics.ss(16, 0, 2);
+	 *      mycreatejs.Graphics.ss(16, 0, 2);
 	 *
 	 * @property STROKE_JOINTS_MAP
 	 * @static
@@ -352,7 +348,7 @@
 	 * @readonly
 	 * @type {Array}
 	 **/
-	Graphics.STROKE_JOINTS_MAP = ["miter", "round", "bevel"];
+	createjs.Graphics.STROKE_JOINTS_MAP = ["miter", "round", "bevel"];
 
 	/**
 	 * @property _ctx
@@ -362,7 +358,7 @@
 	 **/
 	var canvas = (createjs.createCanvas?createjs.createCanvas():document.createElement("canvas"));
 	if (canvas.getContext) {
-		Graphics._ctx = canvas.getContext("2d");
+		createjs.Graphics._ctx = canvas.getContext("2d");
 		canvas.width = canvas.height = 1;
 	}
 
@@ -374,13 +370,13 @@
 	 * @return {Array}
 	 * @deprecated
 	 **/
-	p.getInstructions = function() {
+ createjs.Graphics.prototype.getInstructions = function() {
 		this._updateInstructions();
 		return this._instructions;
 	};
 
 	/**
-	 * Returns the graphics instructions array. Each entry is a graphics command object (ex. Graphics.Fill, Graphics.Rect)
+	 * Returns the graphics instructions array. Each entry is a graphics command object (ex. createjs.Graphics.Fill, createjs.Graphics.Rect)
 	 * Modifying the returned array directly is not recommended, and is likely to result in unexpected behaviour.
 	 *
 	 * This property is mainly intended for introspection of the instructions (ex. for graphics export).
@@ -388,11 +384,7 @@
 	 * @type {Array}
 	 * @readonly
 	 **/
-	try {
-		Object.defineProperties(p, {
-			instructions: { get: p.getInstructions }
-		});
-	} catch (e) {}
+createjs.Graphics.prototype.instructions;
 
 
 // public methods:
@@ -401,7 +393,7 @@
 	 * @method isEmpty
 	 * @return {Boolean} Returns true if this Graphics instance has no drawing commands.
 	 **/
-	p.isEmpty = function() {
+ createjs.Graphics.prototype.isEmpty = function() {
 		return !(this._instructions.length || this._activeInstructions.length);
 	};
 
@@ -414,7 +406,7 @@
 	 * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.
 	 * @param {Object} data Optional data that is passed to graphics command exec methods. When called from a Shape instance, the shape passes itself as the data parameter. This can be used by custom graphic commands to insert contextual data.
 	 **/
-	p.draw = function(ctx, data) {
+ createjs.Graphics.prototype.draw = function(ctx, data) {
 		this._updateInstructions();
 		var instr = this._instructions;
 		for (var i=this._storeIndex, l=instr.length; i<l; i++) {
@@ -430,7 +422,7 @@
 	 * @method drawAsPath
 	 * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.
 	 **/
-	p.drawAsPath = function(ctx) {
+ createjs.Graphics.prototype.drawAsPath = function(ctx) {
 		this._updateInstructions();
 		var instr, instrs = this._instructions;
 		for (var i=this._storeIndex, l=instrs.length; i<l; i++) {
@@ -446,10 +438,10 @@
 	 * @method moveTo
 	 * @param {Number} x The x coordinate the drawing point should move to.
 	 * @param {Number} y The y coordinate the drawing point should move to.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls).
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls).
 	 * @chainable
 	 **/
-	p.moveTo = function(x, y) {
+ createjs.Graphics.prototype.moveTo = function(x, y) {
 		return this.append(new G.MoveTo(x,y), true);
 	};
 
@@ -463,10 +455,10 @@
 	 * @method lineTo
 	 * @param {Number} x The x coordinate the drawing point should draw to.
 	 * @param {Number} y The y coordinate the drawing point should draw to.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.lineTo = function(x, y) {
+ createjs.Graphics.prototype.lineTo = function(x, y) {
 		return this.append(new G.LineTo(x,y));
 	};
 
@@ -480,10 +472,10 @@
 	 * @param {Number} x2
 	 * @param {Number} y2
 	 * @param {Number} radius
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.arcTo = function(x1, y1, x2, y2, radius) {
+ createjs.Graphics.prototype.arcTo = function(x1, y1, x2, y2, radius) {
 		return this.append(new G.ArcTo(x1, y1, x2, y2, radius));
 	};
 
@@ -503,10 +495,10 @@
 	 * @param {Number} startAngle Measured in radians.
 	 * @param {Number} endAngle Measured in radians.
 	 * @param {Boolean} anticlockwise
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.arc = function(x, y, radius, startAngle, endAngle, anticlockwise) {
+ createjs.Graphics.prototype.arc = function(x, y, radius, startAngle, endAngle, anticlockwise) {
 		return this.append(new G.Arc(x, y, radius, startAngle, endAngle, anticlockwise));
 	};
 
@@ -519,10 +511,10 @@
 	 * @param {Number} cpy
 	 * @param {Number} x
 	 * @param {Number} y
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.quadraticCurveTo = function(cpx, cpy, x, y) {
+ createjs.Graphics.prototype.quadraticCurveTo = function(cpx, cpy, x, y) {
 		return this.append(new G.QuadraticCurveTo(cpx, cpy, x, y));
 	};
 
@@ -538,10 +530,10 @@
 	 * @param {Number} cp2y
 	 * @param {Number} x
 	 * @param {Number} y
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.bezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {
+ createjs.Graphics.prototype.bezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {
 		return this.append(new G.BezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y));
 	};
 
@@ -555,10 +547,10 @@
 	 * @param {Number} y
 	 * @param {Number} w Width of the rectangle
 	 * @param {Number} h Height of the rectangle
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.rect = function(x, y, w, h) {
+ createjs.Graphics.prototype.rect = function(x, y, w, h) {
 		return this.append(new G.Rect(x, y, w, h));
 	};
 
@@ -566,10 +558,10 @@
 	 * Closes the current path, effectively drawing a line from the current drawing point to the first drawing point specified
 	 * since the fill or stroke was last set. A tiny API method "cp" also exists.
 	 * @method closePath
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.closePath = function() {
+ createjs.Graphics.prototype.closePath = function() {
 		return this._activeInstructions.length ? this.append(new G.ClosePath()) : this;
 	};
 
@@ -579,10 +571,10 @@
 	 * Clears all drawing instructions, effectively resetting this Graphics instance. Any line and fill styles will need
 	 * to be redefined to draw shapes following a clear call. A tiny API method "c" also exists.
 	 * @method clear
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.clear = function() {
+ createjs.Graphics.prototype.clear = function() {
 		this._instructions.length = this._activeInstructions.length = this._commitIndex = 0;
 		this._strokeStyle = this._stroke = this._fill = null;
 		this._dirty = this._strokeIgnoreScale = false;
@@ -594,10 +586,10 @@
 	 * @method beginFill
 	 * @param {String} color A CSS compatible color value (ex. "red", "#FF0000", or "rgba(255,0,0,0.5)"). Setting to
 	 * null will result in no fill.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.beginFill = function(color) {
+ createjs.Graphics.prototype.beginFill = function(color) {
 		return this._setFill(color ? new G.Fill(color) : null);
 	};
 
@@ -606,7 +598,7 @@
 	 * example, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a
 	 * square to display it:
 	 *
-	 *      myGraphics.beginLinearGradientFill(["#000","#FFF"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);
+	 *      mycreatejs.Graphics.beginLinearGradientFill(["#000","#FFF"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);
 	 *
 	 * A tiny API method "lf" also exists.
 	 * @method beginLinearGradientFill
@@ -618,10 +610,10 @@
 	 * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.
 	 * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.
 	 * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.beginLinearGradientFill = function(colors, ratios, x0, y0, x1, y1) {
+ createjs.Graphics.prototype.beginLinearGradientFill = function(colors, ratios, x0, y0, x1, y1) {
 		return this._setFill(new G.Fill().linearGradient(colors, ratios, x0, y0, x1, y1));
 	};
 
@@ -629,7 +621,7 @@
 	 * Begins a radial gradient fill. This ends the current sub-path. For example, the following code defines a red to
 	 * blue radial gradient centered at (100, 100), with a radius of 50, and draws a circle to display it:
 	 *
-	 *      myGraphics.beginRadialGradientFill(["#F00","#00F"], [0, 1], 100, 100, 0, 100, 100, 50).drawCircle(100, 100, 50);
+	 *      mycreatejs.Graphics.beginRadialGradientFill(["#F00","#00F"], [0, 1], 100, 100, 0, 100, 100, 50).drawCircle(100, 100, 50);
 	 *
 	 * A tiny API method "rf" also exists.
 	 * @method beginRadialGradientFill
@@ -643,10 +635,10 @@
 	 * @param {Number} x1 Center position of the outer circle that defines the gradient.
 	 * @param {Number} y1 Center position of the outer circle that defines the gradient.
 	 * @param {Number} r1 Radius of the outer circle that defines the gradient.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.beginRadialGradientFill = function(colors, ratios, x0, y0, r0, x1, y1, r1) {
+ createjs.Graphics.prototype.beginRadialGradientFill = function(colors, ratios, x0, y0, r0, x1, y1, r1) {
 		return this._setFill(new G.Fill().radialGradient(colors, ratios, x0, y0, r0, x1, y1, r1));
 	};
 
@@ -659,12 +651,12 @@
 	 * @param {String} repetition Optional. Indicates whether to repeat the image in the fill area. One of "repeat",
 	 * "repeat-x", "repeat-y", or "no-repeat". Defaults to "repeat". Note that Firefox does not support "repeat-x" or
 	 * "repeat-y" (latest tests were in FF 20.0), and will default to "repeat".
-	 * @param {Matrix2D} matrix Optional. Specifies a transformation matrix for the bitmap fill. This transformation
+	 * @param {createjs.Matrix2D} matrix Optional. Specifies a transformation matrix for the bitmap fill. This transformation
 	 * will be applied relative to the parent transform.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.beginBitmapFill = function(image, repetition, matrix) {
+ createjs.Graphics.prototype.beginBitmapFill = function(image, repetition, matrix) {
 		return this._setFill(new G.Fill(null,matrix).bitmap(image, repetition));
 	};
 
@@ -672,10 +664,10 @@
 	 * Ends the current sub-path, and begins a new one with no fill. Functionally identical to <code>beginFill(null)</code>.
 	 * A tiny API method "ef" also exists.
 	 * @method endFill
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.endFill = function() {
+ createjs.Graphics.prototype.endFill = function() {
 		return this.beginFill();
 	};
 
@@ -683,7 +675,7 @@
 	 * Sets the stroke style for the current sub-path. Like all drawing methods, this can be chained, so you can define
 	 * the stroke style and color in a single line of code like so:
 	 *
-	 *      myGraphics.setStrokeStyle(8,"round").beginStroke("#F00");
+	 *      mycreatejs.Graphics.setStrokeStyle(8,"round").beginStroke("#F00");
 	 *
 	 * A tiny API method "ss" also exists.
 	 * @method setStrokeStyle
@@ -698,10 +690,10 @@
 	 * controls at what point a mitered joint will be clipped.
 	 * @param {Boolean} [ignoreScale=false] If true, the stroke will be drawn at the specified thickness regardless
 	 * of active transformations.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.setStrokeStyle = function(thickness, caps, joints, miterLimit, ignoreScale) {
+ createjs.Graphics.prototype.setStrokeStyle = function(thickness, caps, joints, miterLimit, ignoreScale) {
 		this._updateInstructions(true);
 		this._strokeStyle = this.command = new G.StrokeStyle(thickness, caps, joints, miterLimit, ignoreScale);
 
@@ -716,10 +708,10 @@
 	 * @method beginStroke
 	 * @param {String} color A CSS compatible color value (ex. "#FF0000", "red", or "rgba(255,0,0,0.5)"). Setting to
 	 * null will result in no stroke.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.beginStroke = function(color) {
+ createjs.Graphics.prototype.beginStroke = function(color) {
 		return this._setStroke(color ? new G.Stroke(color) : null);
 	};
 
@@ -728,7 +720,7 @@
 	 * example, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a
 	 * square to display it:
 	 *
-	 *      myGraphics.setStrokeStyle(10).
+	 *      mycreatejs.Graphics.setStrokeStyle(10).
 	 *          beginLinearGradientStroke(["#000","#FFF"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);
 	 *
 	 * A tiny API method "ls" also exists.
@@ -741,10 +733,10 @@
 	 * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.
 	 * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.
 	 * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.beginLinearGradientStroke = function(colors, ratios, x0, y0, x1, y1) {
+ createjs.Graphics.prototype.beginLinearGradientStroke = function(colors, ratios, x0, y0, x1, y1) {
 		return this._setStroke(new G.Stroke().linearGradient(colors, ratios, x0, y0, x1, y1));
 	};
 
@@ -752,7 +744,7 @@
 	 * Begins a radial gradient stroke. This ends the current sub-path. For example, the following code defines a red to
 	 * blue radial gradient centered at (100, 100), with a radius of 50, and draws a rectangle to display it:
 	 *
-	 *      myGraphics.setStrokeStyle(10)
+	 *      mycreatejs.Graphics.setStrokeStyle(10)
 	 *          .beginRadialGradientStroke(["#F00","#00F"], [0, 1], 100, 100, 0, 100, 100, 50)
 	 *          .drawRect(50, 90, 150, 110);
 	 *
@@ -769,10 +761,10 @@
 	 * @param {Number} x1 Center position of the outer circle that defines the gradient.
 	 * @param {Number} y1 Center position of the outer circle that defines the gradient.
 	 * @param {Number} r1 Radius of the outer circle that defines the gradient.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.beginRadialGradientStroke = function(colors, ratios, x0, y0, r0, x1, y1, r1) {
+ createjs.Graphics.prototype.beginRadialGradientStroke = function(colors, ratios, x0, y0, r0, x1, y1, r1) {
 		return this._setStroke(new G.Stroke().radialGradient(colors, ratios, x0, y0, r0, x1, y1, r1));
 	};
 
@@ -785,10 +777,10 @@
 	 * as the pattern.
 	 * @param {String} [repetition=repeat] Optional. Indicates whether to repeat the image in the fill area. One of
 	 * "repeat", "repeat-x", "repeat-y", or "no-repeat". Defaults to "repeat".
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.beginBitmapStroke = function(image, repetition) {
+ createjs.Graphics.prototype.beginBitmapStroke = function(image, repetition) {
 		// NOTE: matrix is not supported for stroke because transforms on strokes also affect the drawn stroke width.
 		return this._setStroke(new G.Stroke().bitmap(image, repetition));
 	};
@@ -797,10 +789,10 @@
 	 * Ends the current sub-path, and begins a new one with no stroke. Functionally identical to <code>beginStroke(null)</code>.
 	 * A tiny API method "es" also exists.
 	 * @method endStroke
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.endStroke = function() {
+ createjs.Graphics.prototype.endStroke = function() {
 		return this.beginStroke();
 	};
 
@@ -814,10 +806,10 @@
 	 * @param {Number} cpy
 	 * @param {Number} x
 	 * @param {Number} y
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.curveTo = p.quadraticCurveTo;
+ createjs.Graphics.prototype.curveTo = createjs.Graphics.prototype.quadraticCurveTo;
 
 	/**
 	 *
@@ -828,10 +820,10 @@
 	 * @param {Number} y
 	 * @param {Number} w Width of the rectangle
 	 * @param {Number} h Height of the rectangle
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.drawRect = p.rect;
+ createjs.Graphics.prototype.drawRect = createjs.Graphics.prototype.rect;
 
 	/**
 	 * Draws a rounded rectangle with all corners with the specified radius.
@@ -841,10 +833,10 @@
 	 * @param {Number} w
 	 * @param {Number} h
 	 * @param {Number} radius Corner radius.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.drawRoundRect = function(x, y, w, h, radius) {
+ createjs.Graphics.prototype.drawRoundRect = function(x, y, w, h, radius) {
 		return this.drawRoundRectComplex(x, y, w, h, radius, radius, radius, radius);
 	};
 
@@ -860,10 +852,10 @@
 	 * @param {Number} radiusTR Top right corner radius.
 	 * @param {Number} radiusBR Bottom right corner radius.
 	 * @param {Number} radiusBL Bottom left corner radius.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.drawRoundRectComplex = function(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {
+ createjs.Graphics.prototype.drawRoundRectComplex = function(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {
 		return this.append(new G.RoundRect(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL));
 	};
 
@@ -888,10 +880,10 @@
 	 * @param {Number} x x coordinate center point of circle.
 	 * @param {Number} y y coordinate center point of circle.
 	 * @param {Number} radius Radius of circle.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.drawCircle = function(x, y, radius) {
+ createjs.Graphics.prototype.drawCircle = function(x, y, radius) {
 		return this.append(new G.Circle(x, y, radius));
 	};
 
@@ -906,10 +898,10 @@
 	 * @param {Number} w The height (horizontal diameter) of the ellipse. The horizontal radius will be half of this
 	 * number.
 	 * @param {Number} h The width (vertical diameter) of the ellipse. The vertical radius will be half of this number.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.drawEllipse = function(x, y, w, h) {
+ createjs.Graphics.prototype.drawEllipse = function(x, y, w, h) {
 		return this.append(new G.Ellipse(x, y, w, h));
 	};
 
@@ -918,7 +910,7 @@
 	 * points. For example, the following code will draw a familiar 5 pointed star shape centered at 100, 100 and with a
 	 * radius of 50:
 	 *
-	 *      myGraphics.beginFill("#FF0").drawPolyStar(100, 100, 50, 5, 0.6, -90);
+	 *      mycreatejs.Graphics.beginFill("#FF0").drawPolyStar(100, 100, 50, 5, 0.6, -90);
 	 *      // Note: -90 makes the first point vertical
 	 *
 	 * A tiny API method "dp" also exists.
@@ -932,10 +924,10 @@
 	 * polygon (no points), a pointSize of 1 will draw nothing because the points are infinitely pointy.
 	 * @param {Number} angle The angle of the first point / corner. For example a value of 0 will draw the first point
 	 * directly to the right of the center.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.drawPolyStar = function(x, y, radius, sides, pointSize, angle) {
+ createjs.Graphics.prototype.drawPolyStar = function(x, y, radius, sides, pointSize, angle) {
 		return this.append(new G.PolyStar(x, y, radius, sides, pointSize, angle));
 	};
 
@@ -958,7 +950,7 @@
 	 * 		myShape.color = "red";
 	 *
 	 * 		// append a Circle command object:
-	 * 		myShape.graphics.append(new Graphics.Circle(50, 50, 30));
+	 * 		myShape.graphics.append(new createjs.Graphics.Circle(50, 50, 30));
 	 *
 	 * 		// append a custom command object with an exec method that sets the fill style
 	 * 		// based on the shape's data, and then fills the circle.
@@ -970,10 +962,10 @@
 	 * @method append
 	 * @param {Object} command A graphics command object exposing an "exec" method.
 	 * @param {boolean} clean The clean param is primarily for internal use. A value of true indicates that a command does not generate a path that should be stroked or filled.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.append = function(command, clean) {
+ createjs.Graphics.prototype.append = function(command, clean) {
 		this._activeInstructions.push(command);
 		this.command = command;
 		if (!clean) { this._dirty = true; }
@@ -1013,16 +1005,16 @@
 	 * A tiny API method "p" also exists.
 	 * @method decodePath
 	 * @param {String} str The path string to decode.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.decodePath = function(str) {
+ createjs.Graphics.prototype.decodePath = function(str) {
 		var instructions = [this.moveTo, this.lineTo, this.quadraticCurveTo, this.bezierCurveTo, this.closePath];
 		var paramCount = [2, 2, 4, 6, 0];
 		var i=0, l=str.length;
 		var params = [];
 		var x=0, y=0;
-		var base64 = Graphics.BASE_64;
+		var base64 = createjs.Graphics.BASE_64;
 
 		while (i<l) {
 			var c = str.charAt(i);
@@ -1086,10 +1078,10 @@
 	 * 	myShape.store();
 	 *
 	 * @method store
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.store = function() {
+ createjs.Graphics.prototype.store = function() {
 		this._updateInstructions(true);
 		this._storeIndex = this._instructions.length;
 		return this;
@@ -1100,10 +1092,10 @@
 	 * so that they will be executed in subsequent draw calls.
 	 *
 	 * @method unstore
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.unstore = function() {
+ createjs.Graphics.prototype.unstore = function() {
 		this._storeIndex = 0;
 		return this;
 	};
@@ -1111,9 +1103,9 @@
 	/**
 	 * Returns a clone of this Graphics instance. Note that the individual command objects are not cloned.
 	 * @method clone
-	 * @return {Graphics} A clone of the current Graphics instance.
+	 * @return {createjs.Graphics} A clone of the current Graphics instance.
 	 **/
-	p.clone = function() {
+ createjs.Graphics.prototype.clone = function() {
 		var o = new Graphics();
 		o.command = this.command;
 		o._stroke = this._stroke;
@@ -1133,7 +1125,7 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.Graphics.prototype.toString = function() {
 		return "[Graphics]";
 	};
 
@@ -1144,22 +1136,22 @@
 	 * @method mt
 	 * @param {Number} x The x coordinate the drawing point should move to.
 	 * @param {Number} y The y coordinate the drawing point should move to.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls).
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls).
 	 * @chainable
 	 * @protected
 	 **/
-	p.mt = p.moveTo;
+ createjs.Graphics.prototype.mt = createjs.Graphics.prototype.moveTo;
 
 	/**
 	 * Shortcut to lineTo.
 	 * @method lt
 	 * @param {Number} x The x coordinate the drawing point should draw to.
 	 * @param {Number} y The y coordinate the drawing point should draw to.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.lt = p.lineTo;
+ createjs.Graphics.prototype.lt = createjs.Graphics.prototype.lineTo;
 
 	/**
 	 * Shortcut to arcTo.
@@ -1169,11 +1161,11 @@
 	 * @param {Number} x2
 	 * @param {Number} y2
 	 * @param {Number} radius
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.at = p.arcTo;
+ createjs.Graphics.prototype.at = createjs.Graphics.prototype.arcTo;
 
 	/**
 	 * Shortcut to bezierCurveTo.
@@ -1184,11 +1176,11 @@
 	 * @param {Number} cp2y
 	 * @param {Number} x
 	 * @param {Number} y
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.bt = p.bezierCurveTo;
+ createjs.Graphics.prototype.bt = createjs.Graphics.prototype.bezierCurveTo;
 
 	/**
 	 * Shortcut to quadraticCurveTo / curveTo.
@@ -1200,7 +1192,7 @@
 	 * @protected
 	 * @chainable
 	 **/
-	p.qt = p.quadraticCurveTo;
+ createjs.Graphics.prototype.qt = createjs.Graphics.prototype.quadraticCurveTo;
 
 	/**
 	 * Shortcut to arc.
@@ -1211,11 +1203,11 @@
 	 * @param {Number} startAngle Measured in radians.
 	 * @param {Number} endAngle Measured in radians.
 	 * @param {Boolean} anticlockwise
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @protected
 	 * @chainable
 	 **/
-	p.a = p.arc;
+ createjs.Graphics.prototype.a = createjs.Graphics.prototype.arc;
 
 	/**
 	 * Shortcut to rect.
@@ -1224,40 +1216,40 @@
 	 * @param {Number} y
 	 * @param {Number} w Width of the rectangle
 	 * @param {Number} h Height of the rectangle
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.r = p.rect;
+ createjs.Graphics.prototype.r = createjs.Graphics.prototype.rect;
 
 	/**
 	 * Shortcut to closePath.
 	 * @method cp
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.cp = p.closePath;
+ createjs.Graphics.prototype.cp = createjs.Graphics.prototype.closePath;
 
 	/**
 	 * Shortcut to clear.
 	 * @method c
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.c = p.clear;
+ createjs.Graphics.prototype.c = createjs.Graphics.prototype.clear;
 
 	/**
 	 * Shortcut to beginFill.
 	 * @method f
 	 * @param {String} color A CSS compatible color value (ex. "red", "#FF0000", or "rgba(255,0,0,0.5)"). Setting to
 	 * null will result in no fill.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.f = p.beginFill;
+ createjs.Graphics.prototype.f = createjs.Graphics.prototype.beginFill;
 
 	/**
 	 * Shortcut to beginLinearGradientFill.
@@ -1270,11 +1262,11 @@
 	 * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.
 	 * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.
 	 * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.lf = p.beginLinearGradientFill;
+ createjs.Graphics.prototype.lf = createjs.Graphics.prototype.beginLinearGradientFill;
 
 	/**
 	 * Shortcut to beginRadialGradientFill.
@@ -1289,11 +1281,11 @@
 	 * @param {Number} x1 Center position of the outer circle that defines the gradient.
 	 * @param {Number} y1 Center position of the outer circle that defines the gradient.
 	 * @param {Number} r1 Radius of the outer circle that defines the gradient.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.rf = p.beginRadialGradientFill;
+ createjs.Graphics.prototype.rf = createjs.Graphics.prototype.beginRadialGradientFill;
 
 	/**
 	 * Shortcut to beginBitmapFill.
@@ -1303,22 +1295,22 @@
 	 * @param {String} repetition Optional. Indicates whether to repeat the image in the fill area. One of "repeat",
 	 * "repeat-x", "repeat-y", or "no-repeat". Defaults to "repeat". Note that Firefox does not support "repeat-x" or
 	 * "repeat-y" (latest tests were in FF 20.0), and will default to "repeat".
-	 * @param {Matrix2D} matrix Optional. Specifies a transformation matrix for the bitmap fill. This transformation
+	 * @param {createjs.Matrix2D} matrix Optional. Specifies a transformation matrix for the bitmap fill. This transformation
 	 * will be applied relative to the parent transform.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.bf = p.beginBitmapFill;
+ createjs.Graphics.prototype.bf = createjs.Graphics.prototype.beginBitmapFill;
 
 	/**
 	 * Shortcut to endFill.
 	 * @method ef
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.ef = p.endFill;
+ createjs.Graphics.prototype.ef = createjs.Graphics.prototype.endFill;
 
 	/**
 	 * Shortcut to setStrokeStyle.
@@ -1334,22 +1326,22 @@
 	 * controls at what point a mitered joint will be clipped.
 	 * @param {Boolean} [ignoreScale=false] If true, the stroke will be drawn at the specified thickness regardless
 	 * of active transformations.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.ss = p.setStrokeStyle;
+ createjs.Graphics.prototype.ss = createjs.Graphics.prototype.setStrokeStyle;
 
 	/**
 	 * Shortcut to beginStroke.
 	 * @method s
 	 * @param {String} color A CSS compatible color value (ex. "#FF0000", "red", or "rgba(255,0,0,0.5)"). Setting to
 	 * null will result in no stroke.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.s = p.beginStroke;
+ createjs.Graphics.prototype.s = createjs.Graphics.prototype.beginStroke;
 
 	/**
 	 * Shortcut to beginLinearGradientStroke.
@@ -1362,11 +1354,11 @@
 	 * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.
 	 * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.
 	 * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.ls = p.beginLinearGradientStroke;
+ createjs.Graphics.prototype.ls = createjs.Graphics.prototype.beginLinearGradientStroke;
 
 	/**
 	 * Shortcut to beginRadialGradientStroke.
@@ -1382,11 +1374,11 @@
 	 * @param {Number} x1 Center position of the outer circle that defines the gradient.
 	 * @param {Number} y1 Center position of the outer circle that defines the gradient.
 	 * @param {Number} r1 Radius of the outer circle that defines the gradient.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.rs = p.beginRadialGradientStroke;
+ createjs.Graphics.prototype.rs = createjs.Graphics.prototype.beginRadialGradientStroke;
 
 	/**
 	 * Shortcut to beginBitmapStroke.
@@ -1395,20 +1387,20 @@
 	 * as the pattern.
 	 * @param {String} [repetition=repeat] Optional. Indicates whether to repeat the image in the fill area. One of
 	 * "repeat", "repeat-x", "repeat-y", or "no-repeat". Defaults to "repeat".
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.bs = p.beginBitmapStroke;
+ createjs.Graphics.prototype.bs = createjs.Graphics.prototype.beginBitmapStroke;
 
 	/**
 	 * Shortcut to endStroke.
 	 * @method es
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.es = p.endStroke;
+ createjs.Graphics.prototype.es = createjs.Graphics.prototype.endStroke;
 
 	/**
 	 * Shortcut to drawRect.
@@ -1417,11 +1409,11 @@
 	 * @param {Number} y
 	 * @param {Number} w Width of the rectangle
 	 * @param {Number} h Height of the rectangle
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.dr = p.drawRect;
+ createjs.Graphics.prototype.dr = createjs.Graphics.prototype.drawRect;
 
 	/**
 	 * Shortcut to drawRoundRect.
@@ -1431,11 +1423,11 @@
 	 * @param {Number} w
 	 * @param {Number} h
 	 * @param {Number} radius Corner radius.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.rr = p.drawRoundRect;
+ createjs.Graphics.prototype.rr = createjs.Graphics.prototype.drawRoundRect;
 
 	/**
 	 * Shortcut to drawRoundRectComplex.
@@ -1448,11 +1440,11 @@
 	 * @param {Number} radiusTR Top right corner radius.
 	 * @param {Number} radiusBR Bottom right corner radius.
 	 * @param {Number} radiusBL Bottom left corner radius.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.rc = p.drawRoundRectComplex;
+ createjs.Graphics.prototype.rc = createjs.Graphics.prototype.drawRoundRectComplex;
 
 	/**
 	 * Shortcut to drawCircle.
@@ -1460,11 +1452,11 @@
 	 * @param {Number} x x coordinate center point of circle.
 	 * @param {Number} y y coordinate center point of circle.
 	 * @param {Number} radius Radius of circle.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.dc = p.drawCircle;
+ createjs.Graphics.prototype.dc = createjs.Graphics.prototype.drawCircle;
 
 	/**
 	 * Shortcut to drawEllipse.
@@ -1476,11 +1468,11 @@
 	 * @param {Number} w The height (horizontal diameter) of the ellipse. The horizontal radius will be half of this
 	 * number.
 	 * @param {Number} h The width (vertical diameter) of the ellipse. The vertical radius will be half of this number.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.de = p.drawEllipse;
+ createjs.Graphics.prototype.de = createjs.Graphics.prototype.drawEllipse;
 
 	/**
 	 * Shortcut to drawPolyStar.
@@ -1493,21 +1485,21 @@
 	 * polygon (no points), a pointSize of 1 will draw nothing because the points are infinitely pointy.
 	 * @param {Number} angle The angle of the first point / corner. For example a value of 0 will draw the first point
 	 * directly to the right of the center.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.dp = p.drawPolyStar;
+ createjs.Graphics.prototype.dp = createjs.Graphics.prototype.drawPolyStar;
 
 	/**
 	 * Shortcut to decodePath.
 	 * @method p
 	 * @param {String} str The path string to decode.
-	 * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 * @protected
 	 **/
-	p.p = p.decodePath;
+ createjs.Graphics.prototype.p = createjs.Graphics.prototype.decodePath;
 
 
 // private methods:
@@ -1516,12 +1508,12 @@
 	 * @param commit
 	 * @protected
 	 **/
-	p._updateInstructions = function(commit) {
+ createjs.Graphics.prototype._updateInstructions = function(commit) {
 		var instr = this._instructions, active = this._activeInstructions, commitIndex = this._commitIndex;
 
 		if (this._dirty && active.length) {
 			instr.length = commitIndex; // remove old, uncommitted commands
-			instr.push(Graphics.beginCmd);
+			instr.push(createjs.Graphics.beginCmd);
 
 			var l = active.length, ll = instr.length;
 			instr.length = ll+l;
@@ -1545,7 +1537,7 @@
 	 * @param fill
 	 * @protected
 	 **/
-	p._setFill = function(fill) {
+ createjs.Graphics.prototype._setFill = function(fill) {
 		this._updateInstructions(true);
 		if (this._fill = fill) { this.command = fill; }
 		return this;
@@ -1556,7 +1548,7 @@
 	 * @param stroke
 	 * @protected
 	 **/
-	p._setStroke = function(stroke) {
+ createjs.Graphics.prototype._setStroke = function(stroke) {
 		this._updateInstructions(true);
 		if (this._stroke = stroke) {
 			this.command = stroke;
@@ -1565,613 +1557,9 @@
 		return this;
 	};
 
-// Command Objects:
-	/**
-	 * @namespace Graphics
-	 */
-	/**
-	 * Graphics command object. See {{#crossLink "Graphics"}}{{/crossLink}} and {{#crossLink "Graphics/append"}}{{/crossLink}} and {{#crossLink "Graphics/append"}}{{/crossLink}} for more information. See {{#crossLink "Graphics"}}{{/crossLink}} and {{#crossLink "Graphics/append"}}{{/crossLink}} for more information.
-	 * @class MoveTo
-	 * @constructor
-	 * @param {Number} x
-	 * @param {Number} y
-	 **/
-	/**
-	 * @property x
-	 * @type Number
-	 */
-	/**
-	 * @property y
-	 * @type Number
-	 */
-	(G.LineTo = function(x, y) {
-		this.x = x; this.y = y;
-	}).prototype.exec = function(ctx) { ctx.lineTo(this.x,this.y); };
-
-	/**
-	 * Graphics command object. See {{#crossLink "Graphics"}}{{/crossLink}} and {{#crossLink "Graphics/append"}}{{/crossLink}} for more information.
-	 * @class LineTo
-	 * @constructor
-	 * @param {Number} x
-	 * @param {Number} y
-	 **/
-	/**
-	 * @property x
-	 * @type Number
-	 */
-	/**
-	 * @property y
-	 * @type Number
-	 */
-	(G.MoveTo = function(x, y) {
-		this.x = x; this.y = y;
-	}).prototype.exec = function(ctx) { ctx.moveTo(this.x, this.y); };
-
-
-	/**
-	 * Graphics command object. See {{#crossLink "Graphics"}}{{/crossLink}} and {{#crossLink "Graphics/append"}}{{/crossLink}} for more information.
-	 * @class ArcTo
-	 * @constructor
-	 * @param {Number} x1
-	 * @param {Number} y1
-	 * @param {Number} x2
-	 * @param {Number} y2
-	 * @param {Number} radius
-	 **/
-	/**
-	 * @property x1
-	 * @type Number
-	 */
-	/**
-	 * @property y1
-	 * @type Number
-	 */
-	/**
-	 * @property x2
-	 * @type Number
-	 */
-	/**
-	 * @property y2
-	 * @type Number
-	 */
-	/**
-	 * @property radius
-	 * @type Number
-	 */
-	(G.ArcTo = function(x1, y1, x2, y2, radius) {
-		this.x1 = x1; this.y1 = y1;
-		this.x2 = x2; this.y2 = y2;
-		this.radius = radius;
-	}).prototype.exec = function(ctx) { ctx.arcTo(this.x1, this.y1, this.x2, this.y2, this.radius); };
-
-	/**
-	 * Graphics command object. See {{#crossLink "Graphics"}}{{/crossLink}} and {{#crossLink "Graphics/append"}}{{/crossLink}} for more information.
-	 * @class Arc
-	 * @constructor
-	 * @param {Number} x
-	 * @param {Number} y
-	 * @param {Number} radius
-	 * @param {Number} startAngle
-	 * @param {Number} endAngle
-	 * @param {Number} anticlockwise
-	 **/
-	/**
-	 * @property x
-	 * @type Number
-	 */
-	/**
-	 * @property y
-	 * @type Number
-	 */
-	/**
-	 * @property radius
-	 * @type Number
-	 */
-	/**
-	 * @property startAngle
-	 * @type Number
-	 */
-	/**
-	 * @property endAngle
-	 * @type Number
-	 */
-	/**
-	 * @property anticlockwise
-	 * @type Number
-	 */
-	(G.Arc = function(x, y, radius, startAngle, endAngle, anticlockwise) {
-		this.x = x; this.y = y;
-		this.radius = radius;
-		this.startAngle = startAngle; this.endAngle = endAngle;
-		this.anticlockwise = !!anticlockwise;
-	}).prototype.exec = function(ctx) { ctx.arc(this.x, this.y, this.radius, this.startAngle, this.endAngle, this.anticlockwise); };
-
-	/**
-	 * Graphics command object. See {{#crossLink "Graphics"}}{{/crossLink}} and {{#crossLink "Graphics/append"}}{{/crossLink}} for more information.
-	 * @class QuadraticCurveTo
-	 * @constructor
-	 * @param {Number} cpx
-	 * @param {Number} cpy
-	 * @param {Number} x
-	 * @param {Number} y
-	 **/
-	/**
-	 * @property cpx
-	 * @type Number
-	 */
-	/**
-	 * @property cpy
-	 * @type Number
-	 */
-	/**
-	 * @property x
-	 * @type Number
-	 */
-	/**
-	 * @property y
-	 * @type Number
-	 */
-	(G.QuadraticCurveTo = function(cpx, cpy, x, y) {
-		this.cpx = cpx; this.cpy = cpy;
-		this.x = x; this.y = y;
-	}).prototype.exec = function(ctx) { ctx.quadraticCurveTo(this.cpx, this.cpy, this.x, this.y); };
-
-	/**
-	 * Graphics command object. See {{#crossLink "Graphics"}}{{/crossLink}} and {{#crossLink "Graphics/append"}}{{/crossLink}} for more information.
-	 * @class BezierCurveTo
-	 * @constructor
-	 * @param {Number} cp1x
-	 * @param {Number} cp1y
-	 * @param {Number} cp2x
-	 * @param {Number} cp2y
-	 * @param {Number} x
-	 * @param {Number} y
-	 **/
-	/**
-	 * @property cp1x
-	 * @type Number
-	 */
-	/**
-	 * @property cp1y
-	 * @type Number
-	 */
-	/**
-	 * @property cp2x
-	 * @type Number
-	 */
-	/**
-	 * @property cp2y
-	 * @type Number
-	 */
-	/**
-	 * @property x
-	 * @type Number
-	 */
-	/**
-	 * @property y
-	 * @type Number
-	 */
-	(G.BezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {
-		this.cp1x = cp1x; this.cp1y = cp1y;
-		this.cp2x = cp2x; this.cp2y = cp2y;
-		this.x = x; this.y = y;
-	}).prototype.exec = function(ctx) { ctx.bezierCurveTo(this.cp1x, this.cp1y, this.cp2x, this.cp2y, this.x, this.y); };
-
-	/**
-	 * Graphics command object. See {{#crossLink "Graphics"}}{{/crossLink}} and {{#crossLink "Graphics/append"}}{{/crossLink}} for more information.
-	 * @class Rect
-	 * @constructor
-	 * @param {Number} x
-	 * @param {Number} y
-	 * @param {Number} w
-	 * @param {Number} h
-	 **/
-	/**
-	 * @property x
-	 * @type Number
-	 */
-	/**
-	 * @property y
-	 * @type Number
-	 */
-	/**
-	 * @property w
-	 * @type Number
-	 */
-	/**
-	 * @property h
-	 * @type Number
-	 */
-	(G.Rect = function(x, y, w, h) {
-		this.x = x; this.y = y;
-		this.w = w; this.h = h;
-	}).prototype.exec = function(ctx) { ctx.rect(this.x, this.y, this.w, this.h); };
-
-	/**
-	 * Graphics command object. See {{#crossLink "Graphics"}}{{/crossLink}} and {{#crossLink "Graphics/append"}}{{/crossLink}} for more information.
-	 * @class ClosePath
-	 * @constructor
-	 **/
-	(G.ClosePath = function() {
-	}).prototype.exec = function(ctx) { ctx.closePath(); };
-
-	/**
-	 * Graphics command object. See {{#crossLink "Graphics"}}{{/crossLink}} and {{#crossLink "Graphics/append"}}{{/crossLink}} for more information.
-	 * @class BeginPath
-	 * @constructor
-	 **/
-	(G.BeginPath = function() {
-	}).prototype.exec = function(ctx) { ctx.beginPath(); };
-
-	/**
-	 * Graphics command object. See {{#crossLink "Graphics"}}{{/crossLink}} and {{#crossLink "Graphics/append"}}{{/crossLink}} for more information.
-	 * @class Fill
-	 * @constructor
-	 * @param {Object} style A valid Context2D fillStyle.
-	 * @param {Matrix2D} matrix
-	 **/
-	/**
-	 * A valid Context2D fillStyle.
-	 * @property style
-	 * @type Object
-	 */
-	/**
-	 * @property matrix
-	 * @type Matrix2D
-	 */
-	p = (G.Fill = function(style, matrix) {
-		this.style = style;
-		this.matrix = matrix;
-	}).prototype;
-	p.exec = function(ctx) {
-		if (!this.style) { return; }
-		ctx.fillStyle = this.style;
-		var mtx = this.matrix;
-		if (mtx) { ctx.save(); ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty); }
-		ctx.fill();
-		if (mtx) { ctx.restore(); }
-	};
-	/**
-	 * Creates a linear gradient style and assigns it to {{#crossLink "Fill/style:property"}}{{/crossLink}}.
-	 * @method linearGradient
-	 * @param {Array} colors
-	 * @param {Array} ratios
-	 * @param {Number} x0
-	 * @param {Number} y0
-	 * @param {Number} x1
-	 * @param {Number} y1
-	 * @return {Fill} Returns this Fill object for chaining or assignment.
-	 */
-	p.linearGradient = function(colors, ratios, x0, y0, x1, y1) {
-		var o = this.style =  Graphics._ctx.createLinearGradient(x0, y0, x1, y1);
-		for (var i=0, l=colors.length; i<l; i++) { o.addColorStop(ratios[i], colors[i]); }
-		o.props = {colors:colors, ratios:ratios, x0:x0, y0:y0, x1:x1, y1:y1, type:"linear"};
-		return this;
-	};
-	/**
-	 * Creates a radial gradient style and assigns it to {{#crossLink "Fill/style:property"}}{{/crossLink}}.
-	 * @method radialGradient
-	 * @param {Array} colors
-	 * @param {Array} ratios
-	 * @param {Number} x0
-	 * @param {Number} y0
-	 * @param {Number} r0
-	 * @param {Number} x1
-	 * @param {Number} y1
-	 * @param {Number} r1
-	 * @return {Fill} Returns this Fill object for chaining or assignment.
-	 */
-	p.radialGradient = function(colors, ratios, x0, y0, r0, x1, y1, r1) {
-		var o = this.style =  Graphics._ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);
-		for (var i=0, l=colors.length; i<l; i++) { o.addColorStop(ratios[i], colors[i]); }
-		o.props = {colors:colors, ratios:ratios, x0:x0, y0:y0, r0:r0, x1:x1, y1:y1, r1:r1, type:"radial"};
-		return this;
-	};
-	/**
-	 * Creates a bitmap fill style and assigns it to {{#crossLink "Fill/style:property"}}{{/crossLink}}.
-	 * @method bitmap
-	 * @param {Image} image
-	 * @param {String} [repetition] One of: repeat, repeat-x, repeat-y, or no-repeat.
-	 * @return {Fill} Returns this Fill object for chaining or assignment.
-	 */
-	p.bitmap = function(image, repetition) {
-		var o = this.style = Graphics._ctx.createPattern(image, repetition||"");
-		o.props = {image:image, repetition:repetition, type:"bitmap"};
-		return this;
-	};
-	p.path = false;
-
-	/**
-	 * Graphics command object. See {{#crossLink "Graphics"}}{{/crossLink}} and {{#crossLink "Graphics/append"}}{{/crossLink}} for more information.
-	 * @class Stroke
-	 * @constructor
-	 * @param {Object} style A valid Context2D fillStyle.
-	 * @param {Boolean} ignoreScale
-	 **/
-	/**
-	 * A valid Context2D strokeStyle.
-	 * @property style
-	 * @type Object
-	 */
-	/**
-	 * @property ignoreScale
-	 * @type Boolean
-	 */
-	p = (G.Stroke = function(style, ignoreScale) {
-		this.style = style;
-		this.ignoreScale = ignoreScale;
-	}).prototype;
-	p.exec = function(ctx) {
-		if (!this.style) { return; }
-		ctx.strokeStyle = this.style;
-		if (this.ignoreScale) { ctx.save(); ctx.setTransform(1,0,0,1,0,0); }
-		ctx.stroke();
-		if (this.ignoreScale) { ctx.restore(); }
-	};
-	/**
-	 * Creates a linear gradient style and assigns it to {{#crossLink "Stroke/style:property"}}{{/crossLink}}.
-	 * @method linearGradient
-	 * @param {Array} colors
-	 * @param {Array} ratios
-	 * @param {Number} x0
-	 * @param {Number} y0
-	 * @param {Number} x1
-	 * @param {Number} y1
-	 * @return {Fill} Returns this Stroke object for chaining or assignment.
-	 */
-	p.linearGradient = G.Fill.prototype.linearGradient;
-	/**
-	 * Creates a radial gradient style and assigns it to {{#crossLink "Stroke/style:property"}}{{/crossLink}}.
-	 * @method radialGradient
-	 * @param {Array} colors
-	 * @param {Array} ratios
-	 * @param {Number} x0
-	 * @param {Number} y0
-	 * @param {Number} r0
-	 * @param {Number} x1
-	 * @param {Number} y1
-	 * @param {Number} r1
-	 * @return {Fill} Returns this Stroke object for chaining or assignment.
-	 */
-	p.radialGradient = G.Fill.prototype.radialGradient;
-	/**
-	 * Creates a bitmap fill style and assigns it to {{#crossLink "Stroke/style:property"}}{{/crossLink}}.
-	 * @method bitmap
-	 * @param {Image} image
-	 * @param {String} [repetition] One of: repeat, repeat-x, repeat-y, or no-repeat.
-	 * @return {Fill} Returns this Stroke object for chaining or assignment.
-	 */
-	p.bitmap = G.Fill.prototype.bitmap;
-	p.path = false;
-
-	/**
-	 * Graphics command object. See {{#crossLink "Graphics"}}{{/crossLink}} and {{#crossLink "Graphics/append"}}{{/crossLink}} for more information.
-	 * @class StrokeStyle
-	 * @constructor
-	 * @param {Number} width
-	 * @param {String} caps
-	 * @param {String} joints
-	 * @param {Number} miterLimit
-	 **/
-	/**
-	 * @property width
-	 * @type Number
-	 */
-	/**
-	 * One of: butt, round, square
-	 * @property caps
-	 * @type String
-	 */
-	/**
-	 * One of: round, bevel, miter
-	 * @property joints
-	 * @type String
-	 */
-	/**
-	 * @property miterLimit
-	 * @type Number
-	 */
-	p = (G.StrokeStyle = function(width, caps, joints, miterLimit) {
-		this.width = width;
-		this.caps = caps;
-		this.joints = joints;
-		this.miterLimit = miterLimit;
-	}).prototype;
-	p.exec = function(ctx) {
-		ctx.lineWidth = (this.width == null ? "1" : this.width);
-		ctx.lineCap = (this.caps == null ? "butt" : (isNaN(this.caps) ? this.caps : Graphics.STROKE_CAPS_MAP[this.caps]));
-		ctx.lineJoin = (this.joints == null ? "miter" : (isNaN(this.joints) ? this.joints : Graphics.STROKE_JOINTS_MAP[this.joints]));
-		ctx.miterLimit = (this.miterLimit == null ? "10" : this.miterLimit);
-	};
-	p.path = false;
-
-	/**
-	 * Graphics command object. See {{#crossLink "Graphics"}}{{/crossLink}} and {{#crossLink "Graphics/append"}}{{/crossLink}} for more information.
-	 * @class RoundRect
-	 * @constructor
-	 * @param {Number} x
-	 * @param {Number} y
-	 * @param {Number} w
-	 * @param {Number} h
-	 * @param {Number} radiusTL
-	 * @param {Number} radiusTR
-	 * @param {Number} radiusBR
-	 * @param {Number} radiusBL
-	 **/
-	/**
-	 * @property x
-	 * @type Number
-	 */
-	/**
-	 * @property y
-	 * @type Number
-	 */
-	/**
-	 * @property w
-	 * @type Number
-	 */
-	/**
-	 * @property h
-	 * @type Number
-	 */
-	/**
-	 * @property radiusTL
-	 * @type Number
-	 */
-	/**
-	 * @property radiusTR
-	 * @type Number
-	 */
-	/**
-	 * @property radiusBR
-	 * @type Number
-	 */
-	/**
-	 * @property radiusBL
-	 * @type Number
-	 */
-	(G.RoundRect = function(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {
-		this.x = x; this.y = y;
-		this.w = w; this.h = h;
-		this.radiusTL = radiusTL; this.radiusTR = radiusTR;
-		this.radiusBR = radiusBR; this.radiusBL = radiusBL;
-	}).prototype.exec = function(ctx) {
-		var max = (w<h?w:h)/2;
-		var mTL=0, mTR=0, mBR=0, mBL=0;
-		var x = this.x, y = this.y, w = this.w, h = this.h;
-		var rTL = this.radiusTL, rTR = this.radiusTR, rBR = this.radiusBR, rBL = this.radiusBL;
-
-		if (rTL < 0) { rTL *= (mTL=-1); }
-		if (rTL > max) { rTL = max; }
-		if (rTR < 0) { rTR *= (mTR=-1); }
-		if (rTR > max) { rTR = max; }
-		if (rBR < 0) { rBR *= (mBR=-1); }
-		if (rBR > max) { rBR = max; }
-		if (rBL < 0) { rBL *= (mBL=-1); }
-		if (rBL > max) { rBL = max; }
-
-		ctx.moveTo(x+w-rTR, y);
-		ctx.arcTo(x+w+rTR*mTR, y-rTR*mTR, x+w, y+rTR, rTR);
-		ctx.lineTo(x+w, y+h-rBR);
-		ctx.arcTo(x+w+rBR*mBR, y+h+rBR*mBR, x+w-rBR, y+h, rBR);
-		ctx.lineTo(x+rBL, y+h);
-		ctx.arcTo(x-rBL*mBL, y+h+rBL*mBL, x, y+h-rBL, rBL);
-		ctx.lineTo(x, y+rTL);
-		ctx.arcTo(x-rTL*mTL, y-rTL*mTL, x+rTL, y, rTL);
-		ctx.closePath();
-	};
-
-	/**
-	 * Graphics command object. See {{#crossLink "Graphics"}}{{/crossLink}} and {{#crossLink "Graphics/append"}}{{/crossLink}} for more information.
-	 * @class Circle
-	 * @constructor
-	 * @param {Number} x
-	 * @param {Number} y
-	 * @param {Number} radius
-	 **/
-	/**
-	 * @property x
-	 * @type Number
-	 */
-	/**
-	 * @property y
-	 * @type Number
-	 */
-	/**
-	 * @property radius
-	 * @type Number
-	 */
-	(G.Circle = function(x, y, radius) {
-		this.x = x; this.y = y;
-		this.radius = radius;
-	}).prototype.exec = function(ctx) { ctx.arc(this.x, this.y, this.radius, 0, Math.PI*2); };
-
-	(G.Ellipse = function(x, y, w, h) {
-		this.x = x; this.y = y;
-		this.w = w; this.h = h;
-	}).prototype.exec = function(ctx) {
-		var x = this.x, y = this.y;
-		var w = this.w, h = this.h;
-
-		var k = 0.5522848;
-		var ox = (w / 2) * k;
-		var oy = (h / 2) * k;
-		var xe = x + w;
-		var ye = y + h;
-		var xm = x + w / 2;
-		var ym = y + h / 2;
-
-		ctx.moveTo(x, ym);
-		ctx.bezierCurveTo(x, ym-oy, xm-ox, y, xm, y);
-		ctx.bezierCurveTo(xm+ox, y, xe, ym-oy, xe, ym);
-		ctx.bezierCurveTo(xe, ym+oy, xm+ox, ye, xm, ye);
-		ctx.bezierCurveTo(xm-ox, ye, x, ym+oy, x, ym);
-	};
-
-	/**
-	 * Graphics command object. See {{#crossLink "Graphics"}}{{/crossLink}} and {{#crossLink "Graphics/append"}}{{/crossLink}} for more information.
-	 * @class PolyStar
-	 * @constructor
-	 * @param {Number} x
-	 * @param {Number} y
-	 * @param {Number} radius
-	 * @param {Number} sides
-	 * @param {Number} pointSize
-	 * @param {Number} angle
-	 **/
-	/**
-	 * @property x
-	 * @type Number
-	 */
-	/**
-	 * @property y
-	 * @type Number
-	 */
-	/**
-	 * @property radius
-	 * @type Number
-	 */
-	/**
-	 * @property sides
-	 * @type Number
-	 */
-	/**
-	 * @property pointSize
-	 * @type Number
-	 */
-	/**
-	 * @property angle
-	 * @type Number
-	 */
-	(G.PolyStar = function(x, y, radius, sides, pointSize, angle) {
-		this.x = x; this.y = y;
-		this.radius = radius;
-		this.sides = sides;
-		this.pointSize = pointSize;
-		this.angle = angle;
-	}).prototype.exec = function(ctx) {
-		var x = this.x, y = this.y;
-		var radius = this.radius;
-		var angle = (this.angle||0)/180*Math.PI;
-		var sides = this.sides;
-		var ps = 1-(this.pointSize||0);
-		var a = Math.PI/sides;
-
-		ctx.moveTo(x+Math.cos(angle)*radius, y+Math.sin(angle)*radius);
-		for (var i=0; i<sides; i++) {
-			angle += a;
-			if (ps != 1) {
-				ctx.lineTo(x+Math.cos(angle)*radius*ps, y+Math.sin(angle)*radius*ps);
-			}
-			angle += a;
-			ctx.lineTo(x+Math.cos(angle)*radius, y+Math.sin(angle)*radius);
-		}
-		ctx.closePath();
-	};
-
 	// docced above.
-	Graphics.beginCmd = new G.BeginPath(); // so we don't have to instantiate multiple instances.
+	createjs.Graphics.beginCmd = new G.BeginPath(); // so we don't have to instantiate multiple instances.
+
 
+	
 
-	createjs.Graphics = Graphics;
-}());
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/display/MovieClip.js EaselJS-0.8.0/src/easeljs/display/MovieClip.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/display/MovieClip.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/display/MovieClip.js	2016-05-31 11:03:08.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -79,16 +75,16 @@
 	 *
 	 * @class MovieClip
 	 * @main MovieClip
-	 * @extends Container
+	 * @extends createjs.Container
 	 * @constructor
-	 * @param {String} [mode=independent] Initial value for the mode property. One of MovieClip.INDEPENDENT,
-	 * MovieClip.SINGLE_FRAME, or MovieClip.SYNCHED. The default is MovieClip.INDEPENDENT.
+	 * @param {String} [mode=independent] Initial value for the mode property. One of createjs.MovieClip.INDEPENDENT,
+	 * createjs.MovieClip.SINGLE_FRAME, or createjs.MovieClip.SYNCHED. The default is createjs.MovieClip.INDEPENDENT.
 	 * @param {Number} [startPosition=0] Initial value for the startPosition property.
 	 * @param {Boolean} [loop=true] Initial value for the loop property. The default is true.
-	 * @param {Object} [labels=null] A hash of labels to pass to the timeline instance associated with this MovieClip.
+	 * @param {Object} [labels=null] A hash of labels to pass to the timeline instance associated with this createjs.MovieClip.
 	 * Labels only need to be passed if they need to be used.
 	 **/
-	function MovieClip(mode, startPosition, loop, labels) {
+	createjs.MovieClip = function(mode, startPosition, loop, labels) {
 		this.Container_constructor();
 		
 		
@@ -100,7 +96,7 @@
 		 * @type String
 		 * @default null
 		 **/
-		this.mode = mode||MovieClip.INDEPENDENT;
+		this.mode = mode||createjs.MovieClip.INDEPENDENT;
 	
 		/**
 		 * Specifies what the first frame to play in this movieclip, or the only frame to display if mode is SINGLE_FRAME.
@@ -128,7 +124,7 @@
 		this.currentFrame = 0;
 	
 		/**
-		 * The TweenJS Timeline that is associated with this MovieClip. This is created automatically when the MovieClip
+		 * The TweenJS Timeline that is associated with this createjs.MovieClip. This is created automatically when the MovieClip
 		 * instance is initialized. Animations are created by adding <a href="http://tweenjs.com">TweenJS</a> Tween
 		 * instances to the timeline.
 		 *
@@ -184,7 +180,7 @@
 		this.autoReset = true;
 		
 		/**
-		 * An array of bounds for each frame in the MovieClip. This is mainly intended for tool output.
+		 * An array of bounds for each frame in the createjs.MovieClip. This is mainly intended for tool output.
 		 * @property frameBounds
 		 * @type Array
 		 * @default null
@@ -243,14 +239,14 @@
 		this._t = 0;
 	
 		/**
-		 * List of display objects that are actively being managed by the MovieClip.
+		 * List of display objects that are actively being managed by the createjs.MovieClip.
 		 * @property _managed
 		 * @type Object
 		 * @private
 		 */
 		this._managed = {};
 	}
-	var p = createjs.extend(MovieClip, createjs.Container);
+	
 
 
 // constants:
@@ -263,7 +259,7 @@
 	 * @default "independent"
 	 * @readonly
 	 **/
-	MovieClip.INDEPENDENT = "independent";
+	createjs.MovieClip.INDEPENDENT = "independent";
 
 	/**
 	 * The MovieClip will only display a single frame (as determined by the startPosition property).
@@ -273,18 +269,18 @@
 	 * @default "single"
 	 * @readonly
 	 **/
-	MovieClip.SINGLE_FRAME = "single";
+	createjs.MovieClip.SINGLE_FRAME = "single";
 
 	/**
 	 * The MovieClip will be advanced only when its parent advances and will be synched to the position of
-	 * the parent MovieClip.
+	 * the parent createjs.MovieClip.
 	 * @property SYNCHED
 	 * @static
 	 * @type String
 	 * @default "synched"
 	 * @readonly
 	 **/
-	MovieClip.SYNCHED = "synched";
+	createjs.MovieClip.SYNCHED = "synched";
 	
 	
 // getter / setters:
@@ -294,7 +290,7 @@
 	 * @return {Array}
 	 * @deprecated
 	 **/
-	p.getLabels = function() {
+ createjs.MovieClip.prototype.getLabels = function() {
 		return this.timeline.getLabels();
 	};
 	
@@ -304,7 +300,7 @@
 	 * @return {String}
 	 * @deprecated
 	 **/
-	p.getCurrentLabel = function() {
+ createjs.MovieClip.prototype.getCurrentLabel = function() {
 		this._updateTimeline();
 		return this.timeline.getCurrentLabel();
 	};
@@ -324,12 +320,7 @@
 	 * @type {String}
 	 * @readonly
 	 **/
-	try {
-		Object.defineProperties(p, {
-			labels: { get: p.getLabels },
-			currentLabel: { get: p.getCurrentLabel }
-		});
-	} catch (e) {}
+
 
 
 // public methods:
@@ -339,7 +330,7 @@
 	 * @method initialize
 	 * @deprecated in favour of `createjs.promote()`
 	 **/
-	p.initialize = MovieClip; // TODO: Deprecated. This is for backwards support of FlashCC
+ createjs.MovieClip.prototype.initialize = MovieClip; // TODO: Deprecated. This is for backwards support of FlashCC
 
 	/**
 	 * Returns true or false indicating whether the display object would be visible if drawn to a canvas.
@@ -348,7 +339,7 @@
 	 * @method isVisible
 	 * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas
 	 **/
-	p.isVisible = function() {
+ createjs.MovieClip.prototype.isVisible = function() {
 		// children are placed in draw, so we can't determine if we have content.
 		return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0);
 	};
@@ -363,7 +354,7 @@
 	 * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back
 	 * into itself).
 	 **/
-	p.draw = function(ctx, ignoreCache) {
+ createjs.MovieClip.prototype.draw = function(ctx, ignoreCache) {
 		// draw to cache first:
 		if (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }
 		this._updateTimeline();
@@ -375,7 +366,7 @@
 	 * Sets paused to false.
 	 * @method play
 	 **/
-	p.play = function() {
+ createjs.MovieClip.prototype.play = function() {
 		this.paused = false;
 	};
 	
@@ -383,7 +374,7 @@
 	 * Sets paused to true.
 	 * @method stop
 	 **/
-	p.stop = function() {
+ createjs.MovieClip.prototype.stop = function() {
 		this.paused = true;
 	};
 	
@@ -392,7 +383,7 @@
 	 * @method gotoAndPlay
 	 * @param {String|Number} positionOrLabel The animation name or frame number to go to.
 	 **/
-	p.gotoAndPlay = function(positionOrLabel) {
+ createjs.MovieClip.prototype.gotoAndPlay = function(positionOrLabel) {
 		this.paused = false;
 		this._goto(positionOrLabel);
 	};
@@ -402,19 +393,19 @@
 	 * @method gotoAndStop
 	 * @param {String|Number} positionOrLabel The animation or frame name to go to.
 	 **/
-	p.gotoAndStop = function(positionOrLabel) {
+ createjs.MovieClip.prototype.gotoAndStop = function(positionOrLabel) {
 		this.paused = true;
 		this._goto(positionOrLabel);
 	};
 	
 	/**
 	 * Advances the playhead. This occurs automatically each tick by default.
-	 * @param [time] {Number} The amount of time in ms to advance by. Only applicable if framerate is set.
+	 * @param {Number} time The amount of time in ms to advance by. Only applicable if framerate is set.
 	 * @method advance
 	*/
-	p.advance = function(time) {
+ createjs.MovieClip.prototype.advance = function(time) {
 		// TODO: should we worry at all about clips who change their own modes via frame scripts?
-		var independent = MovieClip.INDEPENDENT;
+		var independent = createjs.MovieClip.INDEPENDENT;
 		if (this.mode != independent) { return; }
 		
 		var o=this, fps = o.framerate;
@@ -437,7 +428,7 @@
 	 * MovieClip instances cannot be cloned.
 	 * @method clone
 	 **/
-	p.clone = function() {
+ createjs.MovieClip.prototype.clone = function() {
 		// TODO: add support for this? Need to clone the Timeline & retarget tweens - pretty complex.
 		throw("MovieClip cannot be cloned.")
 	};
@@ -447,7 +438,7 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.MovieClip.prototype.toString = function() {
 		return "[MovieClip (name="+  this.name +")]";
 	};
 
@@ -459,7 +450,7 @@
 	 * function.
 	 * @protected
 	 **/
-	p._tick = function(evtObj) {
+ createjs.MovieClip.prototype._tick = function(evtObj) {
 		this.advance(evtObj&&evtObj.delta);
 		this.Container__tick(evtObj);
 	};
@@ -469,7 +460,7 @@
 	 * @param {String|Number} positionOrLabel The animation name or frame number to go to.
 	 * @protected
 	 **/
-	p._goto = function(positionOrLabel) {
+ createjs.MovieClip.prototype._goto = function(positionOrLabel) {
 		var pos = this.timeline.resolve(positionOrLabel);
 		if (pos == null) { return; }
 		// prevent _updateTimeline from overwriting the new position because of a reset:
@@ -483,7 +474,7 @@
 	 * @method _reset
 	 * @private
 	 **/
-	p._reset = function() {
+ createjs.MovieClip.prototype._reset = function() {
 		this._prevPos = -1;
 		this._t = 0;
 		this.currentFrame = 0;
@@ -493,14 +484,14 @@
 	 * @method _updateTimeline
 	 * @protected
 	 **/
-	p._updateTimeline = function() {
+ createjs.MovieClip.prototype._updateTimeline = function() {
 		var tl = this.timeline;
-		var synched = this.mode != MovieClip.INDEPENDENT;
+		var synched = this.mode != createjs.MovieClip.INDEPENDENT;
 		tl.loop = (this.loop==null) ? true : this.loop;
 
 		// update timeline position, ignoring actions if this is a graphic.
 		if (synched) {
-			tl.setPosition(this.startPosition + (this.mode==MovieClip.SINGLE_FRAME?0:this._synchOffset), createjs.Tween.NONE);
+			tl.setPosition(this.startPosition + (this.mode==createjs.MovieClip.SINGLE_FRAME?0:this._synchOffset), createjs.Tween.NONE);
 		} else {
 			tl.setPosition(this._prevPos < 0 ? 0 : this._prevPosition, this.actionsEnabled ? null : createjs.Tween.NONE);
 		}
@@ -543,7 +534,7 @@
 	 * @param {Number} offset
 	 * @protected
 	 **/
-	p._setState = function(state, offset) {
+ createjs.MovieClip.prototype._setState = function(state, offset) {
 		if (!state) { return; }
 		for (var i=state.length-1;i>=0;i--) {
 			var o = state[i];
@@ -557,30 +548,30 @@
 	/**
 	 * Adds a child to the timeline, and sets it up as a managed child.
 	 * @method _addManagedChild
-	 * @param {MovieClip} child The child MovieClip to manage
+	 * @param {createjs.MovieClip} child The child MovieClip to manage
 	 * @param {Number} offset
 	 * @private
 	 **/
-	p._addManagedChild = function(child, offset) {
+ createjs.MovieClip.prototype._addManagedChild = function(child, offset) {
 		if (child._off) { return; }
 		this.addChildAt(child,0);
 
 		if (child instanceof MovieClip) {
 			child._synchOffset = offset;
 			// TODO: this does not precisely match Flash. Flash loses track of the clip if it is renamed or removed from the timeline, which causes it to reset.
-			if (child.mode == MovieClip.INDEPENDENT && child.autoReset && !this._managed[child.id]) { child._reset(); }
+			if (child.mode == createjs.MovieClip.INDEPENDENT && child.autoReset && !this._managed[child.id]) { child._reset(); }
 		}
 		this._managed[child.id] = 2;
 	};
 	
 	/**
 	 * @method _getBounds
-	 * @param {Matrix2D} matrix
+	 * @param {createjs.Matrix2D} matrix
 	 * @param {Boolean} ignoreTransform
-	 * @return {Rectangle}
+	 * @return {createjs.Rectangle}
 	 * @protected
 	 **/
-	p._getBounds = function(matrix, ignoreTransform) {
+ createjs.MovieClip.prototype._getBounds = function(matrix, ignoreTransform) {
 		var bounds = this.DisplayObject_getBounds();
 		if (!bounds) {
 			this._updateTimeline();
@@ -591,7 +582,7 @@
 	};
 
 
-	createjs.MovieClip = createjs.promote(MovieClip, "Container");
+	
 
 
 
@@ -658,4 +649,4 @@
 	};
 
 	MovieClipPlugin.install();
-}());
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/display/Shadow.js EaselJS-0.8.0/src/easeljs/display/Shadow.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/display/Shadow.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/display/Shadow.js	2016-05-31 11:03:08.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -53,7 +49,7 @@
 	 * @param {Number} offsetY The y offset of the shadow in pixels.
 	 * @param {Number} blur The size of the blurring effect.
 	 **/
-	function Shadow(color, offsetX, offsetY, blur) {
+	createjs.Shadow = function(color, offsetX, offsetY, blur) {
 		
 		
 	// public properties:
@@ -85,7 +81,7 @@
 		 */
 		this.blur = blur||0;
 	}
-	var p = Shadow.prototype;
+	
 
 	/**
 	 * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.
@@ -98,7 +94,7 @@
 	 * @protected
 	 * @deprecated
 	 */
-	// p.initialize = function() {}; // searchable for devs wondering where it is.
+	// createjs.Shadow.prototype.initialize = function() {}; // searchable for devs wondering where it is.
 
 
 // static public properties:
@@ -110,7 +106,7 @@
 	 * @final
 	 * @readonly
 	 **/
-	Shadow.identity = new Shadow("transparent", 0, 0, 0);
+	createjs.Shadow.identity = new Shadow("transparent", 0, 0, 0);
 
 
 // public methods:
@@ -119,19 +115,19 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.Shadow.prototype.toString = function() {
 		return "[Shadow]";
 	};
 
 	/**
 	 * Returns a clone of this Shadow instance.
 	 * @method clone
-	 * @return {Shadow} A clone of the current Shadow instance.
+	 * @return {createjs.Shadow} A clone of the current Shadow instance.
 	 **/
-	p.clone = function() {
+ createjs.Shadow.prototype.clone = function() {
 		return new Shadow(this.color, this.offsetX, this.offsetY, this.blur);
 	};
 	
 
-	createjs.Shadow = Shadow;
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/display/Shape.js EaselJS-0.8.0/src/easeljs/display/Shape.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/display/Shape.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/display/Shape.js	2016-05-31 11:03:08.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -57,11 +53,11 @@
 	 *      shape.graphics.beginFill("#ff0000").drawRect(0, 0, 100, 100);
 	 *
 	 * @class Shape
-	 * @extends DisplayObject
+	 * @extends createjs.DisplayObject
 	 * @constructor
-	 * @param {Graphics} graphics Optional. The graphics instance to display. If null, a new Graphics instance will be created.
+	 * @param {createjs.Graphics} graphics Optional. The graphics instance to display. If null, a new Graphics instance will be created.
 	 **/
-	function Shape(graphics) {
+	createjs.Shape = function(graphics) {
 		this.DisplayObject_constructor();
 		
 		
@@ -73,10 +69,10 @@
 		 **/
 		this.graphics = graphics ? graphics : new createjs.Graphics();
 	}
-	var p = createjs.extend(Shape, createjs.DisplayObject);
+	
 
 	// TODO: deprecated
-	// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
+	// createjs.Shape.prototype.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
 
 
 // public methods:
@@ -87,7 +83,7 @@
 	 * @method isVisible
 	 * @return {Boolean} Boolean indicating whether the Shape would be visible if drawn to a canvas
 	 **/
-	p.isVisible = function() {
+ createjs.Shape.prototype.isVisible = function() {
 		var hasContent = this.cacheCanvas || (this.graphics && !this.graphics.isEmpty());
 		return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);
 	};
@@ -103,20 +99,20 @@
 	 * used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).
 	 * @return {Boolean}
 	 **/
-	p.draw = function(ctx, ignoreCache) {
+ createjs.Shape.prototype.draw = function(ctx, ignoreCache) {
 		if (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }
 		this.graphics.draw(ctx, this);
 		return true;
 	};
 
 	/**
-	 * Returns a clone of this Shape. Some properties that are specific to this instance's current context are reverted to
+	 * Returns a clone of this createjs.Shape. Some properties that are specific to this instance's current context are reverted to
 	 * their defaults (for example .parent).
 	 * @method clone
 	 * @param {Boolean} recursive If true, this Shape's {{#crossLink "Graphics"}}{{/crossLink}} instance will also be
-	 * cloned. If false, the Graphics instance will be shared with the new Shape.
+	 * cloned. If false, the Graphics instance will be shared with the new createjs.Shape.
 	 **/
-	p.clone = function(recursive) {
+ createjs.Shape.prototype.clone = function(recursive) {
 		var g = (recursive && this.graphics) ? this.graphics.clone() : this.graphics;
 		return  this._cloneProps(new Shape(g));
 	};
@@ -126,10 +122,10 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.Shape.prototype.toString = function() {
 		return "[Shape (name="+  this.name +")]";
 	};
 
 
-	createjs.Shape = createjs.promote(Shape, "DisplayObject");
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/display/Sprite.js EaselJS-0.8.0/src/easeljs/display/Sprite.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/display/Sprite.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/display/Sprite.js	2016-05-31 11:03:07.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -55,13 +51,13 @@
 	 * only the first defined frame defined in the sprite sheet will be displayed.
 	 *
 	 * @class Sprite
-	 * @extends DisplayObject
+	 * @extends createjs.DisplayObject
 	 * @constructor
-	 * @param {SpriteSheet} spriteSheet The SpriteSheet instance to play back. This includes the source image(s), frame
+	 * @param {createjs.SpriteSheet} spriteSheet The SpriteSheet instance to play back. This includes the source image(s), frame
 	 * dimensions, and frame data. See {{#crossLink "SpriteSheet"}}{{/crossLink}} for more information.
 	 * @param {String|Number} [frameOrAnimation] The frame number or animation to play initially.
 	 **/
-	function Sprite(spriteSheet, frameOrAnimation) {
+	createjs.Sprite = function(spriteSheet, frameOrAnimation) {
 		this.DisplayObject_constructor();
 		
 		
@@ -98,7 +94,7 @@
 		 * The SpriteSheet instance to play back. This includes the source image, frame dimensions, and frame
 		 * data. See {{#crossLink "SpriteSheet"}}{{/crossLink}} for more information.
 		 * @property spriteSheet
-		 * @type {SpriteSheet}
+		 * @type {createjs.SpriteSheet}
 		 * @readonly
 		 **/
 		this.spriteSheet = spriteSheet;
@@ -165,10 +161,10 @@
 		
 		if (frameOrAnimation) { this.gotoAndPlay(frameOrAnimation); }
 	}
-	var p = createjs.extend(Sprite, createjs.DisplayObject);
+	
 
 	// TODO: deprecated
-	// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
+	// createjs.Sprite.prototype.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
 
 
 // events:
@@ -199,7 +195,7 @@
 	 * @method isVisible
 	 * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas
 	 **/
-	p.isVisible = function() {
+ createjs.Sprite.prototype.isVisible = function() {
 		var hasContent = this.cacheCanvas || this.spriteSheet.complete;
 		return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);
 	};
@@ -214,7 +210,7 @@
 	 * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back
 	 * into itself).
 	 **/
-	p.draw = function(ctx, ignoreCache) {
+ createjs.Sprite.prototype.draw = function(ctx, ignoreCache) {
 		if (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }
 		this._normalizeFrame();
 		var o = this.spriteSheet.getFrame(this._currentFrame|0);
@@ -251,7 +247,7 @@
 	 * unchanged.
 	 * @method play
 	 **/
-	p.play = function() {
+ createjs.Sprite.prototype.play = function() {
 		this.paused = false;
 	};
 
@@ -261,7 +257,7 @@
 	 * will resume playback.
 	 * @method stop
 	 **/
-	p.stop = function() {
+ createjs.Sprite.prototype.stop = function() {
 		this.paused = true;
 	};
 
@@ -271,7 +267,7 @@
 	 * @param {String|Number} frameOrAnimation The frame number or animation name that the playhead should move to
 	 * and begin playing.
 	 **/
-	p.gotoAndPlay = function(frameOrAnimation) {
+ createjs.Sprite.prototype.gotoAndPlay = function(frameOrAnimation) {
 		this.paused = false;
 		this._skipAdvance = true;
 		this._goto(frameOrAnimation);
@@ -283,18 +279,18 @@
 	 * @param {String|Number} frameOrAnimation The frame number or animation name that the playhead should move to
 	 * and stop.
 	 **/
-	p.gotoAndStop = function(frameOrAnimation) {
+ createjs.Sprite.prototype.gotoAndStop = function(frameOrAnimation) {
 		this.paused = true;
 		this._goto(frameOrAnimation);
 	};
 
 	/**
 	 * Advances the playhead. This occurs automatically each tick by default.
-	 * @param [time] {Number} The amount of time in ms to advance by. Only applicable if framerate is set on the Sprite
+	 * @param {Number} time The amount of time in ms to advance by. Only applicable if framerate is set on the Sprite
 	 * or its SpriteSheet.
 	 * @method advance
 	*/
-	p.advance = function(time) {
+ createjs.Sprite.prototype.advance = function(time) {
 		var fps = this.framerate || this.spriteSheet.framerate;
 		var t = (fps && time != null) ? time/(1000/fps) : 1;
 		this._normalizeFrame(t);
@@ -307,10 +303,10 @@
 	 *
 	 * Also see the SpriteSheet {{#crossLink "SpriteSheet/getFrameBounds"}}{{/crossLink}} method.
 	 * @method getBounds
-	 * @return {Rectangle} A Rectangle instance. Returns null if the frame does not exist, or the image is not fully
+	 * @return {createjs.Rectangle} A Rectangle instance. Returns null if the frame does not exist, or the image is not fully
 	 * loaded.
 	 **/
-	p.getBounds = function() {
+ createjs.Sprite.prototype.getBounds = function() {
 		// TODO: should this normalizeFrame?
 		return this.DisplayObject_getBounds() || this.spriteSheet.getFrameBounds(this.currentFrame, this._rectangle);
 	};
@@ -319,9 +315,9 @@
 	 * Returns a clone of the Sprite instance. Note that the same SpriteSheet is shared between cloned
 	 * instances.
 	 * @method clone
-	 * @return {Sprite} a clone of the Sprite instance.
+	 * @return {createjs.Sprite} a clone of the Sprite instance.
 	 **/
-	p.clone = function() {
+ createjs.Sprite.prototype.clone = function() {
 		return this._cloneProps(new Sprite(this.spriteSheet));
 	};
 
@@ -330,18 +326,18 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.Sprite.prototype.toString = function() {
 		return "[Sprite (name="+  this.name +")]";
 	};
 
 // private methods:
 	/**
 	 * @method _cloneProps
-	 * @param {Sprite} o
-	 * @return {Sprite} o
+	 * @param {createjs.Sprite} o
+	 * @return {createjs.Sprite} o
 	 * @protected
 	 **/
-	p._cloneProps = function(o) {
+ createjs.Sprite.prototype._cloneProps = function(o) {
 		this.DisplayObject__cloneProps(o);
 		o.currentFrame = this.currentFrame;
 		o.currentAnimation = this.currentAnimation;
@@ -362,7 +358,7 @@
 	 * @protected
 	 * @method _tick
 	 **/
-	p._tick = function(evtObj) {
+ createjs.Sprite.prototype._tick = function(evtObj) {
 		if (!this.paused) {
 			if (!this._skipAdvance) { this.advance(evtObj&&evtObj.delta); }
 			this._skipAdvance = false;
@@ -376,7 +372,7 @@
 	 * @protected
 	 * @method _normalizeFrame
 	 **/
-	p._normalizeFrame = function(frameDelta) {
+ createjs.Sprite.prototype._normalizeFrame = function(frameDelta) {
 		frameDelta = frameDelta || 0;
 		var animation = this._animation;
 		var paused = this.paused;
@@ -429,7 +425,7 @@
 	 * @private
 	 * @type {Function}
 	 **/
-	p._dispatchAnimationEnd = function(animation, frame, paused, next, end) {
+ createjs.Sprite.prototype._dispatchAnimationEnd = function(animation, frame, paused, next, end) {
 		var name = animation ? animation.name : null;
 		if (this.hasEventListener("animationend")) {
 			var evt = new createjs.Event("animationend");
@@ -451,7 +447,7 @@
 	 * @param {Boolean} [frame] The frame of the animation to go to. Defaults to 0.
 	 * @protected
 	 **/
-	p._goto = function(frameOrAnimation, frame) {
+ createjs.Sprite.prototype._goto = function(frameOrAnimation, frame) {
 		this.currentAnimationFrame = 0;
 		if (isNaN(frameOrAnimation)) {
 			var data = this.spriteSheet.getAnimation(frameOrAnimation);
@@ -468,5 +464,5 @@
 	};
 
 
-	createjs.Sprite = createjs.promote(Sprite, "DisplayObject");
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/display/SpriteContainer.js EaselJS-0.8.0/src/easeljs/display/SpriteContainer.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/display/SpriteContainer.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/display/SpriteContainer.js	2016-05-31 11:03:08.000000000 +0200
@@ -27,10 +27,6 @@
 */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 	/**
@@ -57,11 +53,11 @@
 	 * <strong>Note:</strong> SpriteContainer is not included in the minified version of EaselJS.
 	 *
 	 * @class SpriteContainer
-	 * @extends Container
+	 * @extends createjs.Container
 	 * @constructor
-	 * @param {SpriteSheet} [spriteSheet] The spriteSheet to use for this SpriteContainer and its children.
+	 * @param {createjs.SpriteSheet} [spriteSheet] The spriteSheet to use for this SpriteContainer and its children.
 	 **/
-	function SpriteContainer(spriteSheet) {
+	createjs.SpriteContainer = function(spriteSheet) {
 		this.Container_constructor();
 		
 		
@@ -69,12 +65,12 @@
 		/**
 		 * The SpriteSheet that this container enforces use of.
 		 * @property spriteSheet
-		 * @type {SpriteSheet}
+		 * @type {createjs.SpriteSheet}
 		 * @readonly
 		 **/
 		this.spriteSheet = spriteSheet;
 	}
-	var p = createjs.extend(SpriteContainer, createjs.Container);
+	
 
 	/**
 	 * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.
@@ -87,7 +83,7 @@
 	 * @protected
 	 * @deprecated
 	 */
-	// p.initialize = function() {}; // searchable for devs wondering where it is.
+	// createjs.SpriteContainer.prototype.initialize = function() {}; // searchable for devs wondering where it is.
 	
 
 // public methods:
@@ -105,10 +101,10 @@
 	 *      container.addChild(bitmapInstance, shapeInstance, textInstance);
 	 *
 	 * @method addChild
-	 * @param {DisplayObject} child The display object to add.
-	 * @return {DisplayObject} The child that was added, or the last child if multiple children were added.
+	 * @param {createjs.DisplayObject} child The display object to add.
+	 * @return {createjs.DisplayObject} The child that was added, or the last child if multiple children were added.
 	 **/
-	p.addChild = function(child) {
+ createjs.SpriteContainer.prototype.addChild = function(child) {
 		if (child == null) { return child; }
 		if (arguments.length > 1) {
 			return this.addChildAt.apply(this, Array.prototype.slice.call(arguments).concat([this.children.length]));
@@ -139,11 +135,11 @@
 	 * This would also bump otherShape's index up by one. Fails silently if the index is out of range.
 	 *
 	 * @method addChildAt
-	 * @param {DisplayObject} child The display object to add.
+	 * @param {createjs.DisplayObject} child The display object to add.
 	 * @param {Number} index The index to add the child at.
-	 * @return {DisplayObject} Returns the last child that was added, or the last child if multiple children were added.
+	 * @return {createjs.DisplayObject} Returns the last child that was added, or the last child if multiple children were added.
 	 **/
-	p.addChildAt = function(child, index) {
+ createjs.SpriteContainer.prototype.addChildAt = function(child, index) {
 		var l = arguments.length;
 		var indx = arguments[l-1]; // can't use the same name as the index param or it replaces arguments[1]
 		if (indx < 0 || indx > this.children.length) { return arguments[l-2]; }
@@ -152,7 +148,7 @@
 			return arguments[l-2];
 		}
 		if (child._spritestage_compatibility >= 1) {
-			// The child is compatible with SpriteStage/SpriteContainer.
+			// The child is compatible with SpriteStage/createjs.SpriteContainer.
 		} else {
 			console && console.log("Error: You can only add children of type SpriteContainer, Sprite, BitmapText, or DOMElement [" + child.toString() + "]");
 			return child;
@@ -176,10 +172,10 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.SpriteContainer.prototype.toString = function() {
 		return "[SpriteContainer (name="+  this.name +")]";
 	};
 
 
-	createjs.SpriteContainer = createjs.promote(SpriteContainer, "Container");
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/display/SpriteSheet.js EaselJS-0.8.0/src/easeljs/display/SpriteSheet.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/display/SpriteSheet.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/display/SpriteSheet.js	2016-05-31 11:03:07.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -159,9 +155,9 @@
 	 * @class SpriteSheet
 	 * @constructor
 	 * @param {Object} data An object describing the SpriteSheet data.
-	 * @extends EventDispatcher
+	 * @extends createjs.EventDispatcher
 	 **/
-	function SpriteSheet(data) {
+	createjs.SpriteSheet = function(data) {
 		this.EventDispatcher_constructor();
 
 
@@ -175,7 +171,7 @@
 		this.complete = true;
 
 		/**
-		 * Specifies the framerate to use by default for Sprite instances using the SpriteSheet. See
+		 * Specifies the framerate to use by default for Sprite instances using the createjs.SpriteSheet. See
 		 * Sprite.framerate for more information.
 		 * @property framerate
 		 * @type Number
@@ -272,10 +268,10 @@
 		// setup:
 		this._parseData(data);
 	}
-	var p = createjs.extend(SpriteSheet, createjs.EventDispatcher);
+	
 
 	// TODO: deprecated
-	// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
+	// createjs.SpriteSheet.prototype.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
 
 
 // events:
@@ -312,7 +308,7 @@
 	 * @return {Array}
 	 * @deprecated
 	 **/
-	p.getAnimations = function() {
+ createjs.SpriteSheet.prototype.getAnimations = function() {
 		return this._animations.slice();
 	};
 
@@ -322,11 +318,7 @@
 	 * @type {Array}
 	 * @readonly
 	 **/
-	try {
-		Object.defineProperties(p, {
-			animations: { get: p.getAnimations }
-		});
-	} catch (e) {}
+createjs.SpriteSheet.prototype.animations;
 
 
 // public methods:
@@ -338,7 +330,7 @@
 	 * @param {String} animation The name of the animation to get a frame count for.
 	 * @return {Number} The number of frames in the animation, or in the entire sprite sheet if the animation param is omitted.
 	 */
-	p.getNumFrames = function(animation) {
+ createjs.SpriteSheet.prototype.getNumFrames = function(animation) {
 		if (animation == null) {
 			return this._frames ? this._frames.length : this._numFrames || 0;
 		} else {
@@ -360,7 +352,7 @@
 	 * @param {String} name The name of the animation to get.
 	 * @return {Object} a generic object with frames, speed, name, and next properties.
 	 **/
-	p.getAnimation = function(name) {
+ createjs.SpriteSheet.prototype.getAnimation = function(name) {
 		return this._data[name];
 	};
 
@@ -375,7 +367,7 @@
 	 * @param {Number} frameIndex The index of the frame.
 	 * @return {Object} a generic object with image and rect properties. Returns null if the frame does not exist.
 	 **/
-	p.getFrame = function(frameIndex) {
+ createjs.SpriteSheet.prototype.getFrame = function(frameIndex) {
 		var frame;
 		if (this._frames && (frame=this._frames[frameIndex])) { return frame; }
 		return null;
@@ -389,10 +381,10 @@
 	 *
 	 * @method getFrameBounds
 	 * @param {Number} frameIndex The index of the frame.
-	 * @param {Rectangle} [rectangle] A Rectangle instance to copy the values into. By default a new instance is created.
-	 * @return {Rectangle} A Rectangle instance. Returns null if the frame does not exist, or the image is not fully loaded.
+	 * @param {createjs.Rectangle} [rectangle] A Rectangle instance to copy the values into. By default a new instance is created.
+	 * @return {createjs.Rectangle} A Rectangle instance. Returns null if the frame does not exist, or the image is not fully loaded.
 	 **/
-	p.getFrameBounds = function(frameIndex, rectangle) {
+ createjs.SpriteSheet.prototype.getFrameBounds = function(frameIndex, rectangle) {
 		var frame = this.getFrame(frameIndex);
 		return frame ? (rectangle||new createjs.Rectangle()).setValues(-frame.regX, -frame.regY, frame.rect.width, frame.rect.height) : null;
 	};
@@ -402,7 +394,7 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.SpriteSheet.prototype.toString = function() {
 		return "[SpriteSheet]";
 	};
 
@@ -410,7 +402,7 @@
 	 * SpriteSheet cannot be cloned. A SpriteSheet can be shared by multiple Sprite instances without cloning it.
 	 * @method clone
 	 **/
-	p.clone = function() {
+ createjs.SpriteSheet.prototype.clone = function() {
 		throw("SpriteSheet cannot be cloned.")
 	};
 
@@ -420,7 +412,7 @@
 	 * @param {Object} data An object describing the SpriteSheet data.
 	 * @protected
 	 **/
-	p._parseData = function(data) {
+ createjs.SpriteSheet.prototype._parseData = function(data) {
 		var i,l,o,a;
 		if (data == null) { return; }
 
@@ -505,7 +497,7 @@
 	 * @method _handleImageLoad
 	 * @protected
 	 **/
-	p._handleImageLoad = function() {
+ createjs.SpriteSheet.prototype._handleImageLoad = function() {
 		if (--this._loadCount == 0) {
 			this._calculateFrames();
 			this.complete = true;
@@ -517,7 +509,7 @@
 	 * @method _calculateFrames
 	 * @protected
 	 **/
-	p._calculateFrames = function() {
+ createjs.SpriteSheet.prototype._calculateFrames = function() {
 		if (this._frames || this._frameWidth == 0) { return; }
 
 		this._frames = [];
@@ -551,5 +543,5 @@
 	};
 
 
-	createjs.SpriteSheet = createjs.promote(SpriteSheet, "EventDispatcher");
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/display/SpriteStage.js EaselJS-0.8.0/src/easeljs/display/SpriteStage.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/display/SpriteStage.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/display/SpriteStage.js	2016-05-31 11:03:08.000000000 +0200
@@ -31,13 +31,9 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
 
-(function() {
-	"use strict";
 
-
-	// Set which classes are compatible with SpriteStage.
+	// Set which classes are compatible with createjs.SpriteStage.
 	// The order is important!!! If it's changed/appended, make sure that any logic that 
 	// checks _spritestage_compatibility accounts for it!
 	[createjs.SpriteContainer, createjs.Sprite, createjs.BitmapText, createjs.Bitmap, createjs.DOMElement].forEach(function(_class, index) {
@@ -73,14 +69,14 @@
 	 * <strong>Note:</strong> SpriteStage is not included in the minified version of EaselJS.
 	 *
 	 * @class SpriteStage
-	 * @extends Stage
+	 * @extends createjs.Stage
 	 * @constructor
 	 * @param {HTMLCanvasElement | String | Object} canvas A canvas object that the SpriteStage will render to, or the string id
 	 * of a canvas object in the current document.
-	 * @param {Boolean} preserveDrawingBuffer If true, the canvas is NOT auto-cleared by WebGL (spec discourages true). Useful if you want to use p.autoClear = false.
+	 * @param {Boolean} preserveDrawingBuffer If true, the canvas is NOT auto-cleared by WebGL (spec discourages true). Useful if you want to use createjs.SpriteStage.prototype.autoClear = false.
 	 * @param {Boolean} antialias Specifies whether or not the browser's WebGL implementation should try to perform antialiasing.
 	 **/
-	function SpriteStage(canvas, preserveDrawingBuffer, antialias) {
+	createjs.SpriteStage = function(canvas, preserveDrawingBuffer, antialias) {
 		this.Stage_constructor(canvas);
 		
 		
@@ -263,15 +259,15 @@
 	// setup:
 		this._initializeWebGL();
 	}
-	var p = createjs.extend(SpriteStage, createjs.Stage);
+	
 
 	// TODO: deprecated
-	// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
+	// createjs.SpriteStage.prototype.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
 
 
 // constants:
 	/**
-	 * The number of properties defined per vertex in p._verticesBuffer.
+	 * The number of properties defined per vertex in createjs.SpriteStage.prototype._verticesBuffer.
 	 * x, y, textureU, textureV, alpha
 	 * @property NUM_VERTEX_PROPERTIES
 	 * @static
@@ -279,7 +275,7 @@
 	 * @type {Number}
 	 * @readonly
 	 **/
-	SpriteStage.NUM_VERTEX_PROPERTIES = 5;
+	createjs.SpriteStage.NUM_VERTEX_PROPERTIES = 5;
 
 	/**
 	 * The number of points in a box...obviously :)
@@ -289,7 +285,7 @@
 	 * @type {Number}
 	 * @readonly
 	 **/
-	SpriteStage.POINTS_PER_BOX = 4;
+	createjs.SpriteStage.POINTS_PER_BOX = 4;
 
 	/**
 	 * The number of vertex properties per box.
@@ -299,7 +295,7 @@
 	 * @type {Number}
 	 * @readonly
 	 **/
-	SpriteStage.NUM_VERTEX_PROPERTIES_PER_BOX = SpriteStage.POINTS_PER_BOX * SpriteStage.NUM_VERTEX_PROPERTIES;
+	createjs.SpriteStage.NUM_VERTEX_PROPERTIES_PER_BOX = createjs.SpriteStage.POINTS_PER_BOX * createjs.SpriteStage.NUM_VERTEX_PROPERTIES;
 
 	/**
 	 * The number of indices needed to define a box using triangles.
@@ -310,7 +306,7 @@
 	 * @type {Number}
 	 * @readonly
 	 **/
-	SpriteStage.INDICES_PER_BOX = 6;
+	createjs.SpriteStage.INDICES_PER_BOX = 6;
 
 	/**
 	 * The maximum size WebGL allows for element index numbers: 16 bit unsigned integer
@@ -320,12 +316,12 @@
 	 * @type {Number}
 	 * @readonly
 	 **/
-	SpriteStage.MAX_INDEX_SIZE = Math.pow(2, 16);
+	createjs.SpriteStage.MAX_INDEX_SIZE = Math.pow(2, 16);
 
 	/**
-	 * The amount used to increment p._maxBoxesPointsPerDraw when the maximum has been reached.
-	 * If the maximum size of element index WebGL allows for (SpriteStage.MAX_INDEX_SIZE) was used,
-	 * the array size for p._vertices would equal 1280kb and p._indices 192kb. But since mobile phones
+	 * The amount used to increment createjs.SpriteStage.prototype._maxBoxesPointsPerDraw when the maximum has been reached.
+	 * If the maximum size of element index WebGL allows for (createjs.SpriteStage.MAX_INDEX_SIZE) was used,
+	 * the array size for createjs.SpriteStage.prototype._vertices would equal 1280kb and createjs.SpriteStage.prototype._indices 192kb. But since mobile phones
 	 * with less memory need to be accounted for, the maximum size is somewhat arbitrarily divided by 4,
 	 * reducing the array sizes to 320kb and 48kb respectively.
 	 * @property MAX_BOXES_POINTS_INCREMENT
@@ -334,7 +330,7 @@
 	 * @type {Number}
 	 * @readonly
 	 **/
-	SpriteStage.MAX_BOXES_POINTS_INCREMENT = SpriteStage.MAX_INDEX_SIZE / 4;
+	createjs.SpriteStage.MAX_BOXES_POINTS_INCREMENT = createjs.SpriteStage.MAX_INDEX_SIZE / 4;
 
 
 // getter / setters:
@@ -345,15 +341,11 @@
 	 * @property isWebGL
 	 * @type {Boolean}
 	 **/
-	p._get_isWebGL = function() {
+ createjs.SpriteStage.prototype._get_isWebGL = function() {
 		return !!this._webGLContext;
 	};
 	
-	try {
-		Object.defineProperties(p, {
-			isWebGL: { get: p._get_isWebGL }
-		});
-	} catch (e) {} // TODO: use Log
+createjs.SpriteStage.prototype.isWebGL; // TODO: use Log
 
 
 // public methods:
@@ -370,10 +362,10 @@
 	 *      container.addChild(bitmapInstance, shapeInstance, textInstance);
 	 *
 	 * @method addChild
-	 * @param {DisplayObject} child The display object to add.
-	 * @return {DisplayObject} The child that was added, or the last child if multiple children were added.
+	 * @param {createjs.DisplayObject} child The display object to add.
+	 * @return {createjs.DisplayObject} The child that was added, or the last child if multiple children were added.
 	 **/
-	p.addChild = function(child) {
+ createjs.SpriteStage.prototype.addChild = function(child) {
 		if (child == null) { return child; }
 		if (arguments.length > 1) {
 			return this.addChildAt.apply(this, Array.prototype.slice.call(arguments).concat([this.children.length]));
@@ -404,11 +396,11 @@
 	 * This would also bump otherShape's index up by one. Fails silently if the index is out of range.
 	 *
 	 * @method addChildAt
-	 * @param {DisplayObject} child The display object to add.
+	 * @param {createjs.DisplayObject} child The display object to add.
 	 * @param {Number} index The index to add the child at.
-	 * @return {DisplayObject} Returns the last child that was added, or the last child if multiple children were added.
+	 * @return {createjs.DisplayObject} Returns the last child that was added, or the last child if multiple children were added.
 	 **/
-	p.addChildAt = function(child, index) {
+ createjs.SpriteStage.prototype.addChildAt = function(child, index) {
 		var l = arguments.length;
 		var indx = arguments[l-1]; // can't use the same name as the index param or it replaces arguments[1]
 		if (indx < 0 || indx > this.children.length) { return arguments[l-2]; }
@@ -417,7 +409,7 @@
 			return arguments[l-2];
 		}
 		if (child._spritestage_compatibility >= 1) {
-			// The child is compatible with SpriteStage.
+			// The child is compatible with createjs.SpriteStage.
 		} else {
 			console && console.log("Error: You can only add children of type SpriteContainer, Sprite, Bitmap, BitmapText, or DOMElement. [" + child.toString() + "]");
 			return child;
@@ -434,7 +426,7 @@
 	};
 
 	/** docced in super class **/
-	p.update = function(props) {
+ createjs.SpriteStage.prototype.update = function(props) {
 		if (!this.canvas) { return; }
 		if (this.tickOnUpdate) { this.tick(props); }
 		this.dispatchEvent("drawstart"); // TODO: make cancellable?
@@ -458,7 +450,7 @@
 	 * Clears the target canvas. Useful if {{#crossLink "Stage/autoClear:property"}}{{/crossLink}} is set to `false`.
 	 * @method clear
 	 **/
-	p.clear = function() {
+ createjs.SpriteStage.prototype.clear = function() {
 		if (!this.canvas) { return; }
 		var ctx = this._setWebGLContext();
 		if (ctx) {
@@ -484,7 +476,7 @@
 	 * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back
 	 * into itself).
 	 **/
-	p.draw = function(ctx, ignoreCache) {
+ createjs.SpriteStage.prototype.draw = function(ctx, ignoreCache) {
 		if (typeof WebGLRenderingContext !== 'undefined' && (ctx === this._webGLContext || ctx instanceof WebGLRenderingContext)) {		
 			this._drawWebGLKids(this.children, ctx);
 
@@ -505,7 +497,7 @@
 	 * @param {Number} width
 	 * @param {Number} height
 	 **/
-	p.updateViewport = function (width, height) {
+ createjs.SpriteStage.prototype.updateViewport = function (width, height) {
 		this._viewportWidth = width;
 		this._viewportHeight = height;
 
@@ -525,7 +517,7 @@
 	 * @method clearImageTexture
 	 * @param  {Image} image
 	 **/
-	p.clearImageTexture = function(image) {
+ createjs.SpriteStage.prototype.clearImageTexture = function(image) {
 		image.__easeljs_texture = null;
 	};
 
@@ -534,7 +526,7 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.SpriteStage.prototype.toString = function() {
 		return "[SpriteStage (name="+  this.name +")]";
 	};
 
@@ -545,7 +537,7 @@
 	 * @method _initializeWebGL
 	 * @protected
 	 **/
-	p._initializeWebGL = function() {
+ createjs.SpriteStage.prototype._initializeWebGL = function() {
 		this._clearColor = { r: 0.0, g: 0.0, b: 0.0, a: 0.0 };
 
 		this._setWebGLContext();
@@ -557,7 +549,7 @@
 	 * @return {WebGLRenderingContext}   The newly created context.
 	 * @protected
 	 **/
-	p._setWebGLContext = function() {
+ createjs.SpriteStage.prototype._setWebGLContext = function() {
 		if (this.canvas) {
 			if (!this._webGLContext || this._webGLContext.canvas !== this.canvas) {
 				// A context hasn't been defined yet,
@@ -575,7 +567,7 @@
 	 * @method _initializeWebGLContext
 	 * @protected
 	 **/
-	p._initializeWebGLContext = function() {
+ createjs.SpriteStage.prototype._initializeWebGLContext = function() {
 		var options = {
 			depth: false, // Disable the depth buffer as it isn't used.
 			alpha: true, // Make the canvas background transparent.
@@ -628,7 +620,7 @@
 	 * @param {Number} a A number between 0 and 1.
 	 * @protected
 	 **/
-	p._setClearColor = function (r, g, b, a) {
+ createjs.SpriteStage.prototype._setClearColor = function (r, g, b, a) {
 		this._clearColor.r = r;
 		this._clearColor.g = g;
 		this._clearColor.b = b;
@@ -645,7 +637,7 @@
 	 * @param {WebGLRenderingContext} ctx
 	 * @protected
 	 **/
-	p._createShaderProgram = function(ctx) {
+ createjs.SpriteStage.prototype._createShaderProgram = function(ctx) {
 
 
 		var fragmentShader = this._createShader(ctx, ctx.FRAGMENT_SHADER,
@@ -713,7 +705,7 @@
 	 * @return {WebGLShader}
 	 * @protected
 	 **/
-	p._createShader = function(ctx, type, str) {
+ createjs.SpriteStage.prototype._createShader = function(ctx, type, str) {
 		var shader = ctx.createShader(type);
 		ctx.shaderSource(shader, str);
 		ctx.compileShader(shader);
@@ -733,17 +725,17 @@
 	 * @param {WebGLRenderingContext} ctx
 	 * @protected
 	 **/
-	p._createBuffers = function(ctx) {
+ createjs.SpriteStage.prototype._createBuffers = function(ctx) {
 		this._verticesBuffer = ctx.createBuffer();
 		ctx.bindBuffer(ctx.ARRAY_BUFFER, this._verticesBuffer);
 
-		var byteCount = SpriteStage.NUM_VERTEX_PROPERTIES * 4; // ctx.FLOAT = 4 bytes
+		var byteCount = createjs.SpriteStage.NUM_VERTEX_PROPERTIES * 4; // ctx.FLOAT = 4 bytes
 		ctx.vertexAttribPointer(this._shaderProgram.vertexPositionAttribute, 2, ctx.FLOAT, ctx.FALSE, byteCount, 0);
 		ctx.vertexAttribPointer(this._shaderProgram.textureCoordAttribute, 3, ctx.FLOAT, ctx.FALSE, byteCount, 2 * 4);
 
 		this._indicesBuffer = ctx.createBuffer();
 
-		this._setMaxBoxesPoints(ctx, SpriteStage.MAX_BOXES_POINTS_INCREMENT);
+		this._setMaxBoxesPoints(ctx, createjs.SpriteStage.MAX_BOXES_POINTS_INCREMENT);
 	};
 
 	/**
@@ -754,19 +746,19 @@
 	 * @param {Number} value              The new this._maxBoxesPointsPerDraw value.
 	 * @protected
 	 **/
-	p._setMaxBoxesPoints = function (ctx, value) {
+ createjs.SpriteStage.prototype._setMaxBoxesPoints = function (ctx, value) {
 		this._maxBoxesPointsPerDraw = value;
-		this._maxBoxesPerDraw = (this._maxBoxesPointsPerDraw / SpriteStage.POINTS_PER_BOX) | 0;
-		this._maxIndicesPerDraw = this._maxBoxesPerDraw * SpriteStage.INDICES_PER_BOX;
+		this._maxBoxesPerDraw = (this._maxBoxesPointsPerDraw / createjs.SpriteStage.POINTS_PER_BOX) | 0;
+		this._maxIndicesPerDraw = this._maxBoxesPerDraw * createjs.SpriteStage.INDICES_PER_BOX;
 
 		ctx.bindBuffer(ctx.ARRAY_BUFFER, this._verticesBuffer);
-		this._vertices = new Float32Array(this._maxBoxesPerDraw * SpriteStage.NUM_VERTEX_PROPERTIES_PER_BOX);
+		this._vertices = new Float32Array(this._maxBoxesPerDraw * createjs.SpriteStage.NUM_VERTEX_PROPERTIES_PER_BOX);
 		ctx.bufferData(ctx.ARRAY_BUFFER, this._vertices, ctx.DYNAMIC_DRAW);
 
 		// Set up indices for multiple boxes:
 		this._indices = new Uint16Array(this._maxIndicesPerDraw); // Indices are set once and reused.
-		for (var i = 0, l = this._indices.length; i < l; i += SpriteStage.INDICES_PER_BOX) {
-			var j = i * SpriteStage.POINTS_PER_BOX / SpriteStage.INDICES_PER_BOX;
+		for (var i = 0, l = this._indices.length; i < l; i += createjs.SpriteStage.INDICES_PER_BOX) {
+			var j = i * createjs.SpriteStage.POINTS_PER_BOX / createjs.SpriteStage.INDICES_PER_BOX;
 
 			// Indices for the 2 triangles that make the box:
 			this._indices[i]     = j;
@@ -788,7 +780,7 @@
 	 * @return {WebGLTexture}
 	 * @protected
 	 **/
-	p._setUpKidTexture = function (ctx, kid) {
+ createjs.SpriteStage.prototype._setUpKidTexture = function (ctx, kid) {
 		if (!ctx) { return null; }
 
 		var image,
@@ -822,17 +814,17 @@
 	 * @method _drawWebGLKids
 	 * @param {Array} kids                The list of kids to draw.
 	 * @param {WebGLRenderingContext} ctx The canvas WebGL context object to draw into.
-	 * @param {Matrix2D} parentMVMatrix   The parent's global transformation matrix.
+	 * @param {createjs.Matrix2D} parentMVMatrix   The parent's global transformation matrix.
 	 * @protected
 	 **/
-	p._drawWebGLKids = function(kids, ctx, parentMVMatrix) {
+ createjs.SpriteStage.prototype._drawWebGLKids = function(kids, ctx, parentMVMatrix) {
 		var kid, mtx,
 			snapToPixelEnabled = this.snapToPixelEnabled,
 			image = null,
 			leftSide = 0, topSide = 0, rightSide = 0, bottomSide = 0,
 			vertices = this._vertices,
-			numVertexPropertiesPerBox = SpriteStage.NUM_VERTEX_PROPERTIES_PER_BOX,
-			maxIndexSize = SpriteStage.MAX_INDEX_SIZE,
+			numVertexPropertiesPerBox = createjs.SpriteStage.NUM_VERTEX_PROPERTIES_PER_BOX,
+			maxIndexSize = createjs.SpriteStage.MAX_INDEX_SIZE,
 			maxBoxIndex = this._maxBoxesPerDraw - 1;
 
 		for (var i = 0, l = kids.length; i < l; i++) {
@@ -948,7 +940,7 @@
 
 					// If possible, increase the amount of boxes that can be used per draw call:
 					if (this._maxBoxesPointsPerDraw < maxIndexSize) {
-						this._setMaxBoxesPoints(ctx, this._maxBoxesPointsPerDraw + SpriteStage.MAX_BOXES_POINTS_INCREMENT);
+						this._setMaxBoxesPoints(ctx, this._maxBoxesPointsPerDraw + createjs.SpriteStage.MAX_BOXES_POINTS_INCREMENT);
 						maxBoxIndex = this._maxBoxesPerDraw - 1;
 					}
 				}
@@ -968,7 +960,7 @@
 	 * @param {WebGLRenderingContext} ctx The canvas WebGL context object to draw into.
 	 * @protected
 	 **/
-	p._drawToGPU = function(ctx) {
+ createjs.SpriteStage.prototype._drawToGPU = function(ctx) {
 		var numBoxes = this._currentBoxIndex + 1;
 
 		ctx.bindBuffer(ctx.ARRAY_BUFFER, this._verticesBuffer);
@@ -976,7 +968,7 @@
 		ctx.bindBuffer(ctx.ELEMENT_ARRAY_BUFFER, this._indicesBuffer);
 		ctx.uniformMatrix3fv(this._shaderProgram.pMatrixUniform, false, this._projectionMatrix);
 		ctx.bufferSubData(ctx.ARRAY_BUFFER, 0, this._vertices);
-		ctx.drawElements(ctx.TRIANGLES, numBoxes * SpriteStage.INDICES_PER_BOX, ctx.UNSIGNED_SHORT, 0);
+		ctx.drawElements(ctx.TRIANGLES, numBoxes * createjs.SpriteStage.INDICES_PER_BOX, ctx.UNSIGNED_SHORT, 0);
 
 		// Reset draw vars:
 		this._currentBoxIndex = -1;
@@ -984,5 +976,5 @@
 	};
 
 
-	createjs.SpriteStage = createjs.promote(SpriteStage, "Stage");
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/display/Stage.js EaselJS-0.8.0/src/easeljs/display/Stage.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/display/Stage.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/display/Stage.js	2016-05-31 11:03:07.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -56,12 +52,12 @@
 	 *      }
 	 *
 	 * @class Stage
-	 * @extends Container
+	 * @extends createjs.Container
 	 * @constructor
 	 * @param {HTMLCanvasElement | String | Object} canvas A canvas object that the Stage will render to, or the string id
 	 * of a canvas object in the current document.
 	 **/
-	function Stage(canvas) {
+	createjs.Stage = function(canvas) {
 		this.Container_constructor();
 	
 	
@@ -89,9 +85,9 @@
 		 * When changing the canvas property you must disable the events on the old canvas, and enable events on the
 		 * new canvas or mouse events will not work as expected. For example:
 		 *
-		 *      myStage.enableDOMEvents(false);
-		 *      myStage.canvas = anotherCanvas;
-		 *      myStage.enableDOMEvents(true);
+		 *      mycreatejs.Stage.enableDOMEvents(false);
+		 *      mycreatejs.Stage.canvas = anotherCanvas;
+		 *      mycreatejs.Stage.enableDOMEvents(true);
 		 *
 		 * @property canvas
 		 * @type HTMLCanvasElement | Object
@@ -120,7 +116,7 @@
 		 * Specifies the area of the stage to affect when calling update. This can be use to selectively
 		 * re-draw specific regions of the canvas. If null, the whole canvas area is drawn.
 		 * @property drawRect
-		 * @type {Rectangle}
+		 * @type {createjs.Rectangle}
 		 */
 		this.drawRect = null;
 	
@@ -171,9 +167,9 @@
 		this.preventSelection = true;
 	
 		/**
-		 * The hitArea property is not supported for Stage.
+		 * The hitArea property is not supported for createjs.Stage.
 		 * @property hitArea
-		 * @type {DisplayObject}
+		 * @type {createjs.DisplayObject}
 		 * @default null
 		 */
 		 
@@ -229,7 +225,7 @@
 	// initialize:
 		this.enableDOMEvents(true);
 	}
-	var p = createjs.extend(Stage, createjs.Container);
+	
 
 	/**
 	 * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.
@@ -242,7 +238,7 @@
 	 * @protected
 	 * @deprecated
 	 */
-	// p.initialize = function() {}; // searchable for devs wondering where it is.
+	// createjs.Stage.prototype.initialize = function() {}; // searchable for devs wondering where it is.
 
 
 // events:
@@ -318,7 +314,7 @@
 	 * This can be useful in cases where you have multiple layered canvases and want user interactions
 	 * events to pass through. For example, this would relay mouse events from topStage to bottomStage:
 	 *
-	 *      topStage.nextStage = bottomStage;
+	 *      topcreatejs.Stage.nextStage = bottomStage;
 	 *
 	 * To disable relaying, set nextStage to null.
 	 * 
@@ -331,32 +327,28 @@
 	 * </OL>
 	 * To illustrate, in this example the targetStage would process mouse over interactions at 10hz (despite passing
 	 * 30 as it's desired frequency):
-	 * 	topStage.nextStage = targetStage;
-	 * 	topStage.enableMouseOver(10);
-	 * 	targetStage.enableMouseOver(30);
+	 * 	topcreatejs.Stage.nextStage = targetStage;
+	 * 	topcreatejs.Stage.enableMouseOver(10);
+	 * 	targetcreatejs.Stage.enableMouseOver(30);
 	 * 
 	 * If the target stage's canvas is completely covered by this stage's canvas, you may also want to disable its
 	 * DOM events using:
 	 * 
-	 *	targetStage.enableDOMEvents(false);
+	 *	targetcreatejs.Stage.enableDOMEvents(false);
 	 * 
 	 * @property nextStage
-	 * @type {Stage}
+	 * @type {createjs.Stage}
 	 **/
-	p._get_nextStage = function() {
+ createjs.Stage.prototype._get_nextStage = function() {
 		return this._nextStage;
 	};
-	p._set_nextStage = function(value) {
-		if (this._nextStage) { this._nextStage._prevStage = null; }
+ createjs.Stage.prototype._set_nextStage = function(value) {
+		if (this._nextStage) { this._nextcreatejs.Stage._prevStage = null; }
 		if (value) { value._prevStage = this; }
 		this._nextStage = value;
 	};
 	
-	try {
-		Object.defineProperties(p, {
-			nextStage: { get: p._get_nextStage, set: p._set_nextStage }
-		});
-	} catch (e) {} // TODO: use Log
+createjs.Stage.prototype.nextStage; // TODO: use Log
 
 
 // public methods:
@@ -368,7 +360,7 @@
 	 * @method update
 	 * @param {Object} [props] Props object to pass to `tick()`. Should usually be a {{#crossLink "Ticker"}}{{/crossLink}} event object, or similar object with a delta property.
 	 **/
-	p.update = function(props) {
+ createjs.Stage.prototype.update = function(props) {
 		if (!this.canvas) { return; }
 		if (this.tickOnUpdate) { this.tick(props); }
 		if (this.dispatchEvent("drawstart")) { return; }
@@ -408,7 +400,7 @@
 	 * 		var evt = evtObj.clone().set({greeting:"hello", name:"world"});
 	 * 		
 	 * 		// pass it to stage.update():
-	 * 		myStage.update(evt); // subsequently calls tick() with the same param
+	 * 		mycreatejs.Stage.update(evt); // subsequently calls tick() with the same param
 	 * 	}
 	 * 	
 	 * 	// ...
@@ -421,7 +413,7 @@
 	 * @method tick
 	 * @param {Object} [props] An object with properties that should be copied to the event object. Should usually be a Ticker event object, or similar object with a delta property.
 	 **/
-	p.tick = function(props) {
+ createjs.Stage.prototype.tick = function(props) {
 		if (!this.tickEnabled || this.dispatchEvent("tickstart")) { return; }
 		var evtObj = new createjs.Event("tick");
 		if (props) {
@@ -445,7 +437,7 @@
 	 * @property handleEvent
 	 * @type Function
 	 **/
-	p.handleEvent = function(evt) {
+ createjs.Stage.prototype.handleEvent = function(evt) {
 		if (evt.type == "tick") { this.update(evt); }
 	};
 
@@ -453,7 +445,7 @@
 	 * Clears the target canvas. Useful if {{#crossLink "Stage/autoClear:property"}}{{/crossLink}} is set to `false`.
 	 * @method clear
 	 **/
-	p.clear = function() {
+ createjs.Stage.prototype.clear = function() {
 		if (!this.canvas) { return; }
 		var ctx = this.canvas.getContext("2d");
 		ctx.setTransform(1, 0, 0, 1, 0, 0);
@@ -470,7 +462,7 @@
 	 * is passed in, or if the browser does not support the specified MIME type, the default value will be used.
 	 * @return {String} a Base64 encoded image.
 	 **/
-	p.toDataURL = function(backgroundColor, mimeType) {
+ createjs.Stage.prototype.toDataURL = function(backgroundColor, mimeType) {
 		var data, ctx = this.canvas.getContext('2d'), w = this.canvas.width, h = this.canvas.height;
 
 		if (backgroundColor) {
@@ -509,7 +501,7 @@
 	 * mouse over/out events. Set to 0 to disable mouse over events completely. Maximum is 50. A lower frequency is less
 	 * responsive, but uses less CPU.
 	 **/
-	p.enableMouseOver = function(frequency) {
+ createjs.Stage.prototype.enableMouseOver = function(frequency) {
 		if (this._mouseOverIntervalID) {
 			clearInterval(this._mouseOverIntervalID);
 			this._mouseOverIntervalID = null;
@@ -531,14 +523,14 @@
 	 * When changing the canvas property you must disable the events on the old canvas, and enable events on the
 	 * new canvas or mouse events will not work as expected. For example:
 	 *
-	 *      myStage.enableDOMEvents(false);
-	 *      myStage.canvas = anotherCanvas;
-	 *      myStage.enableDOMEvents(true);
+	 *      mycreatejs.Stage.enableDOMEvents(false);
+	 *      mycreatejs.Stage.canvas = anotherCanvas;
+	 *      mycreatejs.Stage.enableDOMEvents(true);
 	 *
 	 * @method enableDOMEvents
 	 * @param {Boolean} [enable=true] Indicates whether to enable or disable the events. Default is true.
 	 **/
-	p.enableDOMEvents = function(enable) {
+ createjs.Stage.prototype.enableDOMEvents = function(enable) {
 		if (enable == null) { enable = true; }
 		var n, o, ls = this._eventListeners;
 		if (!enable && ls) {
@@ -567,7 +559,7 @@
 	 * Stage instances cannot be cloned.
 	 * @method clone
 	 **/
-	p.clone = function() {
+ createjs.Stage.prototype.clone = function() {
 		throw("Stage cannot be cloned.");
 	};
 
@@ -576,7 +568,7 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.Stage.prototype.toString = function() {
 		return "[Stage (name="+  this.name +")]";
 	};
 
@@ -587,7 +579,7 @@
 	 * @protected
 	 * @param {HTMLElement} e
 	 **/
-	p._getElementRect = function(e) {
+ createjs.Stage.prototype._getElementRect = function(e) {
 		var bounds;
 		try { bounds = e.getBoundingClientRect(); } // this can fail on disconnected DOM elements in IE9
 		catch (err) { bounds = {top: e.offsetTop, left: e.offsetLeft, width:e.offsetWidth, height:e.offsetHeight}; }
@@ -615,7 +607,7 @@
 	 * @protected
 	 * @param {Number} id
 	 **/
-	p._getPointerData = function(id) {
+ createjs.Stage.prototype._getPointerData = function(id) {
 		var data = this._pointerData[id];
 		if (!data) { data = this._pointerData[id] = {x:0,y:0}; }
 		return data;
@@ -626,7 +618,7 @@
 	 * @protected
 	 * @param {MouseEvent} e
 	 **/
-	p._handleMouseMove = function(e) {
+ createjs.Stage.prototype._handleMouseMove = function(e) {
 		if(!e){ e = window.event; }
 		this._handlePointerMove(-1, e, e.pageX, e.pageY);
 	};
@@ -638,9 +630,9 @@
 	 * @param {Event} e
 	 * @param {Number} pageX
 	 * @param {Number} pageY
-	 * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.
+	 * @param {createjs.Stage} owner Indicates that the event has already been captured & handled by the indicated stage.
 	 **/
-	p._handlePointerMove = function(id, e, pageX, pageY, owner) {
+ createjs.Stage.prototype._handlePointerMove = function(id, e, pageX, pageY, owner) {
 		if (this._prevStage && owner === undefined) { return; } // redundant listener.
 		if (!this.canvas) { return; }
 		var nextStage=this._nextStage, o=this._getPointerData(id);
@@ -656,7 +648,7 @@
 			this._dispatchMouseEvent(o.target, "pressmove", true, id, o, e);
 		}
 		
-		nextStage&&nextStage._handlePointerMove(id, e, pageX, pageY, null);
+		nextStage&&nextcreatejs.Stage._handlePointerMove(id, e, pageX, pageY, null);
 	};
 
 	/**
@@ -667,7 +659,7 @@
 	 * @param {Number} pageX
 	 * @param {Number} pageY
 	 **/
-	p._updatePointerPosition = function(id, e, pageX, pageY) {
+ createjs.Stage.prototype._updatePointerPosition = function(id, e, pageX, pageY) {
 		var rect = this._getElementRect(this.canvas);
 		pageX -= rect.left;
 		pageY -= rect.top;
@@ -701,7 +693,7 @@
 	 * @protected
 	 * @param {MouseEvent} e
 	 **/
-	p._handleMouseUp = function(e) {
+ createjs.Stage.prototype._handleMouseUp = function(e) {
 		this._handlePointerUp(-1, e, false);
 	};
 
@@ -711,9 +703,9 @@
 	 * @param {Number} id
 	 * @param {Event} e
 	 * @param {Boolean} clear
-	 * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.
+	 * @param {createjs.Stage} owner Indicates that the event has already been captured & handled by the indicated stage.
 	 **/
-	p._handlePointerUp = function(id, e, clear, owner) {
+ createjs.Stage.prototype._handlePointerUp = function(id, e, clear, owner) {
 		var nextStage = this._nextStage, o = this._getPointerData(id);
 		if (this._prevStage && owner === undefined) { return; } // redundant listener.
 		
@@ -730,7 +722,7 @@
 			delete(this._pointerData[id]);
 		} else { o.target = null; }
 		
-		nextStage&&nextStage._handlePointerUp(id, e, clear, owner || target && this);
+		nextStage&&nextcreatejs.Stage._handlePointerUp(id, e, clear, owner || target && this);
 	};
 
 	/**
@@ -738,7 +730,7 @@
 	 * @protected
 	 * @param {MouseEvent} e
 	 **/
-	p._handleMouseDown = function(e) {
+ createjs.Stage.prototype._handleMouseDown = function(e) {
 		this._handlePointerDown(-1, e, e.pageX, e.pageY);
 	};
 
@@ -749,9 +741,9 @@
 	 * @param {Event} e
 	 * @param {Number} pageX
 	 * @param {Number} pageY
-	 * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.
+	 * @param {createjs.Stage} owner Indicates that the event has already been captured & handled by the indicated stage.
 	 **/
-	p._handlePointerDown = function(id, e, pageX, pageY, owner) {
+ createjs.Stage.prototype._handlePointerDown = function(id, e, pageX, pageY, owner) {
 		if (this.preventSelection) { e.preventDefault(); }
 		if (this._primaryPointerID == null || id === -1) { this._primaryPointerID = id; } // mouse always takes over.
 		
@@ -765,23 +757,23 @@
 			this._dispatchMouseEvent(o.target, "mousedown", true, id, o, e);
 		}
 
-		nextStage&&nextStage._handlePointerDown(id, e, pageX, pageY, owner || target && this);
+		nextStage&&nextcreatejs.Stage._handlePointerDown(id, e, pageX, pageY, owner || target && this);
 	};
 
 	/**
 	 * @method _testMouseOver
 	 * @param {Boolean} clear If true, clears the mouseover / rollover (ie. no target)
-	 * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.
-	 * @param {Stage} eventTarget The stage that the cursor is actively over.
+	 * @param {createjs.Stage} owner Indicates that the event has already been captured & handled by the indicated stage.
+	 * @param {createjs.Stage} eventTarget The stage that the cursor is actively over.
 	 * @protected
 	 **/
-	p._testMouseOver = function(clear, owner, eventTarget) {
+ createjs.Stage.prototype._testMouseOver = function(clear, owner, eventTarget) {
 		if (this._prevStage && owner === undefined) { return; } // redundant listener.
 		
 		var nextStage = this._nextStage;
 		if (!this._mouseOverIntervalID) {
 			// not enabled for mouseover, but should still relay the event.
-			nextStage&&nextStage._testMouseOver(clear, owner, eventTarget);
+			nextStage&&nextcreatejs.Stage._testMouseOver(clear, owner, eventTarget);
 			return;
 		}
 		var o = this._getPointerData(-1);
@@ -834,35 +826,35 @@
 			this._dispatchMouseEvent(target, "mouseover", true, -1, o, e);
 		}
 		
-		nextStage&&nextStage._testMouseOver(clear, owner || target && this, eventTarget || isEventTarget && this);
+		nextStage&&nextcreatejs.Stage._testMouseOver(clear, owner || target && this, eventTarget || isEventTarget && this);
 	};
 
 	/**
 	 * @method _handleDoubleClick
 	 * @protected
 	 * @param {MouseEvent} e
-	 * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.
+	 * @param {createjs.Stage} owner Indicates that the event has already been captured & handled by the indicated stage.
 	 **/
-	p._handleDoubleClick = function(e, owner) {
+ createjs.Stage.prototype._handleDoubleClick = function(e, owner) {
 		var target=null, nextStage=this._nextStage, o=this._getPointerData(-1);
 		if (!owner) {
 			target = this._getObjectsUnderPoint(o.x, o.y, null, true);
 			this._dispatchMouseEvent(target, "dblclick", true, -1, o, e);
 		}
-		nextStage&&nextStage._handleDoubleClick(e, owner || target && this);
+		nextStage&&nextcreatejs.Stage._handleDoubleClick(e, owner || target && this);
 	};
 
 	/**
 	 * @method _dispatchMouseEvent
 	 * @protected
-	 * @param {DisplayObject} target
+	 * @param {createjs.DisplayObject} target
 	 * @param {String} type
 	 * @param {Boolean} bubbles
 	 * @param {Number} pointerId
 	 * @param {Object} o
 	 * @param {MouseEvent} [nativeEvent]
 	 **/
-	p._dispatchMouseEvent = function(target, type, bubbles, pointerId, o, nativeEvent) {
+ createjs.Stage.prototype._dispatchMouseEvent = function(target, type, bubbles, pointerId, o, nativeEvent) {
 		// TODO: might be worth either reusing MouseEvent instances, or adding a willTrigger method to avoid GC.
 		if (!target || (!bubbles && !target.hasEventListener(type))) { return; }
 		/*
@@ -876,5 +868,5 @@
 	};
 
 
-	createjs.Stage = createjs.promote(Stage, "Container");
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/display/Text.js EaselJS-0.8.0/src/easeljs/display/Text.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/display/Text.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/display/Text.js	2016-05-31 11:03:08.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -59,7 +55,7 @@
 	 * <strong>Note:</strong> Text can be expensive to generate, so cache instances where possible. Be aware that not all
 	 * browsers will render Text exactly the same.
 	 * @class Text
-	 * @extends DisplayObject
+	 * @extends createjs.DisplayObject
 	 * @constructor
 	 * @param {String} [text] The text to display.
 	 * @param {String} [font] The font style to use. Any valid value for the CSS font attribute is acceptable (ex. "bold
@@ -67,7 +63,7 @@
 	 * @param {String} [color] The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex.
 	 * "#F00", "red", or "#FF0000").
 	 **/
-	function Text(text, font, color) {
+	createjs.Text = function(text, font, color) {
 		this.DisplayObject_constructor();
 		
 		
@@ -146,10 +142,10 @@
 		 **/
 		this.lineWidth = null;
 	}
-	var p = createjs.extend(Text, createjs.DisplayObject);
+	
 
 	// TODO: deprecated
-	// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
+	// createjs.Text.prototype.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
 
 	
 // static properties:
@@ -159,7 +155,7 @@
 	 * @private
 	 **/
 	var canvas = (createjs.createCanvas?createjs.createCanvas():document.createElement("canvas"));
-	if (canvas.getContext) { Text._workingContext = canvas.getContext("2d"); canvas.width = canvas.height = 1; }
+	if (canvas.getContext) { createjs.Text._workingContext = canvas.getContext("2d"); canvas.width = canvas.height = 1; }
 	
 	
 // constants:
@@ -170,7 +166,7 @@
 	 * @protected
 	 * @static
 	 **/
-	Text.H_OFFSETS = {start: 0, left: 0, center: -0.5, end: -1, right: -1};
+	createjs.Text.H_OFFSETS = {start: 0, left: 0, center: -0.5, end: -1, right: -1};
 	
 	/**
 	 * Lookup table for the ratio to offset bounds y calculations based on the textBaseline property.
@@ -179,7 +175,7 @@
 	 * @protected
 	 * @static
 	 **/
-	Text.V_OFFSETS = {top: 0, hanging: -0.01, middle: -0.4, alphabetic: -0.8, ideographic: -0.85, bottom: -1};
+	createjs.Text.V_OFFSETS = {top: 0, hanging: -0.01, middle: -0.4, alphabetic: -0.8, ideographic: -0.85, bottom: -1};
 
 
 // public methods:
@@ -190,7 +186,7 @@
 	 * @method isVisible
 	 * @return {Boolean} Whether the display object would be visible if drawn to a canvas
 	 **/
-	p.isVisible = function() {
+ createjs.Text.prototype.isVisible = function() {
 		var hasContent = this.cacheCanvas || (this.text != null && this.text !== "");
 		return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);
 	};
@@ -205,7 +201,7 @@
 	 * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back
 	 * into itself).
 	 **/
-	p.draw = function(ctx, ignoreCache) {
+ createjs.Text.prototype.draw = function(ctx, ignoreCache) {
 		if (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }
 
 		var col = this.color || "#000";
@@ -221,7 +217,7 @@
 	 * @method getMeasuredWidth
 	 * @return {Number} The measured, untransformed width of the text.
 	 **/
-	p.getMeasuredWidth = function() {
+ createjs.Text.prototype.getMeasuredWidth = function() {
 		return this._getMeasuredWidth(this.text);
 	};
 
@@ -232,7 +228,7 @@
 	 * @return {Number} an approximate line height of the text, ignoring the lineHeight property. This is
 	 * based on the measured width of a "M" character multiplied by 1.2, which approximates em for most fonts.
 	 **/
-	p.getMeasuredLineHeight = function() {
+ createjs.Text.prototype.getMeasuredLineHeight = function() {
 		return this._getMeasuredWidth("M")*1.2;
 	};
 
@@ -243,22 +239,22 @@
 	 * @method getMeasuredHeight
 	 * @return {Number} The approximate height of the untransformed multi-line text.
 	 **/
-	p.getMeasuredHeight = function() {
+ createjs.Text.prototype.getMeasuredHeight = function() {
 		return this._drawText(null,{}).height;
 	};
 
 	/**
 	 * Docced in superclass.
 	 */
-	p.getBounds = function() {
+ createjs.Text.prototype.getBounds = function() {
 		var rect = this.DisplayObject_getBounds();
 		if (rect) { return rect; }
 		if (this.text == null || this.text == "") { return null; }
 		var o = this._drawText(null, {});
 		var w = (this.maxWidth && this.maxWidth < o.width) ? this.maxWidth : o.width;
-		var x = w * Text.H_OFFSETS[this.textAlign||"left"];
+		var x = w * createjs.Text.H_OFFSETS[this.textAlign||"left"];
 		var lineHeight = this.lineHeight||this.getMeasuredLineHeight();
-		var y = lineHeight * Text.V_OFFSETS[this.textBaseline||"top"];
+		var y = lineHeight * createjs.Text.V_OFFSETS[this.textBaseline||"top"];
 		return this._rectangle.setValues(x, y, w, o.height);
 	};
 	
@@ -270,10 +266,10 @@
 	 * @method getMetrics
 	 * @return {Object} An object with width, height, and lines properties.
 	 **/
-	p.getMetrics = function() {
+ createjs.Text.prototype.getMetrics = function() {
 		var o = {lines:[]};
 		o.lineHeight = this.lineHeight || this.getMeasuredLineHeight();
-		o.vOffset = o.lineHeight * Text.V_OFFSETS[this.textBaseline||"top"];
+		o.vOffset = o.lineHeight * createjs.Text.V_OFFSETS[this.textBaseline||"top"];
 		return this._drawText(null, o, o.lines);
 	};
 
@@ -282,7 +278,7 @@
 	 * @method clone
 	 * @return {Text} a clone of the Text instance.
 	 **/
-	p.clone = function() {
+ createjs.Text.prototype.clone = function() {
 		return this._cloneProps(new Text(this.text, this.font, this.color));
 	};
 
@@ -291,7 +287,7 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.Text.prototype.toString = function() {
 		return "[Text (text="+  (this.text.length > 20 ? this.text.substr(0, 17)+"..." : this.text) +")]";
 	};
 
@@ -303,7 +299,7 @@
 	 * @protected
 	 * @return {Text} o
 	 **/
-	p._cloneProps = function(o) {
+ createjs.Text.prototype._cloneProps = function(o) {
 		this.DisplayObject__cloneProps(o);
 		o.textAlign = this.textAlign;
 		o.textBaseline = this.textBaseline;
@@ -320,7 +316,7 @@
 	 * @return {CanvasRenderingContext2D}
 	 * @protected
 	 **/
-	p._prepContext = function(ctx) {
+ createjs.Text.prototype._prepContext = function(ctx) {
 		ctx.font = this.font||"10px sans-serif";
 		ctx.textAlign = this.textAlign||"left";
 		ctx.textBaseline = this.textBaseline||"top";
@@ -336,10 +332,10 @@
 	 * @return {Object}
 	 * @protected
 	 **/
-	p._drawText = function(ctx, o, lines) {
+ createjs.Text.prototype._drawText = function(ctx, o, lines) {
 		var paint = !!ctx;
 		if (!paint) {
-			ctx = Text._workingContext;
+			ctx = createjs.Text._workingContext;
 			ctx.save();
 			this._prepContext(ctx);
 		}
@@ -396,7 +392,7 @@
 	 * @param {Number} y
 	 * @protected
 	 **/
-	p._drawTextLine = function(ctx, text, y) {
+ createjs.Text.prototype._drawTextLine = function(ctx, text, y) {
 		// Chrome 17 will fail to draw the text if the last param is included but null, so we feed it a large value instead:
 		if (this.outline) { ctx.strokeText(text, 0, y, this.maxWidth||0xFFFF); }
 		else { ctx.fillText(text, 0, y, this.maxWidth||0xFFFF); }
@@ -408,8 +404,8 @@
 	 * @param {String} text
 	 * @protected
 	 **/
-	p._getMeasuredWidth = function(text) {
-		var ctx = Text._workingContext;
+ createjs.Text.prototype._getMeasuredWidth = function(text) {
+		var ctx = createjs.Text._workingContext;
 		ctx.save();
 		var w = this._prepContext(ctx).measureText(text).width;
 		ctx.restore();
@@ -417,5 +413,5 @@
 	};
 
 
-	createjs.Text = createjs.promote(Text, "DisplayObject");
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/events/MouseEvent.js EaselJS-0.8.0/src/easeljs/events/MouseEvent.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/events/MouseEvent.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/events/MouseEvent.js	2016-05-31 11:03:08.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -52,10 +48,10 @@
 	 * @param {Boolean} primary Indicates whether this is the primary pointer in a multitouch environment.
 	 * @param {Number} rawX The raw x position relative to the stage.
 	 * @param {Number} rawY The raw y position relative to the stage.
-	 * @extends Event
+	 * @extends createjs.Event
 	 * @constructor
 	 **/
-	function MouseEvent(type, bubbles, cancelable, stageX, stageY, nativeEvent, pointerID, primary, rawX, rawY) {
+	createjs.MouseEvent = function(type, bubbles, cancelable, stageX, stageY, nativeEvent, pointerID, primary, rawX, rawY) {
 		this.Event_constructor(type, bubbles, cancelable);
 		
 		
@@ -93,7 +89,7 @@
 		/**
 		 * The native MouseEvent generated by the browser. The properties and API for this
 		 * event may differ between browsers. This property will be null if the
-		 * EaselJS property was not directly generated from a native MouseEvent.
+		 * EaselJS property was not directly generated from a native createjs.MouseEvent.
 		 * @property nativeEvent
 		 * @type HtmlMouseEvent
 		 * @default null
@@ -116,10 +112,10 @@
 		 */
 		this.primary = !!primary;
 	}
-	var p = createjs.extend(MouseEvent, createjs.Event);
+	
 
 	// TODO: deprecated
-	// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
+	// createjs.MouseEvent.prototype.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
 	
 	
 // getter / setters:
@@ -129,7 +125,7 @@
 	 * @type {Number}
 	 * @readonly
 	 */
-	p._get_localX = function() {
+ createjs.MouseEvent.prototype._get_localX = function() {
 		return this.currentTarget.globalToLocal(this.rawX, this.rawY).x;
 	};
 	
@@ -139,7 +135,7 @@
 	 * @type {Number}
 	 * @readonly
 	 */
-	p._get_localY = function() {
+ createjs.MouseEvent.prototype._get_localY = function() {
 		return this.currentTarget.globalToLocal(this.rawX, this.rawY).y;
 	};
 	
@@ -149,18 +145,12 @@
 	 * @type {Boolean}
 	 * @readonly
 	 */
-	p._get_isTouch = function() {
+ createjs.MouseEvent.prototype._get_isTouch = function() {
 		return this.pointerID !== -1;
 	};
 	
 	
-	try {
-		Object.defineProperties(p, {
-			localX: { get: p._get_localX },
-			localY: { get: p._get_localY },
-			isTouch: { get: p._get_isTouch }
-		});
-	} catch (e) {} // TODO: use Log
+
 
 
 // public methods:
@@ -169,7 +159,7 @@
 	 * @method clone
 	 * @return {MouseEvent} a clone of the MouseEvent instance.
 	 **/
-	p.clone = function() {
+ createjs.MouseEvent.prototype.clone = function() {
 		return new MouseEvent(this.type, this.bubbles, this.cancelable, this.stageX, this.stageY, this.nativeEvent, this.pointerID, this.primary, this.rawX, this.rawY);
 	};
 
@@ -178,10 +168,10 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.MouseEvent.prototype.toString = function() {
 		return "[MouseEvent (type="+this.type+" stageX="+this.stageX+" stageY="+this.stageY+")]";
 	};
 
 
-	createjs.MouseEvent = createjs.promote(MouseEvent, "Event");
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/filters/AlphaMapFilter.js EaselJS-0.8.0/src/easeljs/filters/AlphaMapFilter.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/filters/AlphaMapFilter.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/filters/AlphaMapFilter.js	2016-05-31 11:03:07.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs || {};
-
-(function () {
-	"use strict";
 	
 	
 // constructor:
@@ -62,12 +58,12 @@
 	 *
 	 * See {{#crossLink "Filter"}}{{/crossLink}} for more information on applying filters.
 	 * @class AlphaMapFilter
-	 * @extends Filter
+	 * @extends createjs.Filter
 	 * @constructor
 	 * @param {Image|HTMLCanvasElement} alphaMap The greyscale image (or canvas) to use as the alpha value for the
 	 * result. This should be exactly the same dimensions as the target.
 	 **/
-	function AlphaMapFilter(alphaMap) {
+	createjs.AlphaMapFilter = function(alphaMap) {
 	
 	
 	// public properties:
@@ -95,15 +91,15 @@
 		 **/
 		this._mapData = null;
 	}
-	var p = createjs.extend(AlphaMapFilter, createjs.Filter);
+	
 
 	// TODO: deprecated
-	// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
+	// createjs.AlphaMapFilter.prototype.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
 
 
 // public methods:
 	/** docced in super class **/
-	p.clone = function () {
+ createjs.AlphaMapFilter.prototype.clone = function () {
 		var o = new AlphaMapFilter(this.alphaMap);
 		o._alphaMap = this._alphaMap;
 		o._mapData = this._mapData;
@@ -111,14 +107,14 @@
 	};
 
 	/** docced in super class **/
-	p.toString = function () {
+ createjs.AlphaMapFilter.prototype.toString = function () {
 		return "[AlphaMapFilter]";
 	};
 
 
 // private methods:
 	/** docced in super class **/
-	p._applyFilter = function (imageData) {
+ createjs.AlphaMapFilter.prototype._applyFilter = function (imageData) {
 		if (!this.alphaMap) { return true; }
 		if (!this._prepAlphaMap()) { return false; }
 		
@@ -134,7 +130,7 @@
 	 * @method _prepAlphaMap
 	 * @protected
 	 **/
-	p._prepAlphaMap = function () {
+ createjs.AlphaMapFilter.prototype._prepAlphaMap = function () {
 		if (!this.alphaMap) { return false; }
 		if (this.alphaMap == this._alphaMap && this._mapData) { return true; }
 
@@ -164,5 +160,5 @@
 	};
 
 
-	createjs.AlphaMapFilter = createjs.promote(AlphaMapFilter, "Filter");
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/filters/AlphaMaskFilter.js EaselJS-0.8.0/src/easeljs/filters/AlphaMaskFilter.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/filters/AlphaMaskFilter.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/filters/AlphaMaskFilter.js	2016-05-31 11:03:08.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs || {};
-
-(function () {
-	"use strict";
 
 
 // constructor:
@@ -62,11 +58,11 @@
 	 *
 	 * See {{#crossLink "Filter"}}{{/crossLink}} for more information on applying filters.
 	 * @class AlphaMaskFilter
-	 * @extends Filter
+	 * @extends createjs.Filter
 	 * @constructor
 	 * @param {Image} mask
 	 **/
-	function AlphaMaskFilter(mask) {
+	createjs.AlphaMaskFilter = function(mask) {
 	
 	
 	// public properties:
@@ -77,10 +73,10 @@
 		 **/
 		this.mask = mask;
 	}
-	var p = createjs.extend(AlphaMaskFilter, createjs.Filter);
+	
 
 	// TODO: deprecated
-	// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
+	// createjs.AlphaMaskFilter.prototype.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
 	
 
 // public methods:
@@ -100,7 +96,7 @@
 	 * @param {Number} [targetY] NOT SUPPORTED IN THIS FILTER. The y position to draw the result to. Defaults to the value passed to y.
 	 * @return {Boolean} If the filter was applied successfully.
 	 **/
-	p.applyFilter = function (ctx, x, y, width, height, targetCtx, targetX, targetY) {
+ createjs.AlphaMaskFilter.prototype.applyFilter = function (ctx, x, y, width, height, targetCtx, targetX, targetY) {
 		if (!this.mask) { return true; }
 		targetCtx = targetCtx || ctx;
 		if (targetX == null) { targetX = x; }
@@ -120,15 +116,15 @@
 	};
 
 	/** docced in super class **/
-	p.clone = function () {
+ createjs.AlphaMaskFilter.prototype.clone = function () {
 		return new AlphaMaskFilter(this.mask);
 	};
 
 	/** docced in super class **/
-	p.toString = function () {
+ createjs.AlphaMaskFilter.prototype.toString = function () {
 		return "[AlphaMaskFilter]";
 	};
 
 
-	createjs.AlphaMaskFilter = createjs.promote(AlphaMaskFilter, "Filter");
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/filters/BlurFilter.js EaselJS-0.8.0/src/easeljs/filters/BlurFilter.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/filters/BlurFilter.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/filters/BlurFilter.js	2016-05-31 11:03:07.000000000 +0200
@@ -33,10 +33,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -59,13 +55,13 @@
 	 *
 	 * See {{#crossLink "Filter"}}{{/crossLink}} for an more information on applying filters.
 	 * @class BlurFilter
-	 * @extends Filter
+	 * @extends createjs.Filter
 	 * @constructor
 	 * @param {Number} [blurX=0] The horizontal blur radius in pixels.
 	 * @param {Number} [blurY=0] The vertical blur radius in pixels.
 	 * @param {Number} [quality=1] The number of blur iterations.
 	 **/
-	function BlurFilter( blurX, blurY, quality) {
+	createjs.BlurFilter = function( blurX, blurY, quality) {
 		if ( isNaN(blurX) || blurX < 0 ) blurX = 0;
 		if ( isNaN(blurY) || blurY < 0 ) blurY = 0;
 		if ( isNaN(quality) || quality < 1  ) quality = 1;
@@ -97,10 +93,10 @@
 		 **/
 		this.quality = quality | 0;
 	}
-	var p = createjs.extend(BlurFilter, createjs.Filter);
+	
 
 	// TODO: deprecated
-	// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
+	// createjs.BlurFilter.prototype.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
 
 
 // constants:
@@ -111,7 +107,7 @@
 	 * @protected
 	 * @static
 	 **/
-	BlurFilter.MUL_TABLE = [1, 171, 205, 293, 57, 373, 79, 137, 241, 27, 391, 357, 41, 19, 283, 265, 497, 469, 443, 421, 25, 191, 365, 349, 335, 161, 155, 149, 9, 278, 269, 261, 505, 245, 475, 231, 449, 437, 213, 415, 405, 395, 193, 377, 369, 361, 353, 345, 169, 331, 325, 319, 313, 307, 301, 37, 145, 285, 281, 69, 271, 267, 263, 259, 509, 501, 493, 243, 479, 118, 465, 459, 113, 446, 55, 435, 429, 423, 209, 413, 51, 403, 199, 393, 97, 3, 379, 375, 371, 367, 363, 359, 355, 351, 347, 43, 85, 337, 333, 165, 327, 323, 5, 317, 157, 311, 77, 305, 303, 75, 297, 294, 73, 289, 287, 71, 141, 279, 277, 275, 68, 135, 67, 133, 33, 262, 260, 129, 511, 507, 503, 499, 495, 491, 61, 121, 481, 477, 237, 235, 467, 232, 115, 457, 227, 451, 7, 445, 221, 439, 218, 433, 215, 427, 425, 211, 419, 417, 207, 411, 409, 203, 202, 401, 399, 396, 197, 49, 389, 387, 385, 383, 95, 189, 47, 187, 93, 185, 23, 183, 91, 181, 45, 179, 89, 177, 11, 175, 87, 173, 345, 343, 341, 339, 337, 21, 167, 83, 331, 329, 327, 163, 81, 323, 321, 319, 159, 79, 315, 313, 39, 155, 309, 307, 153, 305, 303, 151, 75, 299, 149, 37, 295, 147, 73, 291, 145, 289, 287, 143, 285, 71, 141, 281, 35, 279, 139, 69, 275, 137, 273, 17, 271, 135, 269, 267, 133, 265, 33, 263, 131, 261, 130, 259, 129, 257, 1];
+	createjs.BlurFilter.MUL_TABLE = [1, 171, 205, 293, 57, 373, 79, 137, 241, 27, 391, 357, 41, 19, 283, 265, 497, 469, 443, 421, 25, 191, 365, 349, 335, 161, 155, 149, 9, 278, 269, 261, 505, 245, 475, 231, 449, 437, 213, 415, 405, 395, 193, 377, 369, 361, 353, 345, 169, 331, 325, 319, 313, 307, 301, 37, 145, 285, 281, 69, 271, 267, 263, 259, 509, 501, 493, 243, 479, 118, 465, 459, 113, 446, 55, 435, 429, 423, 209, 413, 51, 403, 199, 393, 97, 3, 379, 375, 371, 367, 363, 359, 355, 351, 347, 43, 85, 337, 333, 165, 327, 323, 5, 317, 157, 311, 77, 305, 303, 75, 297, 294, 73, 289, 287, 71, 141, 279, 277, 275, 68, 135, 67, 133, 33, 262, 260, 129, 511, 507, 503, 499, 495, 491, 61, 121, 481, 477, 237, 235, 467, 232, 115, 457, 227, 451, 7, 445, 221, 439, 218, 433, 215, 427, 425, 211, 419, 417, 207, 411, 409, 203, 202, 401, 399, 396, 197, 49, 389, 387, 385, 383, 95, 189, 47, 187, 93, 185, 23, 183, 91, 181, 45, 179, 89, 177, 11, 175, 87, 173, 345, 343, 341, 339, 337, 21, 167, 83, 331, 329, 327, 163, 81, 323, 321, 319, 159, 79, 315, 313, 39, 155, 309, 307, 153, 305, 303, 151, 75, 299, 149, 37, 295, 147, 73, 291, 145, 289, 287, 143, 285, 71, 141, 281, 35, 279, 139, 69, 275, 137, 273, 17, 271, 135, 269, 267, 133, 265, 33, 263, 131, 261, 130, 259, 129, 257, 1];
 
 	/**
 	 * Array of shift values for blur calculations.
@@ -120,11 +116,11 @@
 	 * @protected
 	 * @static
 	 **/
-	BlurFilter.SHG_TABLE = [0, 9, 10, 11, 9, 12, 10, 11, 12, 9, 13, 13, 10, 9, 13, 13, 14, 14, 14, 14, 10, 13, 14, 14, 14, 13, 13, 13, 9, 14, 14, 14, 15, 14, 15, 14, 15, 15, 14, 15, 15, 15, 14, 15, 15, 15, 15, 15, 14, 15, 15, 15, 15, 15, 15, 12, 14, 15, 15, 13, 15, 15, 15, 15, 16, 16, 16, 15, 16, 14, 16, 16, 14, 16, 13, 16, 16, 16, 15, 16, 13, 16, 15, 16, 14, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 13, 14, 16, 16, 15, 16, 16, 10, 16, 15, 16, 14, 16, 16, 14, 16, 16, 14, 16, 16, 14, 15, 16, 16, 16, 14, 15, 14, 15, 13, 16, 16, 15, 17, 17, 17, 17, 17, 17, 14, 15, 17, 17, 16, 16, 17, 16, 15, 17, 16, 17, 11, 17, 16, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 16, 17, 17, 17, 16, 14, 17, 17, 17, 17, 15, 16, 14, 16, 15, 16, 13, 16, 15, 16, 14, 16, 15, 16, 12, 16, 15, 16, 17, 17, 17, 17, 17, 13, 16, 15, 17, 17, 17, 16, 15, 17, 17, 17, 16, 15, 17, 17, 14, 16, 17, 17, 16, 17, 17, 16, 15, 17, 16, 14, 17, 16, 15, 17, 16, 17, 17, 16, 17, 15, 16, 17, 14, 17, 16, 15, 17, 16, 17, 13, 17, 16, 17, 17, 16, 17, 14, 17, 16, 17, 16, 17, 16, 17, 9];
+	createjs.BlurFilter.SHG_TABLE = [0, 9, 10, 11, 9, 12, 10, 11, 12, 9, 13, 13, 10, 9, 13, 13, 14, 14, 14, 14, 10, 13, 14, 14, 14, 13, 13, 13, 9, 14, 14, 14, 15, 14, 15, 14, 15, 15, 14, 15, 15, 15, 14, 15, 15, 15, 15, 15, 14, 15, 15, 15, 15, 15, 15, 12, 14, 15, 15, 13, 15, 15, 15, 15, 16, 16, 16, 15, 16, 14, 16, 16, 14, 16, 13, 16, 16, 16, 15, 16, 13, 16, 15, 16, 14, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 13, 14, 16, 16, 15, 16, 16, 10, 16, 15, 16, 14, 16, 16, 14, 16, 16, 14, 16, 16, 14, 15, 16, 16, 16, 14, 15, 14, 15, 13, 16, 16, 15, 17, 17, 17, 17, 17, 17, 14, 15, 17, 17, 16, 16, 17, 16, 15, 17, 16, 17, 11, 17, 16, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 16, 17, 17, 17, 16, 14, 17, 17, 17, 17, 15, 16, 14, 16, 15, 16, 13, 16, 15, 16, 14, 16, 15, 16, 12, 16, 15, 16, 17, 17, 17, 17, 17, 13, 16, 15, 17, 17, 17, 16, 15, 17, 17, 17, 16, 15, 17, 17, 14, 16, 17, 17, 16, 17, 17, 16, 15, 17, 16, 14, 17, 16, 15, 17, 16, 17, 17, 16, 17, 15, 16, 17, 14, 17, 16, 15, 17, 16, 17, 13, 17, 16, 17, 17, 16, 17, 14, 17, 16, 17, 16, 17, 16, 17, 9];
 
 // public methods:
 	/** docced in super class **/
-	p.getBounds = function (rect) {
+ createjs.BlurFilter.prototype.getBounds = function (rect) {
 		var x = this.blurX|0, y = this.blurY| 0;
 		if (x <= 0 && y <= 0) { return rect; }
 		var q = Math.pow(this.quality, 0.2);
@@ -132,12 +128,12 @@
 	};
 
 	/** docced in super class **/
-	p.clone = function() {
+ createjs.BlurFilter.prototype.clone = function() {
 		return new BlurFilter(this.blurX, this.blurY, this.quality);
 	};
 
 	/** docced in super class **/
-	p.toString = function() {
+ createjs.BlurFilter.prototype.toString = function() {
 		return "[BlurFilter]";
 	};
 
@@ -145,7 +141,7 @@
 // private methods:
 
 	/** docced in super class **/
-	p._applyFilter = function (imageData) {
+ createjs.BlurFilter.prototype._applyFilter = function (imageData) {
 
 		var radiusX = this.blurX >> 1;
 		if (isNaN(radiusX) || radiusX < 0) return false;
@@ -191,10 +187,10 @@
 		var si = null;
 
 
-		var mtx = BlurFilter.MUL_TABLE[radiusX] | 0;
-		var stx = BlurFilter.SHG_TABLE[radiusX] | 0;
-		var mty = BlurFilter.MUL_TABLE[radiusY] | 0;
-		var sty = BlurFilter.SHG_TABLE[radiusY] | 0;
+		var mtx = createjs.BlurFilter.MUL_TABLE[radiusX] | 0;
+		var stx = createjs.BlurFilter.SHG_TABLE[radiusX] | 0;
+		var mty = createjs.BlurFilter.MUL_TABLE[radiusY] | 0;
+		var sty = createjs.BlurFilter.SHG_TABLE[radiusY] | 0;
 
 		while (iterations-- > 0) {
 
@@ -350,5 +346,5 @@
 		return true;
 	};
 
-	createjs.BlurFilter = createjs.promote(BlurFilter, "Filter");
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/filters/ColorFilter.js EaselJS-0.8.0/src/easeljs/filters/ColorFilter.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/filters/ColorFilter.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/filters/ColorFilter.js	2016-05-31 11:03:08.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -68,9 +64,9 @@
 	 * @param {Number} [alphaOffset=0] The amount to add to the alpha channel after it has been multiplied. This is a range
 	  * between -255 and 255.
 	 * @constructor
-	 * @extends Filter
+	 * @extends createjs.Filter
 	 **/
-	function ColorFilter(redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {
+	createjs.ColorFilter = function(redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {
 		
 	
 	// public properties:
@@ -130,27 +126,27 @@
 		 **/
 		this.alphaOffset = alphaOffset || 0;
 	}
-	var p = createjs.extend(ColorFilter, createjs.Filter);
+	
 
 	// TODO: deprecated
-	// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
+	// createjs.ColorFilter.prototype.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
 
 
 // public methods:
 	/** docced in super class **/
-	p.toString = function() {
+ createjs.ColorFilter.prototype.toString = function() {
 		return "[ColorFilter]";
 	};
 
 	/** docced in super class **/
-	p.clone = function() {
+ createjs.ColorFilter.prototype.clone = function() {
 		return new ColorFilter(this.redMultiplier, this.greenMultiplier, this.blueMultiplier, this.alphaMultiplier, this.redOffset, this.greenOffset, this.blueOffset, this.alphaOffset);
 	};
 	
 
 // private methods:
 	/** docced in super class **/
-	p._applyFilter = function(imageData) {
+ createjs.ColorFilter.prototype._applyFilter = function(imageData) {
 		var data = imageData.data;
 		var l = data.length;
 		for (var i=0; i<l; i+=4) {
@@ -163,5 +159,5 @@
 	};
 
 
-	createjs.ColorFilter = createjs.promote(ColorFilter, "Filter");
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/filters/ColorMatrix.js EaselJS-0.8.0/src/easeljs/filters/ColorMatrix.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/filters/ColorMatrix.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/filters/ColorMatrix.js	2016-05-31 11:03:08.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -44,7 +40,7 @@
 	 *
 	 * <h4>Example</h4>
 	 *
-	 *      myColorMatrix.adjustHue(20).adjustBrightness(50);
+	 *      mycreatejs.ColorMatrix.adjustHue(20).adjustBrightness(50);
 	 *
 	 * See {{#crossLink "Filter"}}{{/crossLink}} for an example of how to apply filters, or {{#crossLink "ColorMatrixFilter"}}{{/crossLink}}
 	 * for an example of how to use ColorMatrix to change a DisplayObject's color.
@@ -55,10 +51,10 @@
 	 * @param {Number} hue
 	 * @constructor
 	 **/
-	function ColorMatrix(brightness, contrast, saturation, hue) {
+	createjs.ColorMatrix = function(brightness, contrast, saturation, hue) {
 		this.setColor(brightness, contrast, saturation, hue);
 	}
-	var p = ColorMatrix.prototype;
+	
 
 	/**
 	 * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.
@@ -71,7 +67,7 @@
 	 * @protected
 	 * @deprecated
 	 */
-	// p.initialize = function() {}; // searchable for devs wondering where it is.
+	// createjs.ColorMatrix.prototype.initialize = function() {}; // searchable for devs wondering where it is.
 
 
 // constants:
@@ -82,7 +78,7 @@
 	 * @protected
 	 * @static
 	 **/
-	ColorMatrix.DELTA_INDEX = [
+	createjs.ColorMatrix.DELTA_INDEX = [
 		0,    0.01, 0.02, 0.04, 0.05, 0.06, 0.07, 0.08, 0.1,  0.11,
 		0.12, 0.14, 0.15, 0.16, 0.17, 0.18, 0.20, 0.21, 0.22, 0.24,
 		0.25, 0.27, 0.28, 0.30, 0.32, 0.34, 0.36, 0.38, 0.40, 0.42,
@@ -103,7 +99,7 @@
 	 * @protected
 	 * @static
 	 **/
-	ColorMatrix.IDENTITY_MATRIX = [
+	createjs.ColorMatrix.IDENTITY_MATRIX = [
 		1,0,0,0,0,
 		0,1,0,0,0,
 		0,0,1,0,0,
@@ -118,7 +114,7 @@
 	 * @protected
 	 * @static
 	 **/
-	ColorMatrix.LENGTH = ColorMatrix.IDENTITY_MATRIX.length;
+	createjs.ColorMatrix.LENGTH = createjs.ColorMatrix.IDENTITY_MATRIX.length;
 
 
 // public methods:
@@ -129,21 +125,21 @@
 	 * @param {Number} contrast
 	 * @param {Number} saturation
 	 * @param {Number} hue
-	 * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 */
-	p.setColor = function(brightness,contrast,saturation,hue) {
+ createjs.ColorMatrix.prototype.setColor = function(brightness,contrast,saturation,hue) {
 		return this.reset().adjustColor(brightness,contrast,saturation,hue);;
 	};
 
 	/**
 	 * Resets the matrix to identity values.
 	 * @method reset
-	 * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 */
-	p.reset = function() {
-		return this.copy(ColorMatrix.IDENTITY_MATRIX);
+ createjs.ColorMatrix.prototype.reset = function() {
+		return this.copy(createjs.ColorMatrix.IDENTITY_MATRIX);
 	};
 
 	/**
@@ -155,10 +151,10 @@
 	 * @param {Number} contrast
 	 * @param {Number} saturation
 	 * @param {Number} hue
-	 * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.adjustColor = function(brightness,contrast,saturation,hue) {
+ createjs.ColorMatrix.prototype.adjustColor = function(brightness,contrast,saturation,hue) {
 		this.adjustHue(hue);
 		this.adjustContrast(contrast);
 		this.adjustBrightness(brightness);
@@ -170,10 +166,10 @@
 	 * Positive values will make the image brighter, negative values will make it darker.
 	 * @method adjustBrightness
 	 * @param {Number} value A value between -255 & 255 that will be added to the RGB channels.
-	 * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.adjustBrightness = function(value) {
+ createjs.ColorMatrix.prototype.adjustBrightness = function(value) {
 		if (value == 0 || isNaN(value)) { return this; }
 		value = this._cleanValue(value,255);
 		this._multiplyMatrix([
@@ -191,10 +187,10 @@
 	 * Positive values will increase contrast, negative values will decrease contrast.
 	 * @method adjustContrast
 	 * @param {Number} value A value between -100 & 100.
-	 * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.adjustContrast = function(value) {
+ createjs.ColorMatrix.prototype.adjustContrast = function(value) {
 		if (value == 0 || isNaN(value)) { return this; }
 		value = this._cleanValue(value,100);
 		var x;
@@ -203,9 +199,9 @@
 		} else {
 			x = value%1;
 			if (x == 0) {
-				x = ColorMatrix.DELTA_INDEX[value];
+				x = createjs.ColorMatrix.DELTA_INDEX[value];
 			} else {
-				x = ColorMatrix.DELTA_INDEX[(value<<0)]*(1-x)+ColorMatrix.DELTA_INDEX[(value<<0)+1]*x; // use linear interpolation for more granularity.
+				x = createjs.ColorMatrix.DELTA_INDEX[(value<<0)]*(1-x)+createjs.ColorMatrix.DELTA_INDEX[(value<<0)+1]*x; // use linear interpolation for more granularity.
 			}
 			x = x*127+127;
 		}
@@ -224,10 +220,10 @@
 	 * Positive values will increase saturation, negative values will decrease saturation (trend towards greyscale).
 	 * @method adjustSaturation
 	 * @param {Number} value A value between -100 & 100.
-	 * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.adjustSaturation = function(value) {
+ createjs.ColorMatrix.prototype.adjustSaturation = function(value) {
 		if (value == 0 || isNaN(value)) { return this; }
 		value = this._cleanValue(value,100);
 		var x = 1+((value > 0) ? 3*value/100 : value/100);
@@ -249,10 +245,10 @@
 	 * Adjusts the hue of the pixel color.
 	 * @method adjustHue
 	 * @param {Number} value A value between -180 & 180.
-	 * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.adjustHue = function(value) {
+ createjs.ColorMatrix.prototype.adjustHue = function(value) {
 		if (value == 0 || isNaN(value)) { return this; }
 		value = this._cleanValue(value,180)/180*Math.PI;
 		var cosVal = Math.cos(value);
@@ -274,22 +270,22 @@
 	 * Concatenates (multiplies) the specified matrix with this one.
 	 * @method concat
 	 * @param {Array} matrix An array or ColorMatrix instance.
-	 * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.concat = function(matrix) {
+ createjs.ColorMatrix.prototype.concat = function(matrix) {
 		matrix = this._fixMatrix(matrix);
-		if (matrix.length != ColorMatrix.LENGTH) { return this; }
+		if (matrix.length != createjs.ColorMatrix.LENGTH) { return this; }
 		this._multiplyMatrix(matrix);
 		return this;
 	};
 
 	/**
-	 * Returns a clone of this ColorMatrix.
+	 * Returns a clone of this createjs.ColorMatrix.
 	 * @method clone
-	 * @return {ColorMatrix} A clone of this ColorMatrix.
+	 * @return {createjs.ColorMatrix} A clone of this createjs.ColorMatrix.
 	 **/
-	p.clone = function() {
+ createjs.ColorMatrix.prototype.clone = function() {
 		return (new ColorMatrix()).copy(this);
 	};
 
@@ -298,9 +294,9 @@
 	 * @method toArray
 	 * @return {Array} An array holding this matrix's values.
 	 **/
-	p.toArray = function() {
+ createjs.ColorMatrix.prototype.toArray = function() {
 		var arr = [];
-		for (var i= 0, l=ColorMatrix.LENGTH; i<l; i++) {
+		for (var i= 0, l=createjs.ColorMatrix.LENGTH; i<l; i++) {
 			arr[i] = this[i];
 		}
 		return arr;
@@ -310,11 +306,11 @@
 	 * Copy the specified matrix's values to this matrix.
 	 * @method copy
 	 * @param {Array} matrix An array or ColorMatrix instance.
-	 * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
+	 * @return {createjs.ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
 	 * @chainable
 	 **/
-	p.copy = function(matrix) {
-		var l = ColorMatrix.LENGTH;
+ createjs.ColorMatrix.prototype.copy = function(matrix) {
+		var l = createjs.ColorMatrix.LENGTH;
 		for (var i=0;i<l;i++) {
 			this[i] = matrix[i];
 		}
@@ -326,7 +322,7 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.ColorMatrix.prototype.toString = function() {
 		return "[ColorMatrix]";
 	};
 
@@ -337,7 +333,7 @@
 	 * @param {Array} matrix
 	 * @protected
 	 **/
-	p._multiplyMatrix = function(matrix) {
+ createjs.ColorMatrix.prototype._multiplyMatrix = function(matrix) {
 		var i, j, k, col = [];
 
 		for (i=0;i<5;i++) {
@@ -361,7 +357,7 @@
 	 * @param {Number} limit The maximum that the number can be. The minimum is the limit * -1.
 	 * @protected
 	 **/
-	p._cleanValue = function(value, limit) {
+ createjs.ColorMatrix.prototype._cleanValue = function(value, limit) {
 		return Math.min(limit,Math.max(-limit,value));
 	};
 
@@ -371,16 +367,16 @@
 	 * @param {Array} matrix
 	 * @protected
 	 **/
-	p._fixMatrix = function(matrix) {
+ createjs.ColorMatrix.prototype._fixMatrix = function(matrix) {
 		if (matrix instanceof ColorMatrix) { matrix = matrix.toArray(); }
-		if (matrix.length < ColorMatrix.LENGTH) {
-			matrix = matrix.slice(0,matrix.length).concat(ColorMatrix.IDENTITY_MATRIX.slice(matrix.length,ColorMatrix.LENGTH));
-		} else if (matrix.length > ColorMatrix.LENGTH) {
-			matrix = matrix.slice(0,ColorMatrix.LENGTH);
+		if (matrix.length < createjs.ColorMatrix.LENGTH) {
+			matrix = matrix.slice(0,matrix.length).concat(createjs.ColorMatrix.IDENTITY_MATRIX.slice(matrix.length,createjs.ColorMatrix.LENGTH));
+		} else if (matrix.length > createjs.ColorMatrix.LENGTH) {
+			matrix = matrix.slice(0,createjs.ColorMatrix.LENGTH);
 		}
 		return matrix;
 	};
 
 
-	createjs.ColorMatrix = ColorMatrix;
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/filters/ColorMatrixFilter.js EaselJS-0.8.0/src/easeljs/filters/ColorMatrixFilter.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/filters/ColorMatrixFilter.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/filters/ColorMatrixFilter.js	2016-05-31 11:03:07.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -59,11 +55,11 @@
 	 * See {{#crossLink "Filter"}}{{/crossLink}} for an more information on applying filters.
 	 * @class ColorMatrixFilter
 	 * @constructor
-	 * @extends Filter
+	 * @extends createjs.Filter
 	 * @param {Array | ColorMatrix} matrix A 4x5 matrix describing the color operation to perform. See also the {{#crossLink "ColorMatrix"}}{{/crossLink}}
 	 * class.
 	 **/
-	function ColorMatrixFilter(matrix) {
+	createjs.ColorMatrixFilter = function(matrix) {
 	
 		
 	// public properties:
@@ -74,26 +70,26 @@
 		 **/
 		this.matrix = matrix;
 	}
-	var p = createjs.extend(ColorMatrixFilter, createjs.Filter);
+	
 
 	// TODO: deprecated
-	// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
+	// createjs.ColorMatrixFilter.prototype.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.
 	
 
 // public methods:
 	/** docced in super class **/
-	p.toString = function() {
+ createjs.ColorMatrixFilter.prototype.toString = function() {
 		return "[ColorMatrixFilter]";
 	};
 
 	/** docced in super class **/
-	p.clone = function() {
+ createjs.ColorMatrixFilter.prototype.clone = function() {
 		return new ColorMatrixFilter(this.matrix);
 	};
 
 // private methods:
 	/** docced in super class **/
-	p._applyFilter = function(imageData) { 
+ createjs.ColorMatrixFilter.prototype._applyFilter = function(imageData) { 
 		var data = imageData.data;
 		var l = data.length;
 		var r,g,b,a;
@@ -117,5 +113,5 @@
 	};
 
 
-	createjs.ColorMatrixFilter = createjs.promote(ColorMatrixFilter, "Filter");
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/filters/Filter.js EaselJS-0.8.0/src/easeljs/filters/Filter.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/filters/Filter.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/filters/Filter.js	2016-05-31 11:03:07.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -68,8 +64,8 @@
 	 * @class Filter
 	 * @constructor
 	 **/
-	function Filter() {}
-	var p = Filter.prototype;
+	createjs.Filter = function() {}
+	
 
 	/**
 	 * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.
@@ -82,17 +78,17 @@
 	 * @protected
 	 * @deprecated
 	 */
-	// p.initialize = function() {}; // searchable for devs wondering where it is.
+	// createjs.Filter.prototype.initialize = function() {}; // searchable for devs wondering where it is.
 
 
 // public methods:
 	/**
 	 * Provides padding values for this filter. That is, how much the filter will extend the visual bounds of an object it is applied to.
 	 * @method getBounds
-	 * @param {Rectangle} [rect] If specified, the provided Rectangle instance will be expanded by the padding amounts and returned.
-	 * @return {Rectangle} If a `rect` param was provided, it is returned. If not, either a new rectangle with the padding values, or null if no padding is required for this filter.
+	 * @param {createjs.Rectangle} [rect] If specified, the provided Rectangle instance will be expanded by the padding amounts and returned.
+	 * @return {createjs.Rectangle} If a `rect` param was provided, it is returned. If not, either a new rectangle with the padding values, or null if no padding is required for this filter.
 	 **/
-	p.getBounds = function(rect) {
+ createjs.Filter.prototype.getBounds = function(rect) {
 		return rect;
 	};
 
@@ -109,7 +105,7 @@
 	 * @param {Number} [targetY] The y position to draw the result to. Defaults to the value passed to y.
 	 * @return {Boolean} If the filter was applied successfully.
 	 **/
-	p.applyFilter = function(ctx, x, y, width, height, targetCtx, targetX, targetY) {
+ createjs.Filter.prototype.applyFilter = function(ctx, x, y, width, height, targetCtx, targetX, targetY) {
 		// this is the default behaviour because most filters access pixel data. It is overridden when not needed.
 		targetCtx = targetCtx || ctx;
 		if (targetX == null) { targetX = x; }
@@ -131,16 +127,16 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.Filter.prototype.toString = function() {
 		return "[Filter]";
 	};
 
 	/**
 	 * Returns a clone of this Filter instance.
 	 * @method clone
-	 * @return {Filter} A clone of the current Filter instance.
+	 * @return {createjs.Filter} A clone of the current Filter instance.
 	 **/
-	p.clone = function() {
+ createjs.Filter.prototype.clone = function() {
 		return new Filter();
 	};
 	
@@ -150,8 +146,8 @@
 	 * @param {ImageData} imageData Target ImageData instance.
 	 * @return {Boolean}
 	 **/
-	p._applyFilter = function(imageData) { return true; };
+ createjs.Filter.prototype._applyFilter = function(imageData) { return true; };
 
 
-	createjs.Filter = Filter;
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/geom/DisplayProps.js EaselJS-0.8.0/src/easeljs/geom/DisplayProps.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/geom/DisplayProps.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/geom/DisplayProps.js	2016-05-31 11:03:07.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 	/**
 	 * Used for calculating and encapsulating display related properties.
@@ -46,7 +42,7 @@
 	 * @param {Number} [matrix] A transformation matrix. Defaults to a new identity matrix.
 	 * @constructor
 	 **/
-	function DisplayProps(visible, alpha, shadow, compositeOperation, matrix) {
+	createjs.DisplayProps = function(visible, alpha, shadow, compositeOperation, matrix) {
 		this.setValues(visible, alpha, shadow, compositeOperation, matrix);
 		
 	// public properties:
@@ -83,7 +79,7 @@
 		 * @type Matrix2D
 		 **/
 	}
-	var p = DisplayProps.prototype;
+	
 
 // initialization:
 	/**
@@ -94,10 +90,10 @@
 	 * @param {Number} [shadow=null] A Shadow instance or null.
 	 * @param {Number} [compositeOperation=null] A compositeOperation value or null.
 	 * @param {Number} [matrix] A transformation matrix. Defaults to an identity matrix.
-	 * @return {DisplayProps} This instance. Useful for chaining method calls.
+	 * @return {createjs.DisplayProps} This instance. Useful for chaining method calls.
 	 * @chainable
 	*/
-	p.setValues = function (visible, alpha, shadow, compositeOperation, matrix) {
+ createjs.DisplayProps.prototype.setValues = function (visible, alpha, shadow, compositeOperation, matrix) {
 		this.visible = visible == null ? true : !!visible;
 		this.alpha = alpha == null ? 1 : alpha;
 		this.shadow = shadow;
@@ -112,13 +108,13 @@
 	 * @method append
 	 * @param {Boolean} visible desired visible value
 	 * @param {Number} alpha desired alpha value
-	 * @param {Shadow} shadow desired shadow value
+	 * @param {createjs.Shadow} shadow desired shadow value
 	 * @param {String} compositeOperation desired composite operation value
-	 * @param {Matrix2D} [matrix] a Matrix2D instance
-	 * @return {DisplayProps} This instance. Useful for chaining method calls.
+	 * @param {createjs.Matrix2D} [matrix] a Matrix2D instance
+	 * @return {createjs.DisplayProps} This instance. Useful for chaining method calls.
 	 * @chainable
 	*/
-	p.append = function(visible, alpha, shadow, compositeOperation, matrix) {
+ createjs.DisplayProps.prototype.append = function(visible, alpha, shadow, compositeOperation, matrix) {
 		this.alpha *= alpha;
 		this.shadow = shadow || this.shadow;
 		this.compositeOperation = compositeOperation || this.compositeOperation;
@@ -141,13 +137,13 @@
 	 * @method prepend
 	 * @param {Boolean} visible desired visible value
 	 * @param {Number} alpha desired alpha value
-	 * @param {Shadow} shadow desired shadow value
+	 * @param {createjs.Shadow} shadow desired shadow value
 	 * @param {String} compositeOperation desired composite operation value
-	 * @param {Matrix2D} [matrix] a Matrix2D instance
-	 * @return {DisplayProps} This instance. Useful for chaining method calls.
+	 * @param {createjs.Matrix2D} [matrix] a Matrix2D instance
+	 * @return {createjs.DisplayProps} This instance. Useful for chaining method calls.
 	 * @chainable
 	*/
-	p.prepend = function(visible, alpha, shadow, compositeOperation, matrix) {
+ createjs.DisplayProps.prototype.prepend = function(visible, alpha, shadow, compositeOperation, matrix) {
 		this.alpha *= alpha;
 		this.shadow = this.shadow || shadow;
 		this.compositeOperation = this.compositeOperation || compositeOperation;
@@ -159,10 +155,10 @@
 	/**
 	 * Resets this instance and its matrix to default values.
 	 * @method identity
-	 * @return {DisplayProps} This instance. Useful for chaining method calls.
+	 * @return {createjs.DisplayProps} This instance. Useful for chaining method calls.
 	 * @chainable
 	*/
-	p.identity = function() {
+ createjs.DisplayProps.prototype.identity = function() {
 		this.visible = true;
 		this.alpha = 1;
 		this.shadow = this.compositeOperation = null;
@@ -173,13 +169,13 @@
 	/**
 	 * Returns a clone of the DisplayProps instance. Clones the associated matrix.
 	 * @method clone
-	 * @return {DisplayProps} a clone of the DisplayProps instance.
+	 * @return {createjs.DisplayProps} a clone of the DisplayProps instance.
 	 **/
-	p.clone = function() {
+ createjs.DisplayProps.prototype.clone = function() {
 		return new DisplayProps(this.alpha, this.shadow, this.compositeOperation, this.visible, this.matrix.clone());
 	};
 
 // private methods:
 
-	createjs.DisplayProps = DisplayProps;
-})();
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/geom/Matrix2D.js EaselJS-0.8.0/src/easeljs/geom/Matrix2D.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/geom/Matrix2D.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/geom/Matrix2D.js	2016-05-31 11:03:07.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -58,7 +54,7 @@
 	 * @param {Number} [ty=0] Specifies the ty property for the new matrix.
 	 * @constructor
 	 **/
-	function Matrix2D(a, b, c, d, tx, ty) {
+	createjs.Matrix2D = function(a, b, c, d, tx, ty) {
 		this.setValues(a,b,c,d,tx,ty);
 		
 	// public properties:
@@ -99,7 +95,7 @@
 		 * @type Number
 		 **/
 	}
-	var p = Matrix2D.prototype;
+	
 
 	/**
 	 * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.
@@ -112,19 +108,19 @@
 	 * @protected
 	 * @deprecated
 	 */
-	// p.initialize = function() {}; // searchable for devs wondering where it is.
+	// createjs.Matrix2D.prototype.initialize = function() {}; // searchable for devs wondering where it is.
 
 
 // constants:
 	/**
-	 * Multiplier for converting degrees to radians. Used internally by Matrix2D.
+	 * Multiplier for converting degrees to radians. Used internally by createjs.Matrix2D.
 	 * @property DEG_TO_RAD
 	 * @static
 	 * @final
 	 * @type Number
 	 * @readonly
 	 **/
-	Matrix2D.DEG_TO_RAD = Math.PI/180;
+	createjs.Matrix2D.DEG_TO_RAD = Math.PI/180;
 
 
 // static public properties:
@@ -135,7 +131,7 @@
 	 * @type Matrix2D
 	 * @readonly
 	 **/
-	Matrix2D.identity = null; // set at bottom of class definition.
+	createjs.Matrix2D.identity = null; // set at bottom of class definition.
 	
 
 // public methods:
@@ -148,9 +144,9 @@
 	 * @param {Number} [d=1] Specifies the d property for the new matrix.
 	 * @param {Number} [tx=0] Specifies the tx property for the new matrix.
 	 * @param {Number} [ty=0] Specifies the ty property for the new matrix.
-	 * @return {Matrix2D} This instance. Useful for chaining method calls.
+	 * @return {createjs.Matrix2D} This instance. Useful for chaining method calls.
 	*/
-	p.setValues = function(a, b, c, d, tx, ty) {
+ createjs.Matrix2D.prototype.setValues = function(a, b, c, d, tx, ty) {
 		// don't forget to update docs in the constructor if these change:
 		this.a = (a == null) ? 1 : a;
 		this.b = b || 0;
@@ -171,9 +167,9 @@
 	 * @param {Number} d
 	 * @param {Number} tx
 	 * @param {Number} ty
-	 * @return {Matrix2D} This matrix. Useful for chaining method calls.
+	 * @return {createjs.Matrix2D} This matrix. Useful for chaining method calls.
 	 **/
-	p.append = function(a, b, c, d, tx, ty) {
+ createjs.Matrix2D.prototype.append = function(a, b, c, d, tx, ty) {
 		var a1 = this.a;
 		var b1 = this.b;
 		var c1 = this.c;
@@ -200,9 +196,9 @@
 	 * @param {Number} d
 	 * @param {Number} tx
 	 * @param {Number} ty
-	 * @return {Matrix2D} This matrix. Useful for chaining method calls.
+	 * @return {createjs.Matrix2D} This matrix. Useful for chaining method calls.
 	 **/
-	p.prepend = function(a, b, c, d, tx, ty) {
+ createjs.Matrix2D.prototype.prepend = function(a, b, c, d, tx, ty) {
 		var a1 = this.a;
 		var c1 = this.c;
 		var tx1 = this.tx;
@@ -220,10 +216,10 @@
 	 * Appends the specified matrix to this matrix.
 	 * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.
 	 * @method appendMatrix
-	 * @param {Matrix2D} matrix
-	 * @return {Matrix2D} This matrix. Useful for chaining method calls.
+	 * @param {createjs.Matrix2D} matrix
+	 * @return {createjs.Matrix2D} This matrix. Useful for chaining method calls.
 	 **/
-	p.appendMatrix = function(matrix) {
+ createjs.Matrix2D.prototype.appendMatrix = function(matrix) {
 		return this.append(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
 	};
 
@@ -239,10 +235,10 @@
 	 * 		o.prependMatrix(o.getMatrix());
 	 * 	}
 	 * @method prependMatrix
-	 * @param {Matrix2D} matrix
-	 * @return {Matrix2D} This matrix. Useful for chaining method calls.
+	 * @param {createjs.Matrix2D} matrix
+	 * @return {createjs.Matrix2D} This matrix. Useful for chaining method calls.
 	 **/
-	p.prependMatrix = function(matrix) {
+ createjs.Matrix2D.prototype.prependMatrix = function(matrix) {
 		return this.prepend(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
 	};
 
@@ -262,11 +258,11 @@
 	 * @param {Number} skewY
 	 * @param {Number} regX Optional.
 	 * @param {Number} regY Optional.
-	 * @return {Matrix2D} This matrix. Useful for chaining method calls.
+	 * @return {createjs.Matrix2D} This matrix. Useful for chaining method calls.
 	 **/
-	p.appendTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {
+ createjs.Matrix2D.prototype.appendTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {
 		if (rotation%360) {
-			var r = rotation*Matrix2D.DEG_TO_RAD;
+			var r = rotation*createjs.Matrix2D.DEG_TO_RAD;
 			var cos = Math.cos(r);
 			var sin = Math.sin(r);
 		} else {
@@ -276,8 +272,8 @@
 
 		if (skewX || skewY) {
 			// TODO: can this be combined into a single append operation?
-			skewX *= Matrix2D.DEG_TO_RAD;
-			skewY *= Matrix2D.DEG_TO_RAD;
+			skewX *= createjs.Matrix2D.DEG_TO_RAD;
+			skewY *= createjs.Matrix2D.DEG_TO_RAD;
 			this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);
 			this.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);
 		} else {
@@ -315,11 +311,11 @@
 	 * @param {Number} skewY
 	 * @param {Number} regX Optional.
 	 * @param {Number} regY Optional.
-	 * @return {Matrix2D} This matrix. Useful for chaining method calls.
+	 * @return {createjs.Matrix2D} This matrix. Useful for chaining method calls.
 	 **/
-	p.prependTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {
+ createjs.Matrix2D.prototype.prependTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {
 		if (rotation%360) {
-			var r = rotation*Matrix2D.DEG_TO_RAD;
+			var r = rotation*createjs.Matrix2D.DEG_TO_RAD;
 			var cos = Math.cos(r);
 			var sin = Math.sin(r);
 		} else {
@@ -333,8 +329,8 @@
 		}
 		if (skewX || skewY) {
 			// TODO: can this be combined into a single prepend operation?
-			skewX *= Matrix2D.DEG_TO_RAD;
-			skewY *= Matrix2D.DEG_TO_RAD;
+			skewX *= createjs.Matrix2D.DEG_TO_RAD;
+			skewY *= createjs.Matrix2D.DEG_TO_RAD;
 			this.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);
 			this.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);
 		} else {
@@ -347,10 +343,10 @@
 	 * Applies a clockwise rotation transformation to the matrix.
 	 * @method rotate
 	 * @param {Number} angle The angle to rotate by, in degrees. To use a value in radians, multiply it by `180/Math.PI`.
-	 * @return {Matrix2D} This matrix. Useful for chaining method calls.
+	 * @return {createjs.Matrix2D} This matrix. Useful for chaining method calls.
 	 **/
-	p.rotate = function(angle) {
-		angle = angle*Matrix2D.DEG_TO_RAD;
+ createjs.Matrix2D.prototype.rotate = function(angle) {
+		angle = angle*createjs.Matrix2D.DEG_TO_RAD;
 		var cos = Math.cos(angle);
 		var sin = Math.sin(angle);
 
@@ -369,11 +365,11 @@
 	 * @method skew
 	 * @param {Number} skewX The amount to skew horizontally in degrees. To use a value in radians, multiply it by `180/Math.PI`.
 	 * @param {Number} skewY The amount to skew vertically in degrees.
-	 * @return {Matrix2D} This matrix. Useful for chaining method calls.
+	 * @return {createjs.Matrix2D} This matrix. Useful for chaining method calls.
 	*/
-	p.skew = function(skewX, skewY) {
-		skewX = skewX*Matrix2D.DEG_TO_RAD;
-		skewY = skewY*Matrix2D.DEG_TO_RAD;
+ createjs.Matrix2D.prototype.skew = function(skewX, skewY) {
+		skewX = skewX*createjs.Matrix2D.DEG_TO_RAD;
+		skewY = skewY*createjs.Matrix2D.DEG_TO_RAD;
 		this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), 0, 0);
 		return this;
 	};
@@ -383,9 +379,9 @@
 	 * @method scale
 	 * @param {Number} x The amount to scale horizontally. E.G. a value of 2 will double the size in the X direction, and 0.5 will halve it.
 	 * @param {Number} y The amount to scale vertically.
-	 * @return {Matrix2D} This matrix. Useful for chaining method calls.
+	 * @return {createjs.Matrix2D} This matrix. Useful for chaining method calls.
 	 **/
-	p.scale = function(x, y) {
+ createjs.Matrix2D.prototype.scale = function(x, y) {
 		this.a *= x;
 		this.b *= x;
 		this.c *= y;
@@ -400,9 +396,9 @@
 	 * @method translate
 	 * @param {Number} x
 	 * @param {Number} y
-	 * @return {Matrix2D} This matrix. Useful for chaining method calls.
+	 * @return {createjs.Matrix2D} This matrix. Useful for chaining method calls.
 	 **/
-	p.translate = function(x, y) {
+ createjs.Matrix2D.prototype.translate = function(x, y) {
 		this.tx += this.a*x + this.c*y;
 		this.ty += this.b*x + this.d*y;
 		return this;
@@ -411,9 +407,9 @@
 	/**
 	 * Sets the properties of the matrix to those of an identity matrix (one that applies a null transformation).
 	 * @method identity
-	 * @return {Matrix2D} This matrix. Useful for chaining method calls.
+	 * @return {createjs.Matrix2D} This matrix. Useful for chaining method calls.
 	 **/
-	p.identity = function() {
+ createjs.Matrix2D.prototype.identity = function() {
 		this.a = this.d = 1;
 		this.b = this.c = this.tx = this.ty = 0;
 		return this;
@@ -422,9 +418,9 @@
 	/**
 	 * Inverts the matrix, causing it to perform the opposite transformation.
 	 * @method invert
-	 * @return {Matrix2D} This matrix. Useful for chaining method calls.
+	 * @return {createjs.Matrix2D} This matrix. Useful for chaining method calls.
 	 **/
-	p.invert = function() {
+ createjs.Matrix2D.prototype.invert = function() {
 		var a1 = this.a;
 		var b1 = this.b;
 		var c1 = this.c;
@@ -446,17 +442,17 @@
 	 * @method isIdentity
 	 * @return {Boolean}
 	 **/
-	p.isIdentity = function() {
+ createjs.Matrix2D.prototype.isIdentity = function() {
 		return this.tx === 0 && this.ty === 0 && this.a === 1 && this.b === 0 && this.c === 0 && this.d === 1;
 	};
 	
 	/**
 	 * Returns true if this matrix is equal to the specified matrix (all property values are equal).
 	 * @method equals
-	 * @param {Matrix2D} matrix The matrix to compare.
+	 * @param {createjs.Matrix2D} matrix The matrix to compare.
 	 * @return {Boolean}
 	 **/
-	p.equals = function(matrix) {
+ createjs.Matrix2D.prototype.equals = function(matrix) {
 		return this.tx === matrix.tx && this.ty === matrix.ty && this.a === matrix.a && this.b === matrix.b && this.c === matrix.c && this.d === matrix.d;
 	};
 
@@ -465,10 +461,10 @@
 	 * @method transformPoint
 	 * @param {Number} x The x component of the point to transform.
 	 * @param {Number} y The y component of the point to transform.
-	 * @param {Point | Object} [pt] An object to copy the result into. If omitted a generic object with x/y properties will be returned.
-	 * @return {Point} This matrix. Useful for chaining method calls.
+	 * @param {createjs.Point | Object} [pt] An object to copy the result into. If omitted a generic object with x/y properties will be returned.
+	 * @return {createjs.Point} This matrix. Useful for chaining method calls.
 	 **/
-	p.transformPoint = function(x, y, pt) {
+ createjs.Matrix2D.prototype.transformPoint = function(x, y, pt) {
 		pt = pt||{};
 		pt.x = x*this.a+y*this.c+this.tx;
 		pt.y = x*this.b+y*this.d+this.ty;
@@ -483,7 +479,7 @@
 	 * @param {Object} target The object to apply the transform properties to. If null, then a new object will be returned.
 	 * @return {Object} The target, or a new generic object with the transform properties applied.
 	*/
-	p.decompose = function(target) {
+ createjs.Matrix2D.prototype.decompose = function(target) {
 		// TODO: it would be nice to be able to solve for whether the matrix can be decomposed into only scale/rotation even when scale is negative
 		if (target == null) { target = {}; }
 		target.x = this.tx;
@@ -496,14 +492,14 @@
 
 		var delta = Math.abs(1-skewX/skewY);
 		if (delta < 0.00001) { // effectively identical, can use rotation:
-			target.rotation = skewY/Matrix2D.DEG_TO_RAD;
+			target.rotation = skewY/createjs.Matrix2D.DEG_TO_RAD;
 			if (this.a < 0 && this.d >= 0) {
 				target.rotation += (target.rotation <= 0) ? 180 : -180;
 			}
 			target.skewX = target.skewY = 0;
 		} else {
-			target.skewX = skewX/Matrix2D.DEG_TO_RAD;
-			target.skewY = skewY/Matrix2D.DEG_TO_RAD;
+			target.skewX = skewX/createjs.Matrix2D.DEG_TO_RAD;
+			target.skewY = skewY/createjs.Matrix2D.DEG_TO_RAD;
 		}
 		return target;
 	};
@@ -511,19 +507,19 @@
 	/**
 	 * Copies all properties from the specified matrix to this matrix.
 	 * @method copy
-	 * @param {Matrix2D} matrix The matrix to copy properties from.
-	 * @return {Matrix2D} This matrix. Useful for chaining method calls.
+	 * @param {createjs.Matrix2D} matrix The matrix to copy properties from.
+	 * @return {createjs.Matrix2D} This matrix. Useful for chaining method calls.
 	*/
-	p.copy = function(matrix) {
+ createjs.Matrix2D.prototype.copy = function(matrix) {
 		return this.setValues(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
 	};
 
 	/**
 	 * Returns a clone of the Matrix2D instance.
 	 * @method clone
-	 * @return {Matrix2D} a clone of the Matrix2D instance.
+	 * @return {createjs.Matrix2D} a clone of the Matrix2D instance.
 	 **/
-	p.clone = function() {
+ createjs.Matrix2D.prototype.clone = function() {
 		return new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);
 	};
 
@@ -532,13 +528,13 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.Matrix2D.prototype.toString = function() {
 		return "[Matrix2D (a="+this.a+" b="+this.b+" c="+this.c+" d="+this.d+" tx="+this.tx+" ty="+this.ty+")]";
 	};
 
 	// this has to be populated after the class is defined:
-	Matrix2D.identity = new Matrix2D();
+	createjs.Matrix2D.identity = new Matrix2D();
 
 
-	createjs.Matrix2D = Matrix2D;
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/geom/Point.js EaselJS-0.8.0/src/easeljs/geom/Point.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/geom/Point.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/geom/Point.js	2016-05-31 11:03:08.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -50,7 +46,7 @@
 	 * @param {Number} [y=0] Y position.
 	 * @constructor
 	 **/
-	function Point(x, y) {
+	createjs.Point = function(x, y) {
 	 	this.setValues(x, y);
 	 	
 	 	
@@ -68,7 +64,7 @@
 		 * @type Number
 		 **/
 	}
-	var p = Point.prototype;
+	
 
 	/**
 	 * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.
@@ -81,7 +77,7 @@
 	 * @protected
 	 * @deprecated
 	 */
-	// p.initialize = function() {}; // searchable for devs wondering where it is.
+	// createjs.Point.prototype.initialize = function() {}; // searchable for devs wondering where it is.
 
 	
 // public methods:
@@ -90,10 +86,10 @@
 	 * @method setValues
 	 * @param {Number} [x=0] X position.
 	 * @param {Number} [y=0] Y position.
-	 * @return {Point} This instance. Useful for chaining method calls.
+	 * @return {createjs.Point} This instance. Useful for chaining method calls.
 	 * @chainable
 	*/
-	p.setValues = function(x, y) {
+ createjs.Point.prototype.setValues = function(x, y) {
 		this.x = x||0;
 		this.y = y||0;
 		return this;
@@ -102,11 +98,11 @@
 	/**
 	 * Copies all properties from the specified point to this point.
 	 * @method copy
-	 * @param {Point} point The point to copy properties from.
-	 * @return {Point} This point. Useful for chaining method calls.
+	 * @param {createjs.Point} point The point to copy properties from.
+	 * @return {createjs.Point} This point. Useful for chaining method calls.
 	 * @chainable
 	*/
-	p.copy = function(point) {
+ createjs.Point.prototype.copy = function(point) {
 		this.x = point.x;
 		this.y = point.y;
 		return this;
@@ -115,9 +111,9 @@
 	/**
 	 * Returns a clone of the Point instance.
 	 * @method clone
-	 * @return {Point} a clone of the Point instance.
+	 * @return {createjs.Point} a clone of the Point instance.
 	 **/
-	p.clone = function() {
+ createjs.Point.prototype.clone = function() {
 		return new Point(this.x, this.y);
 	};
 
@@ -126,10 +122,10 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.Point.prototype.toString = function() {
 		return "[Point (x="+this.x+" y="+this.y+")]";
 	};
 	
 	
-	createjs.Point = Point;
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/geom/Rectangle.js EaselJS-0.8.0/src/easeljs/geom/Rectangle.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/geom/Rectangle.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/geom/Rectangle.js	2016-05-31 11:03:07.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -48,11 +44,11 @@
 	 * @class Rectangle
 	 * @param {Number} [x=0] X position.
 	 * @param {Number} [y=0] Y position.
-	 * @param {Number} [width=0] The width of the Rectangle.
-	 * @param {Number} [height=0] The height of the Rectangle.
+	 * @param {Number} [width=0] The width of the createjs.Rectangle.
+	 * @param {Number} [height=0] The height of the createjs.Rectangle.
 	 * @constructor
 	 **/
-	function Rectangle(x, y, width, height) {
+	createjs.Rectangle = function(x, y, width, height) {
 		this.setValues(x, y, width, height);
 		
 		
@@ -82,7 +78,7 @@
 		 * @type Number
 		 **/
 	}
-	var p = Rectangle.prototype;
+	
 
 	/**
 	 * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.
@@ -95,7 +91,7 @@
 	 * @protected
 	 * @deprecated
 	 */
-	// p.initialize = function() {}; // searchable for devs wondering where it is.
+	// createjs.Rectangle.prototype.initialize = function() {}; // searchable for devs wondering where it is.
 
 
 // public methods:
@@ -104,12 +100,12 @@
 	 * @method setValues
 	 * @param {Number} [x=0] X position.
 	 * @param {Number} [y=0] Y position.
-	 * @param {Number} [width=0] The width of the Rectangle.
-	 * @param {Number} [height=0] The height of the Rectangle.
-	 * @return {Rectangle} This instance. Useful for chaining method calls.
+	 * @param {Number} [width=0] The width of the createjs.Rectangle.
+	 * @param {Number} [height=0] The height of the createjs.Rectangle.
+	 * @return {createjs.Rectangle} This instance. Useful for chaining method calls.
 	 * @chainable
 	*/
-	p.setValues = function(x, y, width, height) {
+ createjs.Rectangle.prototype.setValues = function(x, y, width, height) {
 		// don't forget to update docs in the constructor if these change:
 		this.x = x||0;
 		this.y = y||0;
@@ -125,10 +121,10 @@
 	 * @param {Number} y Y position of the point or rectangle.
 	 * @param {Number} [width=0] The width of the rectangle.
 	 * @param {Number} [height=0] The height of the rectangle.
-	 * @return {Rectangle} This instance. Useful for chaining method calls.
+	 * @return {createjs.Rectangle} This instance. Useful for chaining method calls.
 	 * @chainable
 	*/
-	p.extend = function(x, y, width, height) {
+ createjs.Rectangle.prototype.extend = function(x, y, width, height) {
 		width = width||0;
 		height = height||0;
 		if (x+width > this.x+this.width) { this.width = x+width-this.x; }
@@ -145,10 +141,10 @@
 	 * @param {Number} [left=0]
 	 * @param {Number} [right=0]
 	 * @param {Number} [bottom=0]
-	 * @return {Rectangle} This instance. Useful for chaining method calls.
+	 * @return {createjs.Rectangle} This instance. Useful for chaining method calls.
 	 * @chainable
 	*/
-	p.pad = function(top, left, bottom, right) {
+ createjs.Rectangle.prototype.pad = function(top, left, bottom, right) {
 		this.x -= top;
 		this.y -= left;
 		this.width += top+bottom;
@@ -159,11 +155,11 @@
 	/**
 	 * Copies all properties from the specified rectangle to this rectangle.
 	 * @method copy
-	 * @param {Rectangle} rectangle The rectangle to copy properties from.
-	 * @return {Rectangle} This rectangle. Useful for chaining method calls.
+	 * @param {createjs.Rectangle} rectangle The rectangle to copy properties from.
+	 * @return {createjs.Rectangle} This rectangle. Useful for chaining method calls.
 	 * @chainable
 	*/
-	p.copy = function(rectangle) {
+ createjs.Rectangle.prototype.copy = function(rectangle) {
 		return this.setValues(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
 	};
 	
@@ -176,7 +172,7 @@
 	 * @param {Number} [height=0] The height of the rectangle.
 	 * @return {Boolean} True if the described point or rectangle is contained within this rectangle.
 	*/
-	p.contains = function(x, y, width, height) {
+ createjs.Rectangle.prototype.contains = function(x, y, width, height) {
 		width = width||0;
 		height = height||0;
 		return (x >= this.x && x+width <= this.x+this.width && y >= this.y && y+height <= this.y+this.height);
@@ -185,10 +181,10 @@
 	/** 
 	 * Returns a new rectangle which contains this rectangle and the specified rectangle.
 	 * @method union
-	 * @param {Rectangle} rect The rectangle to calculate a union with.
-	 * @return {Rectangle} A new rectangle describing the union.
+	 * @param {createjs.Rectangle} rect The rectangle to calculate a union with.
+	 * @return {createjs.Rectangle} A new rectangle describing the union.
 	*/
-	p.union = function(rect) {
+ createjs.Rectangle.prototype.union = function(rect) {
 		return this.clone().extend(rect.x, rect.y, rect.width, rect.height);
 	};
 	
@@ -196,10 +192,10 @@
 	 * Returns a new rectangle which describes the intersection (overlap) of this rectangle and the specified rectangle,
 	 * or null if they do not intersect.
 	 * @method intersection
-	 * @param {Rectangle} rect The rectangle to calculate an intersection with.
-	 * @return {Rectangle} A new rectangle describing the intersection or null.
+	 * @param {createjs.Rectangle} rect The rectangle to calculate an intersection with.
+	 * @return {createjs.Rectangle} A new rectangle describing the intersection or null.
 	*/
-	p.intersection = function(rect) {
+ createjs.Rectangle.prototype.intersection = function(rect) {
 		var x1 = rect.x, y1 = rect.y, x2 = x1+rect.width, y2 = y1+rect.height;
 		if (this.x > x1) { x1 = this.x; }
 		if (this.y > y1) { y1 = this.y; }
@@ -211,10 +207,10 @@
 	/** 
 	 * Returns true if the specified rectangle intersects (has any overlap) with this rectangle.
 	 * @method intersects
-	 * @param {Rectangle} rect The rectangle to compare.
+	 * @param {createjs.Rectangle} rect The rectangle to compare.
 	 * @return {Boolean} True if the rectangles intersect.
 	*/
-	p.intersects = function(rect) {
+ createjs.Rectangle.prototype.intersects = function(rect) {
 		return (rect.x <= this.x+this.width && this.x <= rect.x+rect.width && rect.y <= this.y+this.height && this.y <= rect.y + rect.height);
 	};
 	
@@ -223,16 +219,16 @@
 	 * @method isEmpty
 	 * @return {Boolean} True if the rectangle is empty.
 	*/
-	p.isEmpty = function() {
+ createjs.Rectangle.prototype.isEmpty = function() {
 		return this.width <= 0 || this.height <= 0;
 	};
 	
 	/**
 	 * Returns a clone of the Rectangle instance.
 	 * @method clone
-	 * @return {Rectangle} a clone of the Rectangle instance.
+	 * @return {createjs.Rectangle} a clone of the Rectangle instance.
 	 **/
-	p.clone = function() {
+ createjs.Rectangle.prototype.clone = function() {
 		return new Rectangle(this.x, this.y, this.width, this.height);
 	};
 
@@ -241,10 +237,10 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.Rectangle.prototype.toString = function() {
 		return "[Rectangle (x="+this.x+" y="+this.y+" width="+this.width+" height="+this.height+")]";
 	};
 	
 	
-	createjs.Rectangle = Rectangle;
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/ui/ButtonHelper.js EaselJS-0.8.0/src/easeljs/ui/ButtonHelper.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/ui/ButtonHelper.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/ui/ButtonHelper.js	2016-05-31 11:03:07.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -64,14 +60,14 @@
 	 * @param {String} [downLabel="down"] The label or animation to go to when the user presses the button.
 	 * @param {Boolean} [play=false] If the helper should call "gotoAndPlay" or "gotoAndStop" on the button when changing
 	 * states.
-	 * @param {DisplayObject} [hitArea] An optional item to use as the hit state for the button. If this is not defined,
+	 * @param {createjs.DisplayObject} [hitArea] An optional item to use as the hit state for the button. If this is not defined,
 	 * then the button's visible states will be used instead. Note that the same instance as the "target" argument can be
 	 * used for the hitState.
 	 * @param {String} [hitLabel] The label or animation on the hitArea instance that defines the hitArea bounds. If this is
 	 * null, then the default state of the hitArea will be used. *
 	 * @constructor
 	 */
-	function ButtonHelper(target, outLabel, overLabel, downLabel, play, hitArea, hitLabel) {
+	createjs.ButtonHelper = function(target, outLabel, overLabel, downLabel, play, hitArea, hitLabel) {
 		if (!target.addEventListener) { return; }
 	
 	
@@ -149,7 +145,7 @@
 			target.hitArea = hitArea;
 		}
 	}
-	var p = ButtonHelper.prototype;
+	
 
 	/**
 	 * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.
@@ -162,7 +158,7 @@
 	 * @protected
 	 * @deprecated
 	 */
-	// p.initialize = function() {}; // searchable for devs wondering where it is.
+	// createjs.ButtonHelper.prototype.initialize = function() {}; // searchable for devs wondering where it is.
 
 	
 // getter / setters:
@@ -172,7 +168,7 @@
 	 * @param {Boolean} value
 	 * @deprecated
 	 **/
-	p.setEnabled = function(value) { // TODO: deprecated.
+ createjs.ButtonHelper.prototype.setEnabled = function(value) { // TODO: deprecated.
 		if (value == this._enabled) { return; }
 		var o = this.target;
 		this._enabled = value;
@@ -196,7 +192,7 @@
 	 * @return {Boolean}
 	 * @deprecated
 	 **/
-	p.getEnabled = function() {
+ createjs.ButtonHelper.prototype.getEnabled = function() {
 		return this._enabled;
 	};
 
@@ -205,11 +201,7 @@
 	 * @property enabled
 	 * @type {Boolean}
 	 **/
-	try {
-		Object.defineProperties(p, {
-			enabled: { get: p.getEnabled, set: p.setEnabled }
-		});
-	} catch (e) {} // TODO: use Log
+createjs.ButtonHelper.prototype.enabled; // TODO: use Log
 
 
 // public methods:
@@ -218,7 +210,7 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.ButtonHelper.prototype.toString = function() {
 		return "[ButtonHelper]";
 	};
 
@@ -229,7 +221,7 @@
 	 * @param {Object} evt The mouse event to handle.
 	 * @protected
 	 **/
-	p.handleEvent = function(evt) {
+ createjs.ButtonHelper.prototype.handleEvent = function(evt) {
 		var label, t = this.target, type = evt.type;
 		if (type == "mousedown") {
 			this._isPressed = true;
@@ -252,5 +244,5 @@
 	};
 
 
-	createjs.ButtonHelper = ButtonHelper;
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/ui/Touch.js EaselJS-0.8.0/src/easeljs/ui/Touch.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/ui/Touch.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/ui/Touch.js	2016-05-31 11:03:07.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -57,7 +53,7 @@
  * @class Touch
  * @static
  **/
-	function Touch() {
+	createjs.Touch = function() {
 		throw "Touch cannot be instantiated";
 	}
 
@@ -69,7 +65,7 @@
 	 * @return {Boolean} Indicates whether touch is supported in the current browser.
 	 * @static
 	 **/
-	Touch.isSupported = function() {
+	createjs.Touch.isSupported = function() {
 		return	!!(('ontouchstart' in window) // iOS & Android
 			|| (window.navigator['msPointerEnabled'] && window.navigator['msMaxTouchPoints'] > 0) // IE10
 			|| (window.navigator['pointerEnabled'] && window.navigator['maxTouchPoints'] > 0)); // IE11+
@@ -82,15 +78,15 @@
 	 * double click or over/out events. See the MouseEvent {{#crossLink "MouseEvent/pointerId:property"}}{{/crossLink}}
 	 * for more information.
 	 * @method enable
-	 * @param {Stage} stage The {{#crossLink "Stage"}}{{/crossLink}} to enable touch on.
+	 * @param {createjs.Stage} stage The {{#crossLink "Stage"}}{{/crossLink}} to enable touch on.
 	 * @param {Boolean} [singleTouch=false] If `true`, only a single touch will be active at a time.
 	 * @param {Boolean} [allowDefault=false] If `true`, then default gesture actions (ex. scrolling, zooming) will be
 	 * allowed when the user is interacting with the target canvas.
 	 * @return {Boolean} Returns `true` if touch was successfully enabled on the target stage.
 	 * @static
 	 **/
-	Touch.enable = function(stage, singleTouch, allowDefault) {
-		if (!stage || !stage.canvas || !Touch.isSupported()) { return false; }
+	createjs.Touch.enable = function(stage, singleTouch, allowDefault) {
+		if (!stage || !stage.canvas || !createjs.Touch.isSupported()) { return false; }
 		if (stage.__touch) { return true; }
 
 		// inject required properties on stage:
@@ -98,21 +94,21 @@
 
 		// note that in the future we may need to disable the standard mouse event model before adding
 		// these to prevent duplicate calls. It doesn't seem to be an issue with iOS devices though.
-		if ('ontouchstart' in window) { Touch._IOS_enable(stage); }
-		else if (window.navigator['msPointerEnabled'] || window.navigator["pointerEnabled"]) { Touch._IE_enable(stage); }
+		if ('ontouchstart' in window) { createjs.Touch._IOS_enable(stage); }
+		else if (window.navigator['msPointerEnabled'] || window.navigator["pointerEnabled"]) { createjs.Touch._IE_enable(stage); }
 		return true;
 	};
 
 	/**
-	 * Removes all listeners that were set up when calling `Touch.enable()` on a stage.
+	 * Removes all listeners that were set up when calling `createjs.Touch.enable()` on a stage.
 	 * @method disable
-	 * @param {Stage} stage The {{#crossLink "Stage"}}{{/crossLink}} to disable touch on.
+	 * @param {createjs.Stage} stage The {{#crossLink "Stage"}}{{/crossLink}} to disable touch on.
 	 * @static
 	 **/
-	Touch.disable = function(stage) {
+	createjs.Touch.disable = function(stage) {
 		if (!stage) { return; }
-		if ('ontouchstart' in window) { Touch._IOS_disable(stage); }
-		else if (window.navigator['msPointerEnabled'] || window.navigator["pointerEnabled"]) { Touch._IE_disable(stage); }
+		if ('ontouchstart' in window) { createjs.Touch._IOS_disable(stage); }
+		else if (window.navigator['msPointerEnabled'] || window.navigator["pointerEnabled"]) { createjs.Touch._IE_disable(stage); }
 		
 		delete stage.__touch;
 	};
@@ -122,12 +118,12 @@
 	/**
 	 * @method _IOS_enable
 	 * @protected
-	 * @param {Stage} stage
+	 * @param {createjs.Stage} stage
 	 * @static
 	 **/
-	Touch._IOS_enable = function(stage) {
+	createjs.Touch._IOS_enable = function(stage) {
 		var canvas = stage.canvas;
-		var f = stage.__touch.f = function(e) { Touch._IOS_handleEvent(stage,e); };
+		var f = stage.__touch.f = function(e) { createjs.Touch._IOS_handleEvent(stage,e); };
 		canvas.addEventListener("touchstart", f, false);
 		canvas.addEventListener("touchmove", f, false);
 		canvas.addEventListener("touchend", f, false);
@@ -137,10 +133,10 @@
 	/**
 	 * @method _IOS_disable
 	 * @protected
-	 * @param {Stage} stage
+	 * @param {createjs.Stage} stage
 	 * @static
 	 **/
-	Touch._IOS_disable = function(stage) {
+	createjs.Touch._IOS_disable = function(stage) {
 		var canvas = stage.canvas;
 		if (!canvas) { return; }
 		var f = stage.__touch.f;
@@ -152,12 +148,12 @@
 
 	/**
 	 * @method _IOS_handleEvent
-	 * @param {Stage} stage
+	 * @param {createjs.Stage} stage
 	 * @param {Object} e The event to handle
 	 * @protected
 	 * @static
 	 **/
-	Touch._IOS_handleEvent = function(stage, e) {
+	createjs.Touch._IOS_handleEvent = function(stage, e) {
 		if (!stage) { return; }
 		if (stage.__touch.preventDefault) { e.preventDefault&&e.preventDefault(); }
 		var touches = e.changedTouches;
@@ -180,12 +176,12 @@
 	/**
 	 * @method _IE_enable
 	 * @protected
-	 * @param {Stage} stage
+	 * @param {createjs.Stage} stage
 	 * @static
 	 **/
-	Touch._IE_enable = function(stage) {
+	createjs.Touch._IE_enable = function(stage) {
 		var canvas = stage.canvas;
-		var f = stage.__touch.f = function(e) { Touch._IE_handleEvent(stage,e); };
+		var f = stage.__touch.f = function(e) { createjs.Touch._IE_handleEvent(stage,e); };
 
 		if (window.navigator["pointerEnabled"] === undefined) {
 			canvas.addEventListener("MSPointerDown", f, false);
@@ -207,10 +203,10 @@
 	/**
 	 * @method _IE_disable
 	 * @protected
-	 * @param {Stage} stage
+	 * @param {createjs.Stage} stage
 	 * @static
 	 **/
-	Touch._IE_disable = function(stage) {
+	createjs.Touch._IE_disable = function(stage) {
 		var f = stage.__touch.f;
 
 		if (window.navigator["pointerEnabled"] === undefined) {
@@ -232,12 +228,12 @@
 
 	/**
 	 * @method _IE_handleEvent
-	 * @param {Stage} stage
+	 * @param {createjs.Stage} stage
 	 * @param {Object} e The event to handle.
 	 * @protected
 	 * @static
 	 **/
-	Touch._IE_handleEvent = function(stage, e) {
+	createjs.Touch._IE_handleEvent = function(stage, e) {
 		if (!stage) { return; }
 		if (stage.__touch.preventDefault) { e.preventDefault && e.preventDefault(); }
 		var type = e.type;
@@ -261,14 +257,14 @@
 
 	/**
 	 * @method _handleStart
-	 * @param {Stage} stage
+	 * @param {createjs.Stage} stage
 	 * @param {String|Number} id
 	 * @param {Object} e
 	 * @param {Number} x
 	 * @param {Number} y
 	 * @protected
 	 **/
-	Touch._handleStart = function(stage, id, e, x, y) {
+	createjs.Touch._handleStart = function(stage, id, e, x, y) {
 		var props = stage.__touch;
 		if (!props.multitouch && props.count) { return; }
 		var ids = props.pointers;
@@ -280,26 +276,26 @@
 
 	/**
 	 * @method _handleMove
-	 * @param {Stage} stage
+	 * @param {createjs.Stage} stage
 	 * @param {String|Number} id
 	 * @param {Object} e
 	 * @param {Number} x
 	 * @param {Number} y
 	 * @protected
 	 **/
-	Touch._handleMove = function(stage, id, e, x, y) {
+	createjs.Touch._handleMove = function(stage, id, e, x, y) {
 		if (!stage.__touch.pointers[id]) { return; }
 		stage._handlePointerMove(id, e, x, y);
 	};
 
 	/**
 	 * @method _handleEnd
-	 * @param {Stage} stage
+	 * @param {createjs.Stage} stage
 	 * @param {String|Number} id
 	 * @param {Object} e
 	 * @protected
 	 **/
-	Touch._handleEnd = function(stage, id, e) {
+	createjs.Touch._handleEnd = function(stage, id, e) {
 		// TODO: cancel should be handled differently for proper UI (ex. an up would trigger a click, a cancel would more closely resemble an out).
 		var props = stage.__touch;
 		var ids = props.pointers;
@@ -310,5 +306,5 @@
 	};
 
 
-	createjs.Touch = Touch;
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/utils/SpriteSheetBuilder.js EaselJS-0.8.0/src/easeljs/utils/SpriteSheetBuilder.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/utils/SpriteSheetBuilder.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/utils/SpriteSheetBuilder.js	2016-05-31 11:03:08.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
@@ -49,10 +45,10 @@
 	 * Note that the "images" used in the generated sprite sheet are actually canvas elements, and that they will be sized
 	 * to the nearest power of 2 up to the value of <code>maxWidth</code> or <code>maxHeight</code>.
 	 * @class SpriteSheetBuilder
-	 * @extends EventDispatcher
+	 * @extends createjs.EventDispatcher
 	 * @constructor
 	 **/
-	function SpriteSheetBuilder() {
+	createjs.SpriteSheetBuilder = function() {
 		this.EventDispatcher_constructor();
 		
 	// public properties:
@@ -173,7 +169,7 @@
 		 **/
 		this._scale = 1;
 	}
-	var p = createjs.extend(SpriteSheetBuilder, createjs.EventDispatcher);
+	
 
 	/**
 	 * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.
@@ -186,12 +182,12 @@
 	 * @protected
 	 * @deprecated
 	 */
-	// p.initialize = function() {}; // searchable for devs wondering where it is.
+	// createjs.SpriteSheetBuilder.prototype.initialize = function() {}; // searchable for devs wondering where it is.
 
 
 // constants:
-	SpriteSheetBuilder.ERR_DIMENSIONS = "frame dimensions exceed max spritesheet dimensions";
-	SpriteSheetBuilder.ERR_RUNNING = "a build is already running";
+	createjs.SpriteSheetBuilder.ERR_DIMENSIONS = "frame dimensions exceed max spritesheet dimensions";
+	createjs.SpriteSheetBuilder.ERR_RUNNING = "a build is already running";
 
 // events:
 	/**
@@ -223,8 +219,8 @@
 	 * transforms to a source object and have them captured in the sprite sheet, simply place it into a {{#crossLink "Container"}}{{/crossLink}}
 	 * and pass in the Container as the source.
 	 * @method addFrame
-	 * @param {DisplayObject} source The source {{#crossLink "DisplayObject"}}{{/crossLink}}  to draw as the frame.
-	 * @param {Rectangle} [sourceRect] A {{#crossLink "Rectangle"}}{{/crossLink}} defining the portion of the
+	 * @param {createjs.DisplayObject} source The source {{#crossLink "DisplayObject"}}{{/crossLink}}  to draw as the frame.
+	 * @param {createjs.Rectangle} [sourceRect] A {{#crossLink "Rectangle"}}{{/crossLink}} defining the portion of the
 	 * source to draw to the frame. If not specified, it will look for a <code>getBounds</code> method, bounds property,
 	 * or <code>nominalBounds</code> property on the source to use. If one is not found, the frame will be skipped.
 	 * @param {Number} [scale=1] Optional. The scale to draw this frame at. Default is 1.
@@ -232,8 +228,8 @@
 	 * @param {Object} [setupData] Arbitrary setup data to pass to setupFunction as the second parameter.
 	 * @return {Number} The index of the frame that was just added, or null if a sourceRect could not be determined.
 	 **/
-	p.addFrame = function(source, sourceRect, scale, setupFunction, setupData) {
-		if (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }
+ createjs.SpriteSheetBuilder.prototype.addFrame = function(source, sourceRect, scale, setupFunction, setupData) {
+		if (this._data) { throw createjs.SpriteSheetBuilder.ERR_RUNNING; }
 		var rect = sourceRect||source.bounds||source.nominalBounds;
 		if (!rect&&source.getBounds) { rect = source.getBounds(); }
 		if (!rect) { return null; }
@@ -252,8 +248,8 @@
 	 * @param {Number} [frequency] Specifies a frame advance frequency for this animation. For example, a value
 	 * of 2 would cause the animation to advance every second tick.
 	 **/
-	p.addAnimation = function(name, frames, next, frequency) {
-		if (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }
+ createjs.SpriteSheetBuilder.prototype.addAnimation = function(name, frames, next, frequency) {
+		if (this._data) { throw createjs.SpriteSheetBuilder.ERR_RUNNING; }
 		this._animations[name] = {frames:frames, next:next, frequency:frequency};
 	};
 
@@ -265,8 +261,8 @@
 	 *
 	 * Note that this will iterate through the full MovieClip with actionsEnabled set to false, ending on the last frame.
 	 * @method addMovieClip
-	 * @param {MovieClip} source The source MovieClip instance to add to the sprite sheet.
-	 * @param {Rectangle} [sourceRect] A {{#crossLink "Rectangle"}}{{/crossLink}} defining the portion of the source to
+	 * @param {createjs.MovieClip} source The source MovieClip instance to add to the sprite sheet.
+	 * @param {createjs.Rectangle} [sourceRect] A {{#crossLink "Rectangle"}}{{/crossLink}} defining the portion of the source to
 	 * draw to the frame. If not specified, it will look for a <code>getBounds</code> method, <code>frameBounds</code>
 	 * Array, <code>bounds</code> property, or <code>nominalBounds</code> property on the source to use. If one is not
 	 * found, the MovieClip will be skipped.
@@ -275,8 +271,8 @@
 	 * @param {Object} [setupData] Arbitrary setup data to pass to setupFunction as the second parameter.
 	 * @param {Function} [labelFunction] This method will be called for each movieclip label that is added with four parameters: the label name, the source movieclip instance, the starting frame index (in the movieclip timeline) and the end index. It must return a new name for the label/animation, or false to exclude the label.
 	 **/
-	p.addMovieClip = function(source, sourceRect, scale, setupFunction, setupData, labelFunction) {
-		if (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }
+ createjs.SpriteSheetBuilder.prototype.addMovieClip = function(source, sourceRect, scale, setupFunction, setupData, labelFunction) {
+		if (this._data) { throw createjs.SpriteSheetBuilder.ERR_RUNNING; }
 		var rects = source.frameBounds;
 		var rect = sourceRect||source.bounds||source.nominalBounds;
 		if (!rect&&source.getBounds) { rect = source.getBounds(); }
@@ -313,10 +309,10 @@
 	/**
 	 * Builds a SpriteSheet instance based on the current frames.
 	 * @method build
-	 * @return {SpriteSheet} The created SpriteSheet instance, or null if a build is already running or an error occurred.
+	 * @return {createjs.SpriteSheet} The created SpriteSheet instance, or null if a build is already running or an error occurred.
 	 **/
-	p.build = function() {
-		if (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }
+ createjs.SpriteSheetBuilder.prototype.build = function() {
+		if (this._data) { throw createjs.SpriteSheetBuilder.ERR_RUNNING; }
 		this._startBuild();
 		while (this._drawNext()) {}
 		this._endBuild();
@@ -330,8 +326,8 @@
 	 * @method buildAsync
 	 * @param {Number} [timeSlice] Sets the timeSlice property on this instance.
 	 **/
-	p.buildAsync = function(timeSlice) {
-		if (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }
+ createjs.SpriteSheetBuilder.prototype.buildAsync = function(timeSlice) {
+		if (this._data) { throw createjs.SpriteSheetBuilder.ERR_RUNNING; }
 		this.timeSlice = timeSlice;
 		this._startBuild();
 		var _this = this;
@@ -342,7 +338,7 @@
 	 * Stops the current asynchronous build.
 	 * @method stopAsync
 	 **/
-	p.stopAsync = function() {
+ createjs.SpriteSheetBuilder.prototype.stopAsync = function() {
 		clearTimeout(this._timerID);
 		this._data = null;
 	};
@@ -351,7 +347,7 @@
 	 * SpriteSheetBuilder instances cannot be cloned.
 	 * @method clone
 	 **/
-	p.clone = function() {
+ createjs.SpriteSheetBuilder.prototype.clone = function() {
 		throw("SpriteSheetBuilder cannot be cloned.");
 	};
 
@@ -360,7 +356,7 @@
 	 * @method toString
 	 * @return {String} a string representation of the instance.
 	 **/
-	p.toString = function() {
+ createjs.SpriteSheetBuilder.prototype.toString = function() {
 		return "[SpriteSheetBuilder]";
 	};
 
@@ -370,7 +366,7 @@
 	 * @method _startBuild
 	 * @protected
 	 **/
-	p._startBuild = function() {
+ createjs.SpriteSheetBuilder.prototype._startBuild = function() {
 		var pad = this.padding||0;
 		this.progress = 0;
 		this.spriteSheet = null;
@@ -386,7 +382,7 @@
 		var frames = this._frames.slice();
 		frames.sort(function(a,b) { return (a.height<=b.height) ? -1 : 1; });
 
-		if (frames[frames.length-1].height+pad*2 > this.maxHeight) { throw SpriteSheetBuilder.ERR_DIMENSIONS; }
+		if (frames[frames.length-1].height+pad*2 > this.maxHeight) { throw createjs.SpriteSheetBuilder.ERR_DIMENSIONS; }
 		var y=0, x=0;
 		var img = 0;
 		while (frames.length) {
@@ -411,7 +407,7 @@
 	 * @protected
 	 * @return {Number} The width & height of the row.
 	 **/
-	p._setupMovieClipFrame = function(source, data) {
+ createjs.SpriteSheetBuilder.prototype._setupMovieClipFrame = function(source, data) {
 		var ae = source.actionsEnabled;
 		source.actionsEnabled = false;
 		source.gotoAndStop(data.i);
@@ -424,7 +420,7 @@
 	 * @protected
 	 * @return {Number} The width & height of the row.
 	 **/
-	p._getSize = function(size,max) {
+ createjs.SpriteSheetBuilder.prototype._getSize = function(size,max) {
 		var pow = 4;
 		while (Math.pow(2,++pow) < size){}
 		return Math.min(max,Math.pow(2,pow));
@@ -440,7 +436,7 @@
 	 * @protected
 	 * @return {Number} The width & height of the row.
 	 **/
-	p._fillRow = function(frames, y, img, dataFrames, pad) {
+ createjs.SpriteSheetBuilder.prototype._fillRow = function(frames, y, img, dataFrames, pad) {
 		var w = this.maxWidth;
 		var maxH = this.maxHeight;
 		y += pad;
@@ -456,7 +452,7 @@
 			var ry = Math.floor(sc*rect.y-pad);
 			var rh = Math.ceil(sc*rect.height+pad*2);
 			var rw = Math.ceil(sc*rect.width+pad*2);
-			if (rw > w) { throw SpriteSheetBuilder.ERR_DIMENSIONS; }
+			if (rw > w) { throw createjs.SpriteSheetBuilder.ERR_DIMENSIONS; }
 			if (rh > h || x+rw > w) { continue; }
 			frame.img = img;
 			frame.rect = new createjs.Rectangle(x,y,rw,rh);
@@ -472,7 +468,7 @@
 	 * @method _endBuild
 	 * @protected
 	 **/
-	p._endBuild = function() {
+ createjs.SpriteSheetBuilder.prototype._endBuild = function() {
 		this.spriteSheet = new createjs.SpriteSheet(this._data);
 		this._data = null;
 		this.progress = 1;
@@ -483,7 +479,7 @@
 	 * @method _run
 	 * @protected
 	 **/
-	p._run = function() {
+ createjs.SpriteSheetBuilder.prototype._run = function() {
 		var ts = Math.max(0.01, Math.min(0.99, this.timeSlice||0.3))*50;
 		var t = (new Date()).getTime()+ts;
 		var complete = false;
@@ -509,7 +505,7 @@
 	 * @protected
 	 * @return Boolean Returns false if this is the last draw.
 	 **/
-	p._drawNext = function() {
+ createjs.SpriteSheetBuilder.prototype._drawNext = function() {
 		var frame = this._frames[this._index];
 		var sc = frame.scale*this._scale;
 		var rect = frame.rect;
@@ -529,5 +525,5 @@
 	};
 
 
-	createjs.SpriteSheetBuilder = createjs.promote(SpriteSheetBuilder, "EventDispatcher");
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/utils/SpriteSheetUtils.js EaselJS-0.8.0/src/easeljs/utils/SpriteSheetUtils.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/utils/SpriteSheetUtils.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/utils/SpriteSheetUtils.js	2016-05-31 11:03:08.000000000 +0200
@@ -31,10 +31,6 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 	
 	
 // constructor:
@@ -46,7 +42,7 @@
 	 * @class SpriteSheetUtils
 	 * @static
 	 **/
-	function SpriteSheetUtils() {
+	createjs.SpriteSheetUtils = function() {
 		throw "SpriteSheetUtils cannot be instantiated";
 	}
 
@@ -66,8 +62,8 @@
 	*/
 	var canvas = (createjs.createCanvas?createjs.createCanvas():document.createElement("canvas"));
 	if (canvas.getContext) {
-		SpriteSheetUtils._workingCanvas = canvas;
-		SpriteSheetUtils._workingContext = canvas.getContext("2d");
+		createjs.SpriteSheetUtils._workingCanvas = canvas;
+		createjs.SpriteSheetUtils._workingContext = canvas.getContext("2d");
 		canvas.width = canvas.height = 1;
 	}
 
@@ -80,7 +76,7 @@
 	 * (_h, _v, _hv as appropriate). Make sure the sprite sheet images are fully loaded before using this method.
 	 * <br/><br/>
 	 * For example:<br/>
-	 * SpriteSheetUtils.addFlippedFrames(mySpriteSheet, true, true);
+	 * createjs.SpriteSheetUtils.addFlippedFrames(mySpriteSheet, true, true);
 	 * The above would add frames that are flipped horizontally AND frames that are flipped vertically.
 	 * <br/><br/>
 	 * Note that you can also flip any display object by setting its scaleX or scaleY to a negative value. On some
@@ -88,19 +84,19 @@
 	 * which is why addFlippedFrames is available.
 	 * @method addFlippedFrames
 	 * @static
-	 * @param {SpriteSheet} spriteSheet
+	 * @param {createjs.SpriteSheet} spriteSheet
 	 * @param {Boolean} horizontal If true, horizontally flipped frames will be added.
 	 * @param {Boolean} vertical If true, vertically flipped frames will be added.
 	 * @param {Boolean} both If true, frames that are flipped both horizontally and vertically will be added.
 	 * @deprecated Modern browsers perform better when flipping via a transform (ex. scaleX=-1) rendering this obsolete.
 	 **/
-	SpriteSheetUtils.addFlippedFrames = function(spriteSheet, horizontal, vertical, both) {
+	createjs.SpriteSheetUtils.addFlippedFrames = function(spriteSheet, horizontal, vertical, both) {
 		if (!horizontal && !vertical && !both) { return; }
 
 		var count = 0;
-		if (horizontal) { SpriteSheetUtils._flip(spriteSheet,++count,true,false); }
-		if (vertical) { SpriteSheetUtils._flip(spriteSheet,++count,false,true); }
-		if (both) { SpriteSheetUtils._flip(spriteSheet,++count,true,true); }
+		if (horizontal) { createjs.SpriteSheetUtils._flip(spriteSheet,++count,true,false); }
+		if (vertical) { createjs.SpriteSheetUtils._flip(spriteSheet,++count,false,true); }
+		if (both) { createjs.SpriteSheetUtils._flip(spriteSheet,++count,true,true); }
 	};
 
 	/**
@@ -120,17 +116,17 @@
 	 * name is specified, only the first frame of the animation will be extracted.
 	 * @return {Image} a single frame of the specified sprite sheet as a new PNG image.
 	*/
-	SpriteSheetUtils.extractFrame = function(spriteSheet, frameOrAnimation) {
+	createjs.SpriteSheetUtils.extractFrame = function(spriteSheet, frameOrAnimation) {
 		if (isNaN(frameOrAnimation)) {
 			frameOrAnimation = spriteSheet.getAnimation(frameOrAnimation).frames[0];
 		}
 		var data = spriteSheet.getFrame(frameOrAnimation);
 		if (!data) { return null; }
 		var r = data.rect;
-		var canvas = SpriteSheetUtils._workingCanvas;
+		var canvas = createjs.SpriteSheetUtils._workingCanvas;
 		canvas.width = r.width;
 		canvas.height = r.height;
-		SpriteSheetUtils._workingContext.drawImage(data.image, r.x, r.y, r.width, r.height, 0, 0, r.width, r.height);
+		createjs.SpriteSheetUtils._workingContext.drawImage(data.image, r.x, r.y, r.width, r.height, 0, 0, r.width, r.height);
 		var img = document.createElement("img");
 		img.src = canvas.toDataURL("image/png");
 		return img;
@@ -149,7 +145,7 @@
 	 * @return {Canvas} A canvas with the combined image data. This can be used as a source for Bitmap or SpriteSheet.
 	 * @deprecated Tools such as ImageAlpha generally provide better results. This will be moved to sandbox in the future.
 	*/
-	SpriteSheetUtils.mergeAlpha = function(rgbImage, alphaImage, canvas) {
+	createjs.SpriteSheetUtils.mergeAlpha = function(rgbImage, alphaImage, canvas) {
 		if (!canvas) { canvas = createjs.createCanvas?createjs.createCanvas():document.createElement("canvas"); }
 		canvas.width = Math.max(alphaImage.width, rgbImage.width);
 		canvas.height = Math.max(alphaImage.height, rgbImage.height);
@@ -164,10 +160,10 @@
 
 
 // private static methods:
-	SpriteSheetUtils._flip = function(spriteSheet, count, h, v) {
+	createjs.SpriteSheetUtils._flip = function(spriteSheet, count, h, v) {
 		var imgs = spriteSheet._images;
-		var canvas = SpriteSheetUtils._workingCanvas;
-		var ctx = SpriteSheetUtils._workingContext;
+		var canvas = createjs.SpriteSheetUtils._workingCanvas;
+		var ctx = createjs.SpriteSheetUtils._workingContext;
 		var il = imgs.length/count;
 		for (var i=0;i<il;i++) {
 			var src = imgs[i];
@@ -224,5 +220,5 @@
 	};
 
 
-	createjs.SpriteSheetUtils = SpriteSheetUtils;
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/utils/UID.js EaselJS-0.8.0/src/easeljs/utils/UID.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/utils/UID.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/utils/UID.js	2016-05-31 11:03:07.000000000 +0200
@@ -31,20 +31,16 @@
  */
 
 // namespace:
-this.createjs = this.createjs||{};
-
-(function() {
-	"use strict";
 
 
 // constructor:
 	/**
-	 * Global utility for generating sequential unique ID numbers. The UID class uses a static interface (ex. <code>UID.get()</code>)
+	 * Global utility for generating sequential unique ID numbers. The UID class uses a static interface (ex. <code>createjs.UID.get()</code>)
 	 * and should not be instantiated.
 	 * @class UID
 	 * @static
 	 **/
-	function UID() {
+	createjs.UID = function() {
 		throw "UID cannot be instantiated";
 	}
 
@@ -55,7 +51,7 @@
 	 * @type Number
 	 * @protected
 	 **/
-	UID._nextID = 0;
+	createjs.UID._nextID = 0;
 
 
 // public static methods:
@@ -65,10 +61,10 @@
 	 * @return {Number} The next unique id
 	 * @static
 	 **/
-	UID.get = function() {
-		return UID._nextID++;
+	createjs.UID.get = function() {
+		return createjs.UID._nextID++;
 	};
 
 
-	createjs.UID = UID;
-}());
+	
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/version.js EaselJS-0.8.0/src/easeljs/version.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/version.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/version.js	2016-05-31 11:03:08.000000000 +0200
@@ -1,10 +1,6 @@
 /**
  * @module EaselJS
  */
-this.createjs = this.createjs || {};
-
-(function() {
-	"use strict";
 
 	/**
 	 * Static class holding library specific information such as the version and buildDate of
@@ -29,4 +25,4 @@
 	 **/
 	s.buildDate = /*=date*/""; // injected by build process
 
-})();
+
diff -ur ../target/downloads/EaselJS-0.8.0/src/easeljs/version_movieclip.js EaselJS-0.8.0/src/easeljs/version_movieclip.js
--- ../target/downloads/EaselJS-0.8.0/src/easeljs/version_movieclip.js	2014-12-19 11:08:04.000000000 +0100
+++ EaselJS-0.8.0/src/easeljs/version_movieclip.js	2016-05-31 11:03:08.000000000 +0200
@@ -1,7 +1,4 @@
-this.createjs = this.createjs || {};
 
-(function() {
-	"use strict";
 
 	/**
 	 * Static class holding library specific information such as the version and buildDate of
@@ -27,4 +24,4 @@
 	 **/
 	s.buildDate = /*=date*/""; // injected by build process
 
-})();
+
